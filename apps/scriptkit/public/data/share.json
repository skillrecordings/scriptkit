[{"avatar":"https://avatars.githubusercontent.com/u/52321532?u=ddb1a0825917a338122fd15542276e3b29f2f4af&v=4","user":"awakenedhaggis","author":null,"twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1390","url":"","title":"Query Kagi FastGPT","command":"query-kagi-fastgpt","content":"Wanted to make something similar to the OpenAi integrations already made for people who are subscribed to Kagi\r\n\r\n[Gist here](https://gist.github.com/awakenedhaggis/bd9dbf2421325117f7e5c20f62e1c99f)\r\n\r\n`Enter` to submit a query\r\n`Ctrl/Command + R` to rerun a query\r\n`Ctrl/Command + W` to close the window","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-04T23:37:23Z"},{"name":"Shortcut to Speakers","shortcut":"cmd shift m","avatar":"https://avatars.githubusercontent.com/u/3072458?u=cb1f8ec2b30c2c745c8f33c8225dee605b5ceab1&v=4","user":"AquiGorka","author":"Gorka Ludlow","twitter":"AquiGorka","discussion":"https://github.com/johnlindquist/kit/discussions/1388","url":"","title":"Keyboard shortcut to switch audio output to speakers","command":"keyboard-shortcut-to-switch-audio-output-to-speakers","content":"Existing alias: `alias smac=\"SwitchAudioSource -s \\\"MacBook Pro Speakers\\\"\"`  (uses [switchaudio-osx](https://github.com/deweller/switchaudio-osx))\r\n\r\nScript:\r\n\r\n```\r\n// Name: Shortcut to Speakers\r\n// Shortcut: cmd shift m\r\nimport \"@johnlindquist/kit\"\r\nawait $`/bin/zsh -lic smac`\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-04T17:37:52Z"},{"name":"Shortcut to Headphones","shortcut":"cmd shift h","avatar":"https://avatars.githubusercontent.com/u/3072458?u=cb1f8ec2b30c2c745c8f33c8225dee605b5ceab1&v=4","user":"AquiGorka","author":"Gorka Ludlow","twitter":"AquiGorka","discussion":"https://github.com/johnlindquist/kit/discussions/1387","url":"","title":"Keyboard shortcut to switch audio output to headphones","command":"keyboard-shortcut-to-switch-audio-output-to-headphones","content":"Existing alias: `alias shead=\"SwitchAudioSource -s \\\"External Headphones\\\"\"` (uses [switchaudio-osx](https://github.com/deweller/switchaudio-osx))\r\n\r\nScript:\r\n```\r\n// Name: Shortcut to Headphones\r\n// Shortcut: cmd shift h\r\nimport \"@johnlindquist/kit\"\r\nawait $`/bin/zsh -lic shead`\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-12-04T17:37:11Z"},{"name":"Dummy Data","description":"","author":"Nghia Vu","avatar":"https://avatars.githubusercontent.com/u/80865148?u=3b4757858e6abb48bc4fff9a133be4f009deaafe&v=4","user":"NGH14","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1373","url":"","title":"Generate Dummy Data","command":"generate-dummy-data","content":"[Install dummy-data](https://scriptkit.com/api/new?name=dummy-data&url=https://gist.githubusercontent.com/NGH14/b2efa176296362f26732bdc4fcf69402/raw/0d3ebc2ba760c720419cbd7399ed8dde62f0ca81/dummy-data.js)\r\n\r\n\r\n```js\r\n// Name: Dummy Data\r\n// Description: Generate fake data for real use-case (that #version just generate fields about person and color)\r\n// Author: Nghia Vu (Ngh14)\r\n\r\nimport '@johnlindquist/kit';\r\nimport falso from '@ngneat/falso';\r\n\r\nlet counts = 1;\r\n\r\nconst randZodiacSign = () => {\r\n\tconst zodiacSigns = [\r\n\t\t'Aries',\r\n\t\t'Taurus',\r\n\t\t'Gemini',\r\n\t\t'Cancer',\r\n\t\t'Leo',\r\n\t\t'Virgo',\r\n\t\t'Libra',\r\n\t\t'Scorpio',\r\n\t\t'Sagittarius',\r\n\t\t'Capricorn',\r\n\t\t'Aquarius',\r\n\t\t'Pisces',\r\n\t];\r\n\treturn falso.rand(zodiacSigns);\r\n};\r\n\r\nconst person = [\r\n\t{\r\n\t\tname: 'Full Name',\r\n\t\tvalue: () => falso.randFullName(),\r\n\t\tdescription: 'The complete name of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Title',\r\n\t\tvalue: () => falso.randPersonTitle(),\r\n\t\tdescription: 'The professional title of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Email',\r\n\t\tvalue: () => falso.randEmail(),\r\n\t\tdescription: 'The email address of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Phone',\r\n\t\tvalue: () => falso.randPhoneNumber(),\r\n\t\tdescription: 'The phone number of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Address',\r\n\t\tvalue: () => falso.randAddress(),\r\n\t\tdescription: 'The physical address of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Username',\r\n\t\tvalue: () => falso.randUserName(),\r\n\t\tdescription: 'The username chosen for the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Last Name',\r\n\t\tvalue: () => falso.randLastName(),\r\n\t\tdescription: 'The last name of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'First_Name',\r\n\t\tvalue: () => falso.randFirstName(),\r\n\t\tdescription: 'The first name of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Gender',\r\n\t\tvalue: () => falso.randGender(),\r\n\t\tdescription: 'The gender of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Avatar',\r\n\t\tvalue: () => falso.randAvatar(),\r\n\t\tdescription: 'The profile picture (avatar) of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Pronoun',\r\n\t\tvalue: () => falso.randPronoun(),\r\n\t\tdescription: 'The preferred pronoun of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Skill',\r\n\t\tvalue: () => falso.randSkill(),\r\n\t\tdescription: 'A skill associated with the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Password',\r\n\t\tvalue: () => falso.randPassword(),\r\n\t\tdescription: 'The password for the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Country',\r\n\t\tvalue: () => falso.randCountry(),\r\n\t\tdescription: 'The country of residence of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'City',\r\n\t\tvalue: () => falso.randCity(),\r\n\t\tdescription: 'The city of residence of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Role',\r\n\t\tvalue: () => falso.randRole(),\r\n\t\tdescription: 'The role or position held by the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Company',\r\n\t\tvalue: () => falso.randCompanyName(),\r\n\t\tdescription:\r\n\t\t\t'The name of the company associated with the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Subscription Plan',\r\n\t\tvalue: () => falso.randSubscriptionPlan(),\r\n\t\tdescription: 'The subscription plan chosen by the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Date of Birth',\r\n\t\tvalue: () => falso.randPastDate(),\r\n\t\tdescription: 'The date of birth of the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Credit Card',\r\n\t\tvalue: () => falso.randCreditCard(),\r\n\t\tdescription: 'The randomly generated credit card information of the user.',\r\n\t},\r\n\t{\r\n\t\tname: 'User Agent',\r\n\t\tvalue: () => falso.randUserAgent(),\r\n\t\tdescription:\r\n\t\t\t'The user agent of the device used by the randomly generated user.',\r\n\t},\r\n\t{\r\n\t\tname: 'IP',\r\n\t\tvalue: () => falso.randIP(),\r\n\t\tdescription: 'The randomly generated IP address of the user.',\r\n\t},\r\n\t{\r\n\t\tname: 'IP6',\r\n\t\tvalue: () => falso.randIP6(),\r\n\t\tdescription: 'The randomly generated IPv6 address of the user.',\r\n\t},\r\n\t{\r\n\t\tname: 'Zodiac Sign',\r\n\t\tvalue: () => randZodiacSign(),\r\n\t\tdescription: 'The randomly generated zodiac sign of the user.',\r\n\t},\r\n];\r\n\r\nconst color = [\r\n\t{\r\n\t\tname: 'Name',\r\n\t\tvalue: () => falso.randColor(),\r\n\t\tdescription: 'Generates a random color name.',\r\n\t},\r\n\t{\r\n\t\tname: 'HEX',\r\n\t\tvalue: () => falso.randHex(),\r\n\t\tdescription: 'Generates a random hexadecimal color code.',\r\n\t},\r\n\t{\r\n\t\tname: 'HSL',\r\n\t\tvalue: () => falso.randHsl(),\r\n\t\tdescription:\r\n\t\t\t'Generates a random HSL (Hue, Saturation, Lightness) color code.',\r\n\t},\r\n\t{\r\n\t\tname: 'RGB',\r\n\t\tvalue: () => falso.randRgb(),\r\n\t\tdescription: 'Generates a random RGB (Red, Green, Blue) color code.',\r\n\t},\r\n\t{\r\n\t\tname: 'RGBa',\r\n\t\tvalue: () => falso.randRgb({ alpha: true }),\r\n\t\tdescription:\r\n\t\t\t'Generates a random RGBA (Red, Green, Blue, Alpha) color code.',\r\n\t},\r\n];\r\n\r\nfunction filterDataField(arr, field) {\r\n\tconst filtered = {};\r\n\tarr.map(({ name, value }) => {\r\n\t\tif (field.includes(name)) {\r\n\t\t\tfiltered[name] = value();\r\n\t\t}\r\n\t});\r\n\treturn filtered;\r\n}\r\n\r\nfunction generateData({ types, fields, ...rest }) {\r\n\tconst arr = [];\r\n\r\n\tfor (let index = 0; index < counts; index++) {\r\n\t\tarr.push(filterDataField(types, fields));\r\n\t}\r\n\tsetSelectedText(JSON.stringify(arr));\r\n}\r\n\r\nlet types = await arg('Generate Random Data...', ['people', 'color']);\r\n\r\nif (types == 'people') {\r\n\tlet peopleField = await select(\r\n\t\t'Select a fields....',\r\n\t\tperson\r\n\t\t\t.sort((a, b) => a.name.localeCompare(b.name))\r\n\t\t\t.map(({ name, value, description }) => ({\r\n\t\t\t\tname,\r\n\t\t\t\tdescription,\r\n\t\t\t\tvalue: name,\r\n\t\t\t\theight: PROMPT.HEIGHT.XS,\r\n\t\t\t\tpreview: () => JSON.stringify(value()),\r\n\t\t\t})),\r\n\t);\r\n\r\n\tcounts = await arg({\r\n\t\tdescription: 'How many person records you want?',\r\n\t\tplaceholder: '1',\r\n\t});\r\n\r\n\tgenerateData({ types: person, fields: peopleField });\r\n} else if (types == 'color') {\r\n\tlet result = await arg(\r\n\t\t'Generate random color...',\r\n\t\tcolor.map(({ name, value, description }) => ({\r\n\t\t\tname,\r\n\t\t\tdescription,\r\n\t\t\tvalue: value(),\r\n\t\t\theight: PROMPT.HEIGHT.XS,\r\n\t\t\tpreview: () => value(),\r\n\t\t})),\r\n\t);\r\n\r\n\tsetSelectedText(result);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-11-06T17:06:44Z"},{"name":"Switch Audio","description":"","author":"Nate Drake","avatar":"https://avatars.githubusercontent.com/u/73789?v=4","user":"ndrake","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1367","url":"","title":"Audio Output Switcher","command":"audio-output-switcher","content":"A Mac-only script using the [switchaudio-osx](https://github.com/deweller/switchaudio-osx) tool to quickly change audio output devices\r\n\r\n[Open switch-audio in Script Kit](https://scriptkit.com/api/new?name=switch-audio&url=https://gist.githubusercontent.com/ndrake/3c0840f03662a21900a81ec22ab734a1/raw/81b7c4c7538ca93eca953a6c34e58651f528fddf/switch-audio.js\")\r\n\r\n```js\r\n/*\r\n## Switch audio output device\r\n*/\r\n\r\n// Name: Switch Audio\r\n// Description: Switch audio output device (Mac only)\r\n// Author: Nate Drake\r\n\r\n// Install SwitchAudioSource with `brew install switchaudio-osx`\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst SwitchAudioSourcePath = '/opt/homebrew/bin/SwitchAudioSource'\r\n\r\nconst sasExists = await pathExists(SwitchAudioSourcePath)\r\n\r\nif (sasExists) {\r\n\r\n    const currentOutput = await $`${SwitchAudioSourcePath} -c`\r\n    const items = await $`${SwitchAudioSourcePath} -a -t output`\r\n\r\n    const choices = items.stdout.trim().split(/\\r?\\n/).filter(o => o !== currentOutput.stdout.trim())\r\n\r\n    let output = await arg(\r\n        {\r\n            placeholder: 'Pick ouput device'\r\n        },\r\n        choices\r\n    )\r\n\r\n    await $`${SwitchAudioSourcePath} -s ${output} -t output`\r\n} else {\r\n    await div(md(`ERROR: Please install SwitchAudioSource`))\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-11-01T01:28:45Z"},{"name":"Clipboard history","author":"Aldo Preciado","gitHub":"@aldirrix","shortcut":"command shift v","avatar":"https://avatars.githubusercontent.com/u/12806880?u=dd4d009aa8af0e17149a51a18969d29d1e4fd8de&v=4","user":"aldirrix","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1360","url":"","title":"Clipboard history with image preview","command":"clipboard-history-with-image-preview","content":"Hello there, first of all I would like to praise everyone that made this possible so far! I really like using kit and tweaking few scripts here and there for productivity.\r\n\r\nI was using an adapted version of the [community-available clipboard history](https://github.com/johnlindquist/kit/discussions/1120) but I was struggling with some errors regarding the database from time to time and this was also causing processes not being finished properly and running forever and forcing me to restart kit. The db file was also randomly deleted at times and other not so nice things that were basically making me having to come back from time to time.\r\n\r\n```\r\n[2023-05-22 08:51:17.374] [warn]  ☠️ ERROR PROMPT SHOULD SHOW ☠️\r\n[2023-05-22 08:51:17.393] [warn]  Error: ENOENT: no such file or directory, rename '/Users/aldo/.kenv/db/.clipboard-history.json.tmp' -> '/Users/aldo/.kenv/db/clipboard-history.json'\r\n```\r\n\r\nAfter dealing with it for few months, I realized we now have the `getClipboardHistory` function when the watcher is enabled so I'd like to share this with everyone so that we have a proper history paste with image preview that doesn't require the managing of a json file.\r\n\r\n```ts\r\n// Name: Clipboard history\r\n// Author: Aldo Preciado\r\n// GitHub: @aldirrix\r\n// Shortcut: command shift v\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst history = await getClipboardHistory();\r\n\r\nlet { value, type } = await arg(\"What to paste?\", () => {\r\n  return history.map(({ value, type, timestamp, maybeSecret }) => {\r\n    const multilinePreview = value.includes(\"\\n\")\r\n      ? `<div class=\"font-mono text-xs\">${value\r\n          .split(\"\\n\")\r\n          .map((line) => `<p>${line}</p>`)\r\n          .join(\"\")}<div>`\r\n      : null;\r\n\r\n    const preview = type === \"image\" ? `<img src=\"${value}\" alt=\"${value}\">` : multilinePreview;\r\n\r\n    return {\r\n      type,\r\n      name: maybeSecret ? value.slice(0, 2).padEnd(10, \"*\") : value,\r\n      value: {\r\n        value,\r\n        type,\r\n      },\r\n      description: timestamp,\r\n      preview,\r\n    };\r\n  });\r\n});\r\n\r\nif (type === \"text\") {\r\n  await setSelectedText(value);\r\n}\r\n\r\nif (type === \"image\") {\r\n  await copyPathAsImage(value);\r\n  await keystroke(\"command v\");\r\n}\r\n```\r\n\r\nOn the same note, is there a way for us to configure the `maybeSecret` property in the kit app? It seems like there has not been any discussion around it and I was wondering","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-16T08:25:15Z"},{"name":"Watch Screenshots Dir","watch":"~/Desktop/screenshots","description":"","avatar":"https://avatars.githubusercontent.com/u/25487857?u=8de0c1a02b8786762899a89fa547ddd29dc17c20&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vojta_holik","discussion":"https://github.com/johnlindquist/kit/discussions/1357","url":"","title":"Screenshot tool alternative with Cloudinary","command":"screenshot-tool-alternative-with-cloudinary","content":"This is my alternative to _[insert your favorite screenshot upload tool]_. I use it in combination with [Record Screen script](https://github.com/johnlindquist/kit/discussions/1356).\r\n\r\nIt watches a `screenshots` directory on desktop and uploads any new file to Cloudinary. I have it then set to copy link to clipboard and move the file to trash. On top of that I have a dynamic route on my personal website to display the image/video along with a simple kvstore to track views (anonymously, just so that I know when someone view the file). It looks like [this](https://vojta.io/shots/1696935964744). Code for it is [here](https://github.com/vojtaholik/vojta-io-next/blob/main/src/pages/shots/%5Bpublic_id%5D.tsx).\r\n\r\nOne of nice things about Cloudinary is that if I record a video, all I have to do is replace`.mov` with `.gif` in url to get a gif.\r\n\r\nDon't forget to run following command in your terminal to change default screenshot (`cmd+shift+4`) location:\r\n```bash\r\ndefaults write com.apple.screencapture location ~/Desktop/screenshots\r\n``` \r\n\r\n[Open watch-screenshots in Script Kit](https://scriptkit.com/api/new?name=watch-screenshots&url=https://gist.githubusercontent.com/vojtaholik/3a7e5639544f2c62cbff989141f1da70/raw/c0782ea081d4afbe7bbd6e964d64f7f7b2b9fd54/watch-screenshots.js\")\r\n\r\n```js\r\n// Name: Watch Screenshots Dir\r\n// Watch: ~/Desktop/screenshots\r\n// Description: Don't forget to run following command in your terminal to set default screenshot directory in macOSX: defaults write com.apple.screencapture location ~/Desktop/screenshots\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport cloudinary from \"cloudinary\";\r\nimport trash from \"trash\";\r\n\r\nconst DIR = \"screenshots\";\r\nconst NOTIFY_SOUND_FILE_PATH = false; // home(\"Desktop/come-here-notification.mp3\");\r\nconst CUSTOM_DOMAIN = false; // 'https://vojta.io/shots/'\r\n\r\n// These are optional and automatically set by the watcher\r\nlet filePath = await arg();\r\nlet event = await arg();\r\n\r\n// Cloudinary options\r\nconst options = {\r\n  public_id: `${DIR}/${Date.now()}`,\r\n  unique_filename: true,\r\n  use_filename: true,\r\n  overwrite: true,\r\n  filename_override: true,\r\n};\r\n\r\ncloudinary.v2.config({\r\n  cloud_name: await env(\"CLOUDINARY_CLOUD_NAME\"),\r\n  api_key: await env(\"CLOUDINARY_API_KEY\"),\r\n  api_secret: await env(\"CLOUDINARY_API_SECRET\"),\r\n});\r\n\r\n// if file is added to DIR directory\r\nif (event === \"add\") {\r\n  await appendFile(home(`Desktop/${DIR}/download.log`), filePath + \"\\n\");\r\n  const isVideoFile = filePath.endsWith(\".mov\");\r\n\r\n  await cloudinary.v2.uploader.upload(\r\n    filePath,\r\n    { ...options, resource_type: isVideoFile ? \"video\" : \"image\" },\r\n    async (error, result) => {\r\n      if (error) {\r\n        console.error(\"Error uploading file:\", error);\r\n      } else {\r\n        if (result) {\r\n          await copy(\r\n            CUSTOM_DOMAIN\r\n              ? `${CUSTOM_DOMAIN}${result.public_id.replace(`${DIR}/`, \"\")}`\r\n              : isVideoFile\r\n              ? result.url.replace(\".mov\", \".mp4\")\r\n              : result.url\r\n          );\r\n          notify(\"✓ Uploaded to Cloudinary\");\r\n          NOTIFY_SOUND_FILE_PATH &&\r\n            (await playAudioFile(NOTIFY_SOUND_FILE_PATH));\r\n          await trash([filePath]);\r\n        }\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-12T09:42:34Z"},{"menu":"Record Screen","shortcut":"shift cmd 5","avatar":"https://avatars.githubusercontent.com/u/25487857?u=8de0c1a02b8786762899a89fa547ddd29dc17c20&v=4","user":"vojtaholik","author":"Vojta Holik","twitter":"vojta_holik","discussion":"https://github.com/johnlindquist/kit/discussions/1356","url":"","title":"Record Screen","command":"record-screen","content":"`shift + cmd + 5` will start a screen recording session on macOS Sonoma. It's got video trimming feature and is overall pretty good. I use it in combination with my [screenshot upload script](https://github.com/johnlindquist/kit/discussions/1357).\r\n\r\n[Open record-screen in Script Kit](https://scriptkit.com/api/new?name=record-screen&url=https://gist.githubusercontent.com/vojtaholik/ded540fc8b553751887adbc03abcca90/raw/973985e7ef57eff98d825229edfe5a00145e2978/record-screen.js\")\r\n\r\n```js\r\n// Menu: Record Screen\r\n// Shortcut: shift cmd 5\r\n\r\n/** @type {import(\"@johnlindquist/kit\")} */\r\n\r\nawait applescript(`\r\n--  # Setup to do a screen recording.\r\n\r\n# tell application \"QuickTime Player\" to new screen recording\r\n\r\n--  # Start the screen recording.\r\n\r\ntell application \"System Events\" to tell process \"Screen Shot\"\r\n    repeat until exists button \"Record\" of its front window\r\n        delay 0.1\r\n    end repeat\r\n    click button \"Record\" of its front window\r\nend tell\r\n\r\n--  # Set the time in seconds you want the recording to be.\r\n\r\ndelay 2\r\n\r\n--  # Stop the recording.\r\n\r\ntell application \"System Events\" to ¬\r\n    click menu bar item 1 ¬\r\n        of menu bar 1 ¬\r\n        of application process \"screencaptureui\"\r\n`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-12T09:30:50Z"},{"name":"arc-default-theme","description":"","note":"This script modifies Arc Browser's `StorableSidebar.json` file. Use at your peril.","avatar":"https://avatars.githubusercontent.com/u/150462?u=6478fa6d3285adcd99bf6819f9f7758f4de0d277&v=4","user":"kkoscielniak","author":"Krystian Kościelniak","twitter":"pankoscielniak","discussion":"https://github.com/johnlindquist/kit/discussions/1354","url":"https://gist.githubusercontent.com/kkoscielniak/524092e7812d37c1d30f0dc5aea5d0f8/raw/4b54a4dc63537e6e021766d7a03fdd98ebce03b6/arc-default-theme.ts","title":"Arc: Use default theme","command":"arc-use-default-theme","content":"This script allows for choosing the Space in [Arc Browser](https://arc.net) and reuse the same theme for every other Space.\r\n\r\n> I've created it because I dislike the default theme in Arc but still want to have the same one for every Space I have. \r\n\r\n> Note: This script modifies Arc Browser's `StorableSidebar.json` file. Use at your peril.\r\n\r\n[Open arc-default-theme in Script Kit](https://scriptkit.com/api/new?name=arc-default-theme&url=https://gist.githubusercontent.com/kkoscielniak/524092e7812d37c1d30f0dc5aea5d0f8/raw/4b54a4dc63537e6e021766d7a03fdd98ebce03b6/arc-default-theme.ts\")\r\n\r\n```js\r\n// Name: arc-default-theme\r\n// Description: Pick an Arc Browser's Space and set its theme for all the other Arc Spaces. Tested with Arc v1.10.1.\r\n// Note: This script modifies Arc Browser's `StorableSidebar.json` file. Use at your peril.\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport { readdir, readFile, writeFile } from \"node:fs/promises\";\r\nimport { homedir } from \"node:os\";\r\nimport { join } from \"node:path\";\r\n\r\nconst { rimraf } = await npm(\"rimraf\");\r\nconst psList = await npm(\"ps-list\");\r\n\r\nconst ARC_LIBRARY_PATH = join(\r\n  homedir(),\r\n  \"Library\",\r\n  \"Application Support\",\r\n  \"Arc\"\r\n);\r\n\r\nasync function listSidebarCacheFiles(): Promise<string[]> {\r\n  const arcFileNames = await readdir(ARC_LIBRARY_PATH);\r\n\r\n  return arcFileNames.filter(\r\n    (file) =>\r\n      file.startsWith(\"StorableSidebar\") && file !== \"StorableSidebar.json\"\r\n  ) as string[];\r\n}\r\n\r\nasync function removeSidebarCacheFiles(): Promise<void> {\r\n  const sidebarCacheFileNames = await listSidebarCacheFiles();\r\n\r\n  for (const fileName of sidebarCacheFileNames) {\r\n    try {\r\n      await rimraf(join(ARC_LIBRARY_PATH, fileName));\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n}\r\n\r\nasync function findArcProcess(): Promise<{\r\n  name: string;\r\n  pid: number;\r\n}> {\r\n  const processes = await psList();\r\n\r\n  const arcProcess = processes.find((process) => process.name === \"Arc\");\r\n\r\n  return arcProcess;\r\n}\r\n\r\nasync function killArcProcess(): Promise<void> {\r\n  const arcProcess = await findArcProcess();\r\n\r\n  if (arcProcess) {\r\n    process.kill(arcProcess.pid);\r\n  }\r\n}\r\n\r\nasync function readStorableSidebarJson(): Promise<StorableSidebarJson> {\r\n  const storableSidebarJson = await readFile(\r\n    join(ARC_LIBRARY_PATH, \"StorableSidebar.json\"),\r\n    \"utf-8\"\r\n  );\r\n\r\n  return JSON.parse(storableSidebarJson) as StorableSidebarJson;\r\n}\r\n\r\nasync function getSourceSpaceTheme(\r\n  json: StorableSidebarJson,\r\n  sourceSpaceName: string\r\n): Promise<WindowTheme> {\r\n  const sourceSpace: SpaceModel = json.sidebarSyncState.spaceModels.find(\r\n    (spaceModel) =>\r\n      typeof spaceModel !== \"string\" &&\r\n      spaceModel.value?.title === sourceSpaceName\r\n  ) as SpaceModel;\r\n\r\n  return sourceSpace.value?.customInfo.windowTheme;\r\n}\r\n\r\nasync function getTargetSpaces(\r\n  json: StorableSidebarJson,\r\n  originalSpaceName: string\r\n): Promise<SpaceData[]> {\r\n  const itemsContainer = json.sidebar.containers.find((container) =>\r\n    Object.hasOwnProperty.call(container, \"items\")\r\n  );\r\n\r\n  if (itemsContainer) {\r\n    const spaces = itemsContainer.spaces as (string | SpaceData)[];\r\n\r\n    return spaces.filter(\r\n      (space) => typeof space !== \"string\" && space.title !== originalSpaceName\r\n    ) as SpaceData[];\r\n  }\r\n}\r\n\r\nasync function getTargetSpacesSynced(\r\n  json: StorableSidebarJson,\r\n  originalSpaceName: string\r\n): Promise<SpaceModel[]> {\r\n  return json.sidebarSyncState.spaceModels.filter(\r\n    (spaceModel) =>\r\n      typeof spaceModel !== \"string\" &&\r\n      spaceModel.value?.title !== originalSpaceName\r\n  ) as SpaceModel[];\r\n}\r\n\r\nasync function writeStorableSidebarJson(\r\n  json: StorableSidebarJson\r\n): Promise<void> {\r\n  await removeSidebarCacheFiles();\r\n\r\n  await writeFile(\r\n    join(ARC_LIBRARY_PATH, \"StorableSidebar.json\"),\r\n    JSON.stringify(json, null, 2)\r\n  );\r\n}\r\n\r\nasync function mapJsonToSpaceNames(\r\n  json: StorableSidebarJson\r\n): Promise<string[]> {\r\n  const itemsContainer = json.sidebar.containers.find((container) =>\r\n    Object.hasOwnProperty.call(container, \"spaces\")\r\n  );\r\n\r\n  if (itemsContainer) {\r\n    const spaces = itemsContainer.spaces as (string | SpaceData)[];\r\n\r\n    return (\r\n      spaces.filter((space) => typeof space !== \"string\") as SpaceData[]\r\n    ).map((space) => space.title);\r\n  }\r\n}\r\n\r\nasync function main(): Promise<void> {\r\n  await killArcProcess();\r\n  await removeSidebarCacheFiles();\r\n\r\n  const storableSidebarJson: StorableSidebarJson =\r\n    await readStorableSidebarJson();\r\n\r\n  const spaceNames = await mapJsonToSpaceNames(storableSidebarJson);\r\n\r\n  const sourceSpaceName = await arg(\r\n    \"Which Space theme you want to use for all the others?\",\r\n    spaceNames\r\n  );\r\n\r\n  const sourceSpaceTheme: WindowTheme = await getSourceSpaceTheme(\r\n    storableSidebarJson,\r\n    sourceSpaceName\r\n  );\r\n\r\n  const targetSpaces: SpaceData[] = await getTargetSpaces(\r\n    storableSidebarJson,\r\n    sourceSpaceName\r\n  );\r\n\r\n  for (const targetSpace of targetSpaces) {\r\n    targetSpace.customInfo.windowTheme = sourceSpaceTheme;\r\n  }\r\n\r\n  const targetSpacesSynced: SpaceModel[] = await getTargetSpacesSynced(\r\n    storableSidebarJson,\r\n    sourceSpaceName\r\n  );\r\n\r\n  for (const targetSpace of targetSpacesSynced) {\r\n    targetSpace.value.customInfo.windowTheme = sourceSpaceTheme;\r\n  }\r\n\r\n  writeStorableSidebarJson(storableSidebarJson);\r\n}\r\n\r\nawait main();\r\n\r\n// Interfaces ------------------------------------------------------------------\r\n\r\ninterface Color {\r\n  colorSpace: string;\r\n  red: number;\r\n  alpha: number;\r\n  blue: number;\r\n  green: number;\r\n}\r\n\r\ninterface ColorSettings {\r\n  [key: string]: Color;\r\n}\r\n\r\ninterface WindowTheme {\r\n  semanticColorPalette: {\r\n    appearanceBased: {\r\n      light: ColorSettings;\r\n      dark: ColorSettings;\r\n    };\r\n  };\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface CustomInfo {\r\n  windowTheme: WindowTheme;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface SpaceData {\r\n  title: string;\r\n  customInfo: CustomInfo;\r\n  id: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface SpaceModel {\r\n  value: SpaceData;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface SidebarSyncState {\r\n  spaceModels: (string | SpaceModel)[];\r\n}\r\n\r\ninterface Sidebar {\r\n  containers: Array<\r\n    | {\r\n        spaces: (SpaceData | string)[];\r\n      }\r\n    | {\r\n        [key: string]: unknown;\r\n      }\r\n  >;\r\n}\r\n\r\ninterface StorableSidebarJson {\r\n  sidebarSyncState: SidebarSyncState;\r\n  sidebar: Sidebar;\r\n  [key: string]: unknown;\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-10-04T09:19:35Z"},{"avatar":"https://avatars.githubusercontent.com/u/76580?v=4","user":"abernier","author":"Antoine BERNIER","twitter":"abernier_","discussion":"https://github.com/johnlindquist/kit/discussions/1345","url":"","title":"generate-password","command":"generate-password","content":"[`Generate-password`](https://www.npmjs.com/package/generate-password)s variants:\r\n\r\n<img width=\"880\" alt=\"image\" src=\"https://user-images.githubusercontent.com/76580/269100710-c730f3b9-fa6d-4849-8477-a5fa0030215e.png\">\r\n\r\nCreate a [`~/.generatepasswordrc` file](https://www.npmjs.com/package/rc#standards) to change [defaults](https://www.npmjs.com/package/generate-password#user-content-available-options):\r\n\r\n```ini\r\nlength=12\r\nnumbers=true\r\nsymbols=true\r\n```\r\n\r\nSee source: https://gist.github.com/abernier/3dcf17422b23e151c2f60db874494233\r\n\r\n```ts\r\n// Generate password\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nimport { generate, generateMultiple, GenerateOptions } from \"generate-password\";\r\nimport rc from \"rc\";\r\n\r\nimport omit from \"lodash.omit\";\r\n\r\nimport { passwordStrength } from \"check-password-strength\";\r\n\r\nconst config = rc(\"generatepassword\", { length: 10 }); // create a ~/.generate-passwordrc file (see: https://www.npmjs.com/package/rc#standards)\r\n\r\nconst flags = {\r\n  copy: {\r\n    name: \"copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n};\r\n\r\nfunction formatVariant(o) {\r\n  if (Object.keys(o).length === 0) o = config;\r\n\r\n  const arr = [];\r\n  Object.keys(o).forEach((k) => {\r\n    if (o[k] === true) {\r\n      arr.push(`--${k}`);\r\n    } else if (o[k] === false) {\r\n      arr.push(`--no-${k}`);\r\n    }\r\n  });\r\n  return arr.join(\" \");\r\n}\r\n\r\nfunction sortedObj(o) {\r\n  return Object.fromEntries(Object.entries(o).sort());\r\n}\r\n\r\nconst chosenPass = await arg(\r\n  {\r\n    placeholder: (config.length && String(config.length)) || undefined,\r\n    description: `Length`,\r\n    flags,\r\n  },\r\n  (input) => {\r\n    const baseOpts = { ...config };\r\n\r\n    const length = (input && Number(input)) || undefined;\r\n    if (length) baseOpts.length = length;\r\n\r\n    const variants = [\r\n      {},\r\n      { numbers: true, symbols: true },\r\n      {\r\n        numbers: true,\r\n        symbols: true,\r\n        excludeSimilarCharacters: true,\r\n      },\r\n      { numbers: true, symbols: true, lowercase: false },\r\n      { numbers: true, symbols: true, uppercase: false },\r\n      { numbers: true },\r\n      { symbols: true },\r\n      { lowercase: false },\r\n      { uppercase: false },\r\n    ];\r\n\r\n    return variants.map((variant) => {\r\n      const opts = { ...baseOpts, ...variant };\r\n      const newPass = generate(opts);\r\n\r\n      const description =\r\n        Object.keys(variant).length === 0\r\n          ? `from config: ${config.config}`\r\n          : formatVariant(variant);\r\n\r\n      return {\r\n        name: `${newPass}`,\r\n        description,\r\n        preview() {\r\n          return md(`${passwordStrength(newPass).value}\r\n\\`\\`\\`json\r\n${JSON.stringify(omit(sortedObj(opts), \"_\", \"configs\", \"config\"), null, 4)}\r\n\\`\\`\\`\r\nsee [available options](https://www.npmjs.com/package/generate-password#available-options)\r\n`);\r\n        },\r\n        value: newPass,\r\n      };\r\n    });\r\n  }\r\n);\r\n\r\nif (flag?.copy) {\r\n  copy(chosenPass);\r\n} else {\r\n  setSelectedText(chosenPass);\r\n}\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-19T21:37:36Z"},{"name":"Generate Raycast Scripts","avatar":"https://avatars.githubusercontent.com/u/40895636?u=c291b499d0282201ff22db2e41d0b216c3bbece2&v=4","user":"cvbrian","author":null,"twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1342","url":"","title":"Trigger Scripts directly from Raycast","command":"trigger-scripts-directly-from-raycast","content":"Since I use Raycast as my launcher on my computer I wanted a way to trigger Script Kit scripts directly from the Raycast menu without a second step. I made a script to generate Raycast shell scripts that will directly trigger the Script Kit scripts. \r\n\r\n1. Make a directory to store the Raycast scripts.\r\n2. Add this directory to the Raycast settings as a script directory.\r\n3. Run this script and choose that directory when prompted. \r\n\r\nJust posting this as inspiration. This script is a little rough around the edges and could use refinement and customization to suit your needs. \r\n\r\n\r\n[Open generate-raycast-scripts in Script Kit](https://scriptkit.com/api/new?name=generate-raycast-scripts&url=https://gist.githubusercontent.com/cvbrian/b752361fb54b6efa813362087a72d330/raw/012f74a1249bf6a2406b02f0da1e07d6aa5d2e92/generate-raycast-scripts.js\")\r\n\r\n```js\r\n// Name: Generate Raycast Scripts\r\n\r\nimport \"@johnlindquist/kit\"\r\nconst collect = await npm(\"collect.js\")\r\n\r\n// get the directory to store the scripts in. Save in an environment variable\r\nconst directory = await env(\"RAYCAST_SCRIPTS_DIRECTORY\", async () => { return await selectFolder(\"Select a directory to store the scripts in\") })\r\n// get all the scripts from Script Kit\r\nlet scripts = collect(await getScripts())\r\n// remove preview from scripts\r\nscripts = scripts.map(script => {\r\n    delete script.preview\r\n    return script\r\n})\r\n// get only kenv scripts\r\nscripts = scripts.where('kenv', '')\r\n// TODO find out which scripts should be ignored\r\n// generate a script for each one in the directory\r\nscripts.each(async script => {\r\n    const scriptContents = `#!/bin/bash\r\n\r\n# Required parameters:\r\n# @raycast.schemaVersion 1\r\n# @raycast.title ${script.name}\r\n# @raycast.mode silent\r\n# @raycast.packageName Script Kit Scripts\r\n# Documentation:\r\n# @raycast.description ${script.description}\r\n\r\n\r\n~/.kit/kar ${script.command}\r\n`\r\n    await writeFile(`${directory}/${script.name}.sh`, scriptContents, \"utf-8\")\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-19T16:27:55Z"},{"name":"Lorem ipsum","avatar":"https://avatars.githubusercontent.com/u/76580?v=4","user":"abernier","author":"Antoine BERNIER","twitter":"abernier_","discussion":"https://github.com/johnlindquist/kit/discussions/1340","url":"https://gist.githubusercontent.com/abernier/e93dd8f345cba61d4dab1dafb7282a45/raw/lorem-ipsum.ts","title":"lorem-ipsum-text","command":"lorem-ipsum-text","content":"[Open `lorem-ipsum` in Script Kit](https://scriptkit.com/api/new?name=lorem&url=https://gist.githubusercontent.com/abernier/e93dd8f345cba61d4dab1dafb7282a45/raw/lorem-ipsum.ts)\r\n\r\nhttps://github.com/johnlindquist/kit/assets/76580/a6e449aa-d9ef-4404-9be8-b5fd7855e6d0\r\n\r\n[source code](https://gist.github.com/abernier/e93dd8f345cba61d4dab1dafb7282a45#file-lorem-ipsum-ts)\r\n\r\n```ts\r\n// Name: Lorem ipsum\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nimport { loremIpsum, ILoremIpsumParams } from \"lorem-ipsum\";\r\n\r\nlet ret: ReturnType<typeof loremIpsum>;\r\n\r\nconst DEFAULTS = {\r\n  count: 1,\r\n};\r\n\r\nlet count: ILoremIpsumParams[\"count\"];\r\nlet units: ILoremIpsumParams[\"units\"];\r\n\r\nconst flags = {\r\n  html: {\r\n    name: \"html\",\r\n    shortcut: \"cmd+h\",\r\n  },\r\n  copy: {\r\n    name: \"copy\",\r\n    shortcut: \"cmd+c\",\r\n  },\r\n};\r\n\r\nfunction myLoremIpsum({ ...args }: Parameters<typeof loremIpsum>[0] = {}) {\r\n  const format = flag?.html ? \"html\" : \"plain\";\r\n\r\n  // say(`generating ${count} ${units} of ${format} text`);\r\n  return loremIpsum({ count, units, format, ...args });\r\n}\r\n\r\nawait arg(\r\n  {\r\n    placeholder: String(DEFAULTS.count),\r\n    description: `Generate lorem ipsum text...`,\r\n    flags,\r\n  },\r\n  (input) => {\r\n    count = (input && Number(input)) || undefined;\r\n\r\n    return [\"paragraphs\", \"sentences\", \"words\"].map((el) => ({\r\n      name: el,\r\n      preview: () => {\r\n        units = el as ILoremIpsumParams[\"units\"];\r\n        return myLoremIpsum();\r\n      },\r\n    }));\r\n  }\r\n);\r\n\r\nconst loremText = myLoremIpsum();\r\n\r\nif (flag?.copy) {\r\n  copy(loremText);\r\n} else {\r\n  setSelectedText(loremText);\r\n}\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-17T12:50:07Z"},{"avatar":"https://avatars.githubusercontent.com/u/75037449?u=1fcae869eafe508a6cc283783373a405a2bb4a28&v=4","user":"sum117","author":"sum117","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1339","url":"","title":"Chunkify text into discord friendly chunks with an intuitive UI!","command":"chunkify-text-into-discord-friendly-chunks-with-an-intuitive-ui","content":"\r\n[Open chunkify-text in Script Kit](https://scriptkit.com/api/new?name=chunkify-text&url=https://gist.githubusercontent.com/sum117/423f829687bea3e32b8defbe0aa62731/raw/ed0d8bbe52749f4b583de1e8f265e06b8c77b654/chunkify-text.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\";\r\n\r\n/**\r\n * Chunkify a text into chunks of a given size.\r\n * @param {string} text\r\n * @param {number} chunkSize\r\n */\r\nfunction chunkify(text, chunkSize) {\r\n  const chunks = [];\r\n\r\n  let index = 0;\r\n  while (index < text.length) {\r\n    let end = index + chunkSize;\r\n\r\n    while (end > index && text[end] !== \"\\n\") {\r\n      end--;\r\n    }\r\n\r\n    if (end === index) {\r\n      end = index + chunkSize;\r\n    }\r\n\r\n    const chunk = text.substring(index, end);\r\n    chunks.push(chunk);\r\n    index = end;\r\n  }\r\n\r\n  return chunks;\r\n}\r\n\r\nconst rawText = await editor(\r\n  \"Paste the text to chunkify here (You can delete this placeholder).\"\r\n);\r\n\r\nlet textWidget = await widget(\r\n  `<header class=\"grid grid-flow-col px-4 py-2\">\r\n    <button id=\"previous-button\" class=\"items-center rounded-md bg-black p-4 text-white transition-colors hover:bg-white hover:text-black hover:outline\">Previous</button>\r\n    <div>\r\n      <h1 class=\"text-center text-4xl\">Chunkifier</h1>\r\n      <h2 class=\"text-center text-gray-500\">Chunk {{chunkIndex}} of {{totalChunks}}</h2>\r\n    </div>\r\n    <button id=\"close-button\" class=\"items-center rounded-md bg-black p-4 text-white transition-colors hover:bg-white hover:text-black hover:outline\">Close</button>\r\n  </header>\r\n  <section class=\"max-w-prose flex-1 overflow-auto break-words p-6\">{{chunk}}</section>\r\n  <button id=\"copy-button\" class=\"flex mx-6 my-4 items-center justify-center rounded-md bg-black px-6 py-4 text-4xl text-white transition-colors hover:bg-white hover:text-black hover:outline hover:outline-black\">{{copyBtnText}}</button>`,\r\n  {\r\n    closable: true,\r\n    useContentSize: true,\r\n    draggable: true,\r\n    containerClass:\r\n      \"flex h-screen flex-col overflow-hidden bg-white text-black\",\r\n    alwaysOnTop: true,\r\n    minHeight: 600,\r\n  }\r\n);\r\n\r\nconst chunks = chunkify(rawText, 2000);\r\nlet chunkIndex = 0;\r\nlet copyBtnText = \"Copy\";\r\ntextWidget.setState({\r\n  chunkIndex: chunkIndex + 1,\r\n  chunk: chunks[chunkIndex],\r\n  copyBtnText: \"Copy\",\r\n  totalChunks: chunks.length,\r\n});\r\n\r\nfunction handleClose() {\r\n  textWidget.close();\r\n  process.exit(0);\r\n}\r\n\r\nfunction handleCopyButton() {\r\n  copy(chunks[chunkIndex]);\r\n  const isLastChunk = chunkIndex >= chunks.length - 1;\r\n\r\n  if (isLastChunk && copyBtnText === \"Copy\") {\r\n    copyBtnText = \"Done\";\r\n    textWidget.setState({\r\n      copyBtnText,\r\n      chunk: \"All chunks copied, click again to close!\",\r\n    });\r\n  } else if (isLastChunk) {\r\n    handleClose();\r\n  } else {\r\n    chunkIndex++;\r\n    textWidget.setState({\r\n      chunkIndex: chunkIndex + 1,\r\n      chunk: `${chunks[chunkIndex]}`,\r\n    });\r\n  }\r\n}\r\n\r\nfunction handlePreviousButton() {\r\n  if (chunkIndex <= 0) return;\r\n  chunkIndex--;\r\n  let copyBtnText = \"Copy\";\r\n  textWidget.setState({\r\n    chunkIndex: chunkIndex + 1,\r\n    copyBtnText,\r\n    chunk: `${chunks[chunkIndex]}`,\r\n  });\r\n}\r\n\r\ntextWidget.onClick((event) => {\r\n  switch (event.targetId) {\r\n    case \"copy-button\":\r\n      handleCopyButton();\r\n      break;\r\n    case \"previous-button\":\r\n      handlePreviousButton();\r\n      break;\r\n    case \"close-button\":\r\n      handleClose();\r\n      break;\r\n  }\r\n});\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-15T19:31:50Z"},{"name":"Shortcuts","description":"","keyword":"sc","avatar":"https://avatars.githubusercontent.com/u/36767987?u=e03b3d34a5882f34dfb8d6e11609dd94836e3696&v=4","user":"dschapman","author":"Daniel Chapman","twitter":"ds_chapman","discussion":"https://github.com/johnlindquist/kit/discussions/1333","url":"","title":"MacOS Shortcut Launcher","command":"macos-shortcut-launcher","content":"\r\n[Open shortcuts in Script Kit](https://scriptkit.com/api/new?name=shortcuts&url=https://gist.githubusercontent.com/dschapman/6fcff4eeec1efa061cbe98cea6592e69/raw/bb0c2d597241910b79eb4a0b3259ada222d134eb/shortcuts.js\")\r\n\r\n```js\r\n// Name: Shortcuts\r\n// Description: Shortcut Launcher\r\n// Keyword: sc\r\n\r\nimport \"@johnlindquist/kit\";\r\nconst DB = home(\"Library\", \"Shortcuts\", \"Shortcuts.sqlite\");\r\nlet { default: sqlite3 } = await import(\"sqlite3\");\r\nlet { open } = await import(\"sqlite\");\r\n\r\nconst shortcuts_db = await open({ filename: DB, driver: sqlite3.Database });\r\nlet query = await shortcuts_db.all(\r\n  \"SELECT ZNAME,ZACTIONSDESCRIPTION,ZICON,ZBACKGROUNDCOLORVALUE,ZGLYPHNUMBER FROM ZSHORTCUT INNER JOIN ZSHORTCUTICON on ZSHORTCUTICON.Z_PK=ZICON\"\r\n);\r\n\r\n//Color mappings found https://github.com/atnbueno/Shortcuts-old\r\nconst colors = {\r\n  4282601983: { RGB: \"#F26369\", Gradient: \"#F36F74 #F2585E\" },\r\n  4251333119: { RGB: \"#FF8567\", Gradient: \"#FF8E73 #FF7C5C\" },\r\n  4271458815: { RGB: \"#F7A752\", Gradient: \"#F8AE5F #F7A145\" },\r\n  4274264319: { RGB: \"#E7C640\", Gradient: \"#E8CA45 #E5C238\" },\r\n  4292093695: { RGB: \"#45C95F\", Gradient: \"#53CD6B #37C553\" },\r\n  431817727: { RGB: \"#49CBAE\", Gradient: \"#57CFB4 #2AC7A8\" },\r\n  1440408063: { RGB: \"#51C8DC\", Gradient: \"#5ACCDE #3FC4D9\" },\r\n  463140863: { RGB: \"#12B4F6\", Gradient: \"#24BAF7 #00AFF6\" },\r\n  946986751: { RGB: \"#4A69C6\", Gradient: \"#5874CA #3D5EC2\" },\r\n  2071128575: { RGB: \"#8857C2\", Gradient: \"#9164C7 #7F4BBE\" },\r\n  3679049983: { RGB: \"#BB7BE4\", Gradient: \"#C085E6 #B671E2\" },\r\n  3980825855: { RGB: \"#F58BD5\", Gradient: \"#F694D8 #F583D2\" },\r\n  255: { RGB: \"#87919B\", Gradient: \"#9099A3 #7E8994\" },\r\n  3031607807: { RGB: \"#95A095\", Gradient: \"#9DA79D #8D998E\" },\r\n  2846468607: { RGB: \"#9D918C\", Gradient: \"#A49995 #968984\" },\r\n};\r\n\r\n// Glyphs names found https://github.com/atnbueno/Shortcuts-old, ChatGPT used to generate emojis\r\nconst glyphs = {\r\n  59452: \"🚗\",\r\n  61446: \"🚗\",\r\n  61447: \"🚗\",\r\n  59678: \"🚌\",\r\n  61448: \"🚌\",\r\n  61449: \"🚋\",\r\n  61450: \"🚇\",\r\n  59668: \"🚲\",\r\n  59652: \"🚑\",\r\n  59648: \"✈️\",\r\n  59755: \"🏠\",\r\n  59677: \"🏢\",\r\n  59828: \"🛒\",\r\n  61553: \"🛍️\",\r\n  59750: \"👜\",\r\n  59863: \"🍴\",\r\n  59741: \"⛽\",\r\n  59854: \"🌡️\",\r\n  59845: \"☀️\",\r\n  59782: \"🌙\",\r\n  61517: \"🌕\",\r\n  59835: \"❄️\",\r\n  59714: \"☁️\",\r\n  59715: \"🌧️\",\r\n  59861: \"☂️\",\r\n  59734: \"🔥\",\r\n  59669: \"🔭\",\r\n  59717: \"🧭\",\r\n  59412: \"🌍\",\r\n  59784: \"🏞️\",\r\n  59733: \"🎞️\",\r\n  59682: \"📷\",\r\n  59402: \"🎥\",\r\n  59780: \"🎤\",\r\n  59864: \"📹\",\r\n  59711: \"📋\",\r\n  59681: \"📆\",\r\n  59414: \"💬\",\r\n  59403: \"💬💬\",\r\n  59779: \"💬\",\r\n  59773: \"💌\",\r\n  59774: \"📬\",\r\n  59836: \"✈️\",\r\n  61462: \"🌐\",\r\n  59676: \"💼\",\r\n  61570: \"📂\",\r\n  61571: \"📂⚙️\",\r\n  59719: \"💳\",\r\n  59865: \"⌚\",\r\n  59814: \"📞\",\r\n  59436: \"💻\",\r\n  59446: \"⌨️\",\r\n  59680: \"🧮\",\r\n  59662: \"📊\",\r\n  59817: \"🖨️\",\r\n  59752: \"💽\",\r\n  59722: \"🖥️\",\r\n  59519: \"📦\",\r\n  59826: \"🗄️\",\r\n  59653: \"📚\",\r\n  59721: \"🧊\",\r\n  59851: \"📺\",\r\n  59742: \"🎮\",\r\n  59818: \"🧩\",\r\n  61552: \"🧩\",\r\n  59753: \"🎧\",\r\n  61479: \"🔘\",\r\n  61481: \"🦻\",\r\n  59790: \"🎵\",\r\n  59839: \"🔊\",\r\n  61470: \"🔊\",\r\n  61471: \"🔊\",\r\n  61472: \"🔇\",\r\n  61473: \"🔊\",\r\n  61478: \"🔊\",\r\n  61474: \"🔊\",\r\n  59671: \"📚\",\r\n  59465: \"📖\",\r\n  61442: \"📕\",\r\n  59745: \"👓\",\r\n  59788: \"🎫\",\r\n  59730: \"🎭\",\r\n  59723: \"🎲\",\r\n  59663: \"⚾\",\r\n  59664: \"🏀\",\r\n  59837: \"⚽\",\r\n  59456: \"🏈\",\r\n  59762: \"🛶\",\r\n  59756: \"🐎\",\r\n  59712: \"🕰️\",\r\n  59649: \"⏰\",\r\n  59844: \"⏱️\",\r\n  59667: \"🔔\",\r\n  59754: \"❤️\",\r\n  61577: \"❤️\",\r\n  61578: \"❤️❤️\",\r\n  59841: \"⭐\",\r\n  61579: \"⭐\",\r\n  61581: \"✨\",\r\n  59763: \"💡\",\r\n  59764: \"⚡\",\r\n  59736: \"🚩\",\r\n  59848: \"🏷️\",\r\n  59760: \"🔑\",\r\n  59757: \"⌛\",\r\n  59770: \"🔒\",\r\n  59862: \"🔓\",\r\n  59489: \"🔋\",\r\n  59511: \"✨\",\r\n  59771: \"🪄\",\r\n  59793: \"🖌️\",\r\n  59798: \"✏️\",\r\n  59794: \"📎\",\r\n  59824: \"✂️\",\r\n  59772: \"🔍\",\r\n  59685: \"🔗\",\r\n  59716: \"🎨\",\r\n  59748: \"🔨\",\r\n  59870: \"🔧\",\r\n  59743: \"⚙️\",\r\n  59825: \"🪛\",\r\n  59859: \"🗑️\",\r\n  59866: \"💧\",\r\n  59789: \"☕\",\r\n  59827: \"👕\",\r\n  59815: \"💊\",\r\n  59660: \"🩹\",\r\n  59843: \"🩺\",\r\n  61551: \"😷\",\r\n  59657: \"⚛️\",\r\n  59684: \"🐱\",\r\n  59728: \"🐶\",\r\n  61554: \"🐻\",\r\n  61555: \"🐯\",\r\n  61556: \"🐵\",\r\n  61557: \"🐏\",\r\n  61558: \"🐇\",\r\n  61559: \"🐍\",\r\n  61560: \"🐔\",\r\n  61561: \"🐖\",\r\n  61562: \"🐭\",\r\n  61563: \"🐄\",\r\n  61564: \"🐉\",\r\n  59651: \"👽\",\r\n  61565: \"👾\",\r\n  61566: \"🤖\",\r\n  61567: \"👻\",\r\n  61568: \"💩\",\r\n  61569: \"💀\",\r\n  59796: \"🐾\",\r\n  59746: \"🎓\",\r\n  59744: \"🎁\",\r\n  59666: \"🛏️\",\r\n  59822: \"🚀\",\r\n  61444: \"🗺️\",\r\n  61452: \"📏\",\r\n  61453: \"🚦\",\r\n  61454: \"🌡️\",\r\n  61455: \"🌐\",\r\n  61456: \"📚\",\r\n  61573: \"📚\",\r\n  61574: \"📚\",\r\n  61576: \"📚\",\r\n  61457: \"📚\",\r\n  61458: \"📚\",\r\n  61459: \"📚\",\r\n  61460: \"📷\",\r\n  61461: \"📝\",\r\n  61464: \"📝\",\r\n  61465: \"📝\",\r\n  61466: \"📝\",\r\n  61582: \"💬\",\r\n  61468: \"💬\",\r\n  61475: \"🎧\",\r\n  61476: \"🎧\",\r\n  61477: \"🎧\",\r\n  61480: \"📻\",\r\n  61482: \"📺\",\r\n  61483: \"🔊\",\r\n  61484: \"🌊\",\r\n  61486: \"📱\",\r\n  61487: \"📱\",\r\n  61488: \"📱\",\r\n  61489: \"📱\",\r\n  61490: \"📱\",\r\n  61491: \"📱\",\r\n  59806: \"♿\",\r\n  59801: \"🚶\",\r\n  59800: \"🚶‍♂️🚶‍♀️\",\r\n  59799: \"🚶‍♂️🚶‍♀️🚶‍♂️\",\r\n  59437: \"🚶\",\r\n  59812: \"🚶‍♂️\",\r\n  59808: \"🏃\",\r\n  61493: \"🏃\",\r\n  61494: \"🏃\",\r\n  61495: \"🎧\",\r\n  61496: \"🔍\",\r\n  61532: \"🧠\",\r\n  61533: \"🧠\",\r\n  61534: \"😀\",\r\n  61535: \"😄\",\r\n  61536: \"😆\",\r\n  61537: \"😂\",\r\n  61538: \"🤣\",\r\n  61539: \"😜\",\r\n  61540: \"😬\",\r\n  61541: \"😍\",\r\n  61542: \"😘\",\r\n  61543: \"😊\",\r\n  61544: \"😎\",\r\n  61545: \"😍\",\r\n  61546: \"🤖\",\r\n  59751: \"🖐️\",\r\n  61585: \"🖐️\",\r\n  59857: \"👍\",\r\n  61547: \"👍\",\r\n  61548: \"✌️\",\r\n  61549: \"🤟\",\r\n  61550: \"👊\",\r\n  61440: \"📲\",\r\n  59650: \"⚠️\",\r\n  59654: \"↩️\",\r\n  59655: \"↪️\",\r\n  59670: \"🔖\",\r\n  59661: \"📦\",\r\n  59819: \"📰\",\r\n  59508: \"▶️\",\r\n  59674: \"📦\",\r\n  59675: \"🔵\",\r\n  59696: \"↩️\",\r\n  59705: \"↪️\",\r\n  59693: \"⬇️\",\r\n  59707: \"⬆️\",\r\n  59692: \"⬇️\",\r\n  59708: \"⬆️\",\r\n  59699: \"▶️\",\r\n  59704: \"⏪\",\r\n  59702: \"⏸️\",\r\n  59706: \"⏹️\",\r\n  59695: \"⏭️\",\r\n  59703: \"❓\",\r\n  59690: \"✔️\",\r\n  59700: \"➕\",\r\n  59697: \"🔤\",\r\n  59834: \"😊\",\r\n  61589: \"❌\",\r\n  59725: \"📄\",\r\n  59395: \"💲\",\r\n  59448: \"💶\",\r\n  59512: \"£\",\r\n  59514: \"¥\",\r\n  59515: \"₿\",\r\n  59709: \"❌\",\r\n  59656: \"*️⃣\",\r\n  59727: \"📄\",\r\n  59791: \"📰\",\r\n  59739: \"🔲\",\r\n  59392: \"…\",\r\n  59445: \"📋\",\r\n  61587: \"✅\",\r\n  59405: \"🔲🔲\",\r\n  59758: \"♾️\",\r\n  59820: \"♻️\",\r\n  59767: \"🔄\",\r\n  59849: \"🎯\",\r\n  59816: \"🎙️\",\r\n  59768: \"📍\",\r\n  59769: \"📌\",\r\n  59795: \"🅿️\",\r\n  59720: \"🌾\",\r\n  59830: \"⬆️⬇️\",\r\n  59786: \"↖️↘️\",\r\n  59821: \"🔄\",\r\n  59846: \"🔄\",\r\n  59832: \"🔀\",\r\n  59833: \"🎚️\",\r\n  61583: \"💬\",\r\n  59797: \"✌️\",\r\n  59856: \"🟡\",\r\n  59853: \"🆎\",\r\n  61588: \"📦\",\r\n  59459: \"☁️☁️\",\r\n  59461: \"💊\",\r\n  59732: \"📰\",\r\n  59497: \"📰\",\r\n  59867: \"📶\",\r\n  61501: \"📲\",\r\n  61497: \"🚥\",\r\n  61498: \"🚥\",\r\n  61499: \"📶\",\r\n  61500: \"📶\",\r\n  61502: \"🎵\",\r\n  61503: \"🎵\",\r\n  61504: \"🎵\",\r\n  61505: \"🎵\",\r\n  61506: \"🎵\",\r\n  61507: \"🎵\",\r\n  61508: \"🎵\",\r\n  61509: \"🎵\",\r\n  61510: \"📅\",\r\n  61511: \"📅\",\r\n  61512: \"⏲️\",\r\n  61513: \"⏲️\",\r\n  61514: \"📝\",\r\n  61515: \"📝\",\r\n  61518: \"🌞\",\r\n  61519: \"💡\",\r\n  61520: \"⏬\",\r\n  61521: \"⏫\",\r\n  61522: \"📷\",\r\n  61523: \"📷\",\r\n  61524: \"💼\",\r\n  61525: \"🌅\",\r\n  61528: \"🚫\",\r\n  61529: \"🔘\",\r\n  61530: \"⭕\",\r\n  61531: \"🔲\",\r\n  59781: \"✍️\",\r\n};\r\n\r\nlet shortcuts = query.map((shortcut) => {\r\n  let glyph = glyphs[shortcut.ZGLYPHNUMBER];\r\n  let name = shortcut.ZNAME;\r\n  let value = shortcut.ZNAME;\r\n  let html = `<div class=\"flex flex-row h-full w-full\">\r\n  <svg width=48 height=48 class=\"h-full\" style=\"background-color:${\r\n    colors[shortcut.ZBACKGROUNDCOLORVALUE]?.RGB\r\n  }\"><text x=12 y=36 font-size=24>${glyph}</text></svg>        \r\n  <div class=\"flex-1 flex flex-row items-center px-2\">${name}</div>\r\n</div>`;\r\n  return { name, value, html };\r\n});\r\n\r\nlet flags = {\r\n  view: {\r\n    name: \"View in Shortcuts\",\r\n  },\r\n  run: {\r\n    name: \"Run Shortcut\",\r\n  },\r\n};\r\n\r\nlet shortcut = await arg(\r\n  { prompt: \"Which shortcut would you like to run?\", flags },\r\n  shortcuts\r\n);\r\nawait hide();\r\n\r\nif (flag?.view) {\r\n  await exec(`/usr/bin/shortcuts view \"${shortcut.trim()}\"`);\r\n} else {\r\n  let result = await exec(`/usr/bin/shortcuts run \"${shortcut.trim()}\" &`);\r\n  if (result?.stdout) await div(md(`## Output:\\n\\n${result.stdout}`));\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-09-04T00:25:49Z"},{"name":"Filter Scripts","shortcut":"opt 7","cache":"true","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1331","url":"https://gist.githubusercontent.com/johnlindquist/cc108bf018b67a0116e1b8dde95c7280/raw/070bda9b7e16cc9d56eeff330961fdc1df84ed73/filter-scripts.ts","title":"List Scripts of Specific Kenv","command":"list-scripts-of-specific-kenv","content":"\r\n[Open filter-scripts in Script Kit](https://scriptkit.com/api/new?name=filter-scripts&url=https://gist.githubusercontent.com/johnlindquist/cc108bf018b67a0116e1b8dde95c7280/raw/070bda9b7e16cc9d56eeff330961fdc1df84ed73/filter-scripts.ts\")\r\n\r\n```js\r\n// Name: Filter Scripts\r\n// Shortcut: opt 7\r\n// Cache: true\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet kenv = \"kit-examples\"\r\n\r\nlet scripts = (await getScripts()).filter(script => script.kenv === kenv)\r\n\r\nlet script = await arg(\"Run Script\", scripts)\r\n\r\nawait run(script.filePath)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-20T19:22:54Z"},{"name":"Expand TS","author":"Nauris Pūķis","twitter":"pyronaur","shortcut":"cmd+shift+e","avatar":"https://avatars.githubusercontent.com/u/988095?u=d3a3cc84565dadde5ad7120646533ec951b2ab20&v=4","user":"pyronaur","discussion":"https://github.com/johnlindquist/kit/discussions/1330","url":"","title":"Snippets on Steroids","command":"snippets-on-steroids","content":"**Summary**\r\nScriptKit now has snippets built-in, but they're lacking a couple of powerful features at the moment.\r\n\r\nSo I built this addon to handle the selection, cursor, clipboard, and `evil` script `eval()`:\r\n\r\n\r\nHere's an example snippet that's going to replace the selection with a script tag and set variables based on clipboard and ScriptKit input:\r\n```ts\r\n// Name: Expand TS\r\n<script lang=\"ts\">\r\n\t$SELECTION$\r\n\t$CURSOR$\r\n\tconst argument = '$$arg(\"Anything to say?\")$$';\r\n\tconst clipboard = '$CLIPBOARD$';\r\n\tconst number = '$$arg(\"What is the magic number?\", ['42', '7', '8'])$$';\r\n</script>\r\n```\r\n\r\nIf you like the script, [retweet it](https://twitter.com/pyronaur/status/1693219818843918359) 😇\r\n\r\n## Script:\r\n\r\n```ts\r\n// Name: Snippets on Steroids\r\n// Author: pyronaur\r\n// Twitter: @pyronaur\r\n// Shortcut: cmd+shift+e\r\n/**\r\n * This script expands a given snippet and replaces placeholders with their respective values.\r\n * \r\n * ## Placeholders\r\n * - $CURSOR$ - set the cursor position in the snippet after it's expanded.\r\n * - $SELECTION$ - insert the currently selected text within the snippet.\r\n * - $CLIPBOARD$ - insert the current clipboard text within the snippet.\r\n * \r\n * ## Code Evaluation\r\n * You can place any JavaScript code within $$...$$ and it will be evaluated and replaced with the result.\r\n * \r\n * For example:\r\n *    The code inside the $$...$$ will be executed and the result will replace the placeholder.\r\n *    Example:\r\n *    ```\r\n *    const clipboard = '$$clipboard.readText()$$';\r\n *    const date = '$$new Date().toLocaleDateString()$$';\r\n *    const number = '$$arg(\"What is the magic number?\", ['42', '7', '8'])$$';\r\n *    ```\r\n * Note:\r\n * The script execution is potentially dangerous and should be enabled with caution.\r\n * You have to enable it by setting the `I_AM_THE_DANGER` variable to `true`.\r\n */\r\nimport \"@johnlindquist/kit\"\r\nimport { Choice } from '@johnlindquist/kit';\r\n\r\nconst { globby } = await npm(\"globby\");\r\nconst snippet_path = kenvPath('snippets');\r\n\r\n// 🔴 DANGER 🔴\r\n// SETTING THIS TO TRUE ALLOW ANY SCRIPT TO BE EXECUTED BY SNIPPETS\r\nconst I_AM_THE_DANGER = false;\r\n\r\nasync function dangerous_evil_parse(content: string) {\r\n\tconst evil_regex = /\\$\\$(.*?)\\$\\$/g;\r\n\tlet match;\r\n\tlet matches = [];\r\n\twhile ((match = evil_regex.exec(content)) !== null) {\r\n\t\tmatches.push(match);\r\n\t}\r\n\tfor (let match of matches) {\r\n\t\tconst script = match[1];\r\n\t\tconst result = I_AM_THE_DANGER ? await eval(script) : ''; // 🎩 😎\r\n\t\tcontent = content.replace(`$$${script}$$`, result);\r\n\t}\r\n\r\n\treturn content;\r\n}\r\n\r\n// Find $CURSOR$ and set cursor position\r\nasync function set_with_cursor(content: string) {\r\n\tconst cursor_index = content.indexOf('$CURSOR$');\r\n\tif (cursor_index === -1) {\r\n\t\treturn false;\r\n\t}\r\n\t// Remove $$CURSOR$$\r\n\tcontent = content.replace('$CURSOR$', '');\r\n\tawait setSelectedText(content);\r\n\t// There's some async weirdness here\r\n\t// so we'll just wait 100ms\r\n\tawait new Promise(resolve => setTimeout(resolve, 100));\r\n\tconst target_cursor_position = content.length - cursor_index;\r\n\tconst keystrokes = [];\r\n\tfor (let i = 0; i < target_cursor_position; i++) {\r\n\t\tkeystrokes.push(keystroke('left'));\r\n\t}\r\n\tawait Promise.all(keystrokes);\r\n\treturn true;\r\n}\r\n\r\nfunction files_to_choices(files: string[]): Choice[] {\r\n\treturn files.map(file => ({\r\n\t\tname: path.basename(file, '').split('.')[0],\r\n\t\tvalue: file\r\n\t}));\r\n}\r\n\r\nasync function get_snippet_files() {\r\n\t// Untested attempt to fix windows paths (I don't have a windows machine)\r\n\tconst snippet_files = await globby(`${snippet_path}/*`);\r\n\tif (process.platform == 'win32') {\r\n\t\treturn snippet_files;\r\n\t}\r\n\treturn snippet_files.map(file => file.replace(/\\\\/g, '/'));\r\n}\r\n\r\nasync function get_content(snippet: string) {\r\n\tconst snippet_content = await readFile(snippet, 'utf8');\r\n\tconst snippet_lines = snippet_content.split('\\n')\r\n\r\n\t// Remove comments and empty lines until first line of snippet\r\n\treturn snippet_lines\r\n\t\t.slice(snippet_lines.findIndex(line => !line.startsWith('//')))\r\n\t\t.join('\\n');\r\n}\r\n\r\nasync function insert_selection(content: string) {\r\n\tif (content.includes('$SELECTION$') === false) {\r\n\t\treturn content;\r\n\t}\r\n\tconst selection = await getSelectedText();\r\n\tcontent = content.replace('$SELECTION$', selection);\r\n\treturn content;\r\n}\r\n\r\nasync function insert_clipboard(content: string) {\r\n\tif (content.includes('$CLIPBOARD$') === false) {\r\n\t\treturn content;\r\n\t}\r\n\tconst text = await clipboard.readText();\r\n\tcontent = content.replace('$CLIPBOARD$', text);\r\n\treturn content;\r\n}\r\n\r\n\r\n\r\n// 🚀 Go!\r\nconst snippet_file = await arg(\"Which snippet?\", files_to_choices(await get_snippet_files()));\r\nlet content = await get_content(snippet_file);\r\ncontent = await insert_selection(content);\r\ncontent = await insert_clipboard(content);\r\ncontent = await dangerous_evil_parse(content);\r\nif (!(await set_with_cursor(content))) {\r\n\tawait setSelectedText(content);\r\n}\r\n```\r\n\r\nProps @johnlindquist for helpful pointers 👍","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-20T09:43:40Z"},{"avatar":"https://avatars.githubusercontent.com/u/91077547?u=912b5cbbf037a7082ac71e829d74641975d545ff&v=4","user":"MartinLednar","author":"Martin Lednár","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1327","url":"","title":"Jira monthly time logger","command":"jira-monthly-time-logger","content":"# About\r\n\r\nLog tasks you worked on and the total hours you worked for current month into jira.\r\n\r\n- [Gist link](https://gist.githubusercontent.com/MartinLednar/3e3b0e8b23c92734bf946662a4f4b502/raw/c3930a933abe4760a11a555a12db4eb432ebc231/jira-monthly-time-logger.ts)\r\n- [Download link](https://scriptkit.com/api/new?name=jira-monthly-time-logger&url=https://gist.githubusercontent.com/MartinLednar/d702e7993415b04f9e85fd29b910e0cd/raw/c3930a933abe4760a11a555a12db4eb432ebc231/jira-monthly-time-logger.ts)\r\n\r\n\r\n<img width=\"819\" alt=\"Snímka obrazovky 2023-08-10 o 14 18 59\" src=\"https://github.com/johnlindquist/kit/assets/91077547/786fa372-fc5e-4c17-abcd-ccda95355265\">\r\n<img width=\"819\" alt=\"Snímka obrazovky 2023-08-10 o 14 18 23\" src=\"https://github.com/johnlindquist/kit/assets/91077547/a1a9c521-4730-4229-a129-98e0f8687540\">\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-09T13:12:04Z"},{"name":"tmux sesh","description":"","author":"Lazar Nikolov","twitter":"NikolovLazar","avatar":"https://avatars.githubusercontent.com/u/5396211?u=3f22a05cb9cf25b3b6c9f8b75f4554249487a254&v=4","user":"nikolovlazar","discussion":"https://github.com/johnlindquist/kit/discussions/1326","url":"","title":"Attach to tmux session with Kitty terminal","command":"attach-to-tmux-session-with-kitty-terminal","content":"### Prerequisites:\r\n1. Install [Kitty](https://sw.kovidgoyal.net/kitty/)\r\n2. Add `kitty` to `PATH`: `sudo ln -s /Applications/kitty.app/Contents/MacOS/kitty /usr/local/bin/kitty` (assuming `/usr/local/bin` is in your `PATH`)\r\n3.  Kit: `Sync $PATH from Terminal to Kit.app`\r\n\r\n<img width=\"880\" alt=\"CleanShot 2023-08-08 at 11 02 41@2x\" src=\"https://github.com/johnlindquist/kit/assets/5396211/0be488c3-1176-4a7b-ad4d-7fac3b326e7a\">\r\n\r\n\r\n\r\n[Open tmux-sesh in Script Kit](https://scriptkit.com/api/new?name=tmux-sesh&url=https://gist.githubusercontent.com/nikolovlazar/21a78f492e117a5e0dca1685cb668f4d/raw/94e44f60ef8807250f365b996b610d8bb05fd311/tmux-sesh.js\")\r\n\r\n```js\r\n// Name: tmux sesh\r\n// Description: Attach to a tmux session\r\n// Author: Lazar Nikolov\r\n// Twitter: @NikolovLazar\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nconst sessionsCmd = await $`tmux list-sessions`;\r\n\r\nlet sessions = sessionsCmd.stdout\r\n  .split('\\n')\r\n  .map((line) => line.split(':')[0])\r\n  .filter((sesh) => !!sesh);\r\n\r\nlet choice = await arg('Attach to session:', sessions);\r\n\r\nawait $`kitty --hold sh -c \"tmux a -t ${choice}\"`;\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-08-08T14:35:41Z"},{"name":"Reveal password","shortcut":"cmd *","avatar":"https://avatars.githubusercontent.com/u/76580?v=4","user":"abernier","author":"Antoine BERNIER","twitter":"abernier_","discussion":"https://github.com/johnlindquist/kit/discussions/1322","url":"https://gist.githubusercontent.com/abernier/582e1458195ec34268305298e4b3b86b/raw/reveal-password.%25E2%2596%25B6.ts","title":"Reveal password","command":"reveal-password","content":"[Open `reveal-password` in Script Kit](https://scriptkit.com/api/new?name=revealpassword&url=https://gist.githubusercontent.com/abernier/582e1458195ec34268305298e4b3b86b/raw/reveal-password.%25E2%2596%25B6.ts)\r\n\r\n`| *******       |` <kbd>cmd *</kbd> → `| toto123       |`\r\n\r\n```ts\r\n// Name: Reveal password\r\n// Shortcut: cmd *\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet js = `\r\ndocument.activeElement.type = document.activeElement.type === 'password' ? 'text' : 'password';\r\n`;\r\n\r\nlet value = await applescript(`\r\ntell application \"Google Chrome\" to tell window 1\r\n\tget execute active tab javascript \"\r\n\r\n${js}\r\n\r\n\"\r\nend tell\r\n`);\r\n```\r\n-- https://gist.github.com/abernier/582e1458195ec34268305298e4b3b86b","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-31T06:08:58Z"},{"menu":"Gather Guest List","description":"","author":"Kent C. Dodds","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/1310","url":"https://gist.githubusercontent.com/kentcdodds/592bd3aebb51971c3a968954ede061f6/raw/5bc5d065782e50f269c5ed9090976722fae50140/gather-guest.ts","title":"Gather Town Guest Management","command":"gather-town-guest-management","content":"I use this script to manage who has access to join my [Gather.town](https://gather.town) space, so I don't have to manually approve folks joining, they don't need me to be there to join, and they can only access it if they're logged in and are on the list (they've purchased a ticket).\r\n\r\nVery cool thing I can throw together to solve my problems in an hour.\r\n\r\nFind the most up-to-date version in my repo: https://github.com/kentcdodds/.kenv/blob/main/scripts/gather-guest.ts\r\n\r\n\r\n[Open gather-guest in Script Kit](https://scriptkit.com/api/new?name=gather-guest&url=https://gist.githubusercontent.com/kentcdodds/592bd3aebb51971c3a968954ede061f6/raw/5bc5d065782e50f269c5ed9090976722fae50140/gather-guest.ts\")\r\n\r\n```js\r\n// Menu: Gather Guest List\r\n// Description: Handle the Guest List for Gather\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport '@johnlindquist/kit'\r\nimport {z} from 'zod'\r\n\r\nconst GuestObjectSchema = z.object({\r\n  name: z.string().optional(),\r\n  affiliation: z.string().optional(),\r\n  role: z.string().optional(),\r\n})\r\nconst GuestsSchema = z.record(z.string().email(), GuestObjectSchema)\r\n\r\nconst GATHER_API_KEY = await env('GATHER_API_KEY', async () => {\r\n  return await arg(\r\n    {\r\n      placeholder: 'GATHER_API_KEY',\r\n      ignoreBlur: true,\r\n    },\r\n    () =>\r\n      md(`\r\n# Get a Gather API Key\r\n\r\n[app.gather.town/apikeys](https://app.gather.town/apikeys)\r\n    `),\r\n  )\r\n})\r\n\r\nconst GATHER_SPACE_ID = await env('GATHER_SPACE_ID', async () => {\r\n  return await arg(\r\n    {\r\n      placeholder: 'GATHER_SPACE_ID',\r\n      ignoreBlur: true,\r\n    },\r\n    () =>\r\n      md(`\r\n# Specify the Gather Space ID\r\n\r\nIt's everything after \"app/\" in this URL with \"/\" replaced by \"\\\\\":\r\n\r\nhttps://app.gather.town/app/BL0B93FK23T/example\r\n    `),\r\n  )\r\n})\r\n\r\nasync function go() {\r\n  const params = new URLSearchParams({\r\n    apiKey: GATHER_API_KEY,\r\n    spaceId: GATHER_SPACE_ID,\r\n  })\r\n  const rawGuests = await fetch(\r\n    `https://gather.town/api/getEmailGuestlist?${params}`,\r\n  ).then(r => r.json())\r\n\r\n  const guests = GuestsSchema.parse(rawGuests)\r\n  const choices = [\r\n    {name: '➕ Add a guest', value: {type: 'add-guest'}},\r\n    ...Object.entries(guests).map(([email, {name, affiliation, role}]) => ({\r\n      name: `${email} (${name?.trim() || 'Unnamed'}, ${\r\n        affiliation?.trim() || 'Unaffiliated'\r\n      }, ${role?.trim() || 'No role'})`,\r\n      value: {type: 'modify-guest', email},\r\n    })),\r\n  ]\r\n  const rawSelection = await arg(\r\n    {placeholder: 'Which guest would you like to modify?'},\r\n    choices,\r\n  )\r\n  const SelectionSchema = z.union([\r\n    z.object({\r\n      type: z.literal('add-guest'),\r\n    }),\r\n    z.object({\r\n      type: z.literal('modify-guest'),\r\n      email: z.string(),\r\n    }),\r\n  ])\r\n  const selection = SelectionSchema.parse(rawSelection)\r\n  switch (selection.type) {\r\n    case 'add-guest': {\r\n      await addGuest()\r\n      return go()\r\n    }\r\n    case 'modify-guest': {\r\n      await modifyGuest(selection.email, guests)\r\n      return go()\r\n    }\r\n  }\r\n}\r\n\r\nasync function addGuest() {\r\n  const email = z\r\n    .string()\r\n    .email()\r\n    .parse(await arg({placeholder: `What's the guests' email?`}))\r\n  const body = {\r\n    apiKey: GATHER_API_KEY,\r\n    spaceId: GATHER_SPACE_ID,\r\n    guestlist: {[email]: {}},\r\n  }\r\n  const updateResponse = await fetch(\r\n    'https://api.gather.town/api/setEmailGuestlist',\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    },\r\n  )\r\n  const update = await updateResponse.json()\r\n  console.log('Guest Update: ', update[email])\r\n}\r\n\r\nasync function modifyGuest(\r\n  email: string,\r\n  guests: z.infer<typeof GuestsSchema>,\r\n) {\r\n  const guest = guests[email]\r\n  const action = await arg({placeholder: `What would you like to do?`}, [\r\n    {name: 'Remove Guest', value: 'remove'},\r\n    {name: `Change Guest Email (${email})`, value: 'change-email'},\r\n    {\r\n      name: `Change Guest Name (${guest.name?.trim() || 'Unnamed'})`,\r\n      value: 'change-name',\r\n    },\r\n    {\r\n      name: `Change Guest Affiliation (${\r\n        guest.affiliation?.trim() || 'Unaffiliated'\r\n      })`,\r\n      value: 'change-affiliation',\r\n    },\r\n    {\r\n      name: `Change Guest Role (${guest.role?.trim() || 'No role'})`,\r\n      value: 'change-role',\r\n    },\r\n    {\r\n      name: `Cancel`,\r\n      value: 'cancel',\r\n    },\r\n  ])\r\n  switch (action) {\r\n    case 'remove': {\r\n      delete guests[email]\r\n      break\r\n    }\r\n    case 'change-email': {\r\n      const newEmail = z\r\n        .string()\r\n        .email()\r\n        .parse(await arg({placeholder: 'New Email'}))\r\n      guests[newEmail] = guests[email]\r\n      delete guests[email]\r\n      email = newEmail\r\n      break\r\n    }\r\n    case 'change-name': {\r\n      const newName = await arg({placeholder: 'New Name'})\r\n      if (newName) {\r\n        guests[email].name = newName\r\n      } else {\r\n        delete guests[email].name\r\n      }\r\n      break\r\n    }\r\n    case 'change-affiliation': {\r\n      const newAffiliation = await arg({\r\n        placeholder: 'New Affiliation',\r\n      })\r\n      if (newAffiliation) {\r\n        guests[email].affiliation = newAffiliation\r\n      } else {\r\n        delete guests[email].affiliation\r\n      }\r\n      break\r\n    }\r\n    case 'change-role': {\r\n      const newRole = await arg({placeholder: 'New Role'})\r\n      if (newRole) {\r\n        guests[email].role = newRole\r\n      } else {\r\n        delete guests[email].role\r\n      }\r\n      break\r\n    }\r\n    case 'cancel': {\r\n      return go()\r\n    }\r\n  }\r\n  const body = {\r\n    apiKey: GATHER_API_KEY,\r\n    spaceId: GATHER_SPACE_ID,\r\n    guestlist: guests,\r\n    overwrite: true,\r\n  }\r\n  const updateResponse = await fetch(\r\n    'https://api.gather.town/api/setEmailGuestlist',\r\n    {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n      headers: {\r\n        'content-type': 'application/json',\r\n      },\r\n    },\r\n  )\r\n  const update = await updateResponse.json()\r\n  console.log('Guest Update: ', update[email])\r\n}\r\n\r\ngo()\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-13T19:05:44Z"},{"name":"Correct selection","description":"","author":"Ivan Rybnikov","twitter":null,"shortcut":"cmd option g","avatar":"https://avatars.githubusercontent.com/u/13164347?u=375e8ca0cf813e284505f7b31f4c91d6bc6d2985&v=4","user":"ivryb","discussion":"https://github.com/johnlindquist/kit/discussions/1309","url":"","title":"Correct selection with ChatGPT","command":"correct-selection-with-chatgpt","content":"[Open Correct selection with ChatGPT in Script Kit](https://scriptkit.com/api/new?name=Correct%20selection%20with%20ChatGPT&url=https://gist.githubusercontent.com/ivryb/646da11d9a5dbb2151a2053c4d510dd0/raw/8f9b16dd5c636ef6192c12b037ad80f7d84d0193/correct-selection-script.js)\r\n\r\n```js\r\n/*\r\n# Correct selection with ChatGPT\r\n\r\nFix grammar and spelling mistakes in any text field.\r\n\r\nHighlight some text and press `cmd+option+g` to send it through ChatGPT to replace the text response.\r\n*/\r\n\r\n// Name: Correct selection\r\n// Description: Fix grammar and spelling mistakes in any text field.\r\n// Author: Evan Fisher\r\n// Twitter: @ivryb\r\n// Shortcut: cmd option g\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nimport Bottleneck from 'bottleneck';\r\n\r\nimport { createChat } from 'completions';\r\n\r\nconst openAiKey = await env('OPENAI_API_KEY', {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n\r\nconst chat = createChat({\r\n  apiKey: openAiKey,\r\n  model: 'gpt-3.5-turbo',\r\n});\r\n\r\nconst correctionPrompt = (text) =>\r\n  `Please fix the grammar and spelling of the following text and return it without any other changes: ###${text}###`;\r\n\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 100,\r\n});\r\n\r\nconst type = (text) => {\r\n  return new Promise((resolve) => {\r\n    keyboard.type(text);\r\n    resolve();\r\n  });\r\n};\r\n\r\nconst wrappedType = limiter.wrap(type);\r\n\r\nconst text = await getSelectedText();\r\n\r\nif (text) {\r\n  await chat.sendMessage(correctionPrompt(text), {\r\n    onUpdate: async ({ message }) => {\r\n      const content = message.choices[0]?.delta?.content;\r\n\r\n      if (content) {\r\n        wrappedType(content);\r\n      }\r\n    },\r\n  });\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-13T12:30:37Z"},{"name":"tiktok-images","description":"","author":"Trevor Atlas","twitter":"trevoratlas","threads":"trevor.atlas","avatar":"https://avatars.githubusercontent.com/u/5009188?u=6d1d4e4744b6cc869b7a86d8831748b058c681b3&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1308","url":"https://gist.githubusercontent.com/trevor-atlas/9bc38697613660a228d89f45c5d5ead9/raw/cdbfee11f395fdf8fdaedacfafbb555a1db9bd65/tiktok-images.ts","title":"Resize and composite images for tiktok","command":"resize-and-composite-images-for-tiktok","content":"\r\n[Open tiktok-images in Script Kit](https://scriptkit.com/api/new?name=tiktok-images&url=https://gist.githubusercontent.com/trevor-atlas/9bc38697613660a228d89f45c5d5ead9/raw/cdbfee11f395fdf8fdaedacfafbb555a1db9bd65/tiktok-images.ts\")\r\n\r\n```js\r\n// Name: tiktok-images\r\n// Description: Resize images to fit TikTok's 9:16 aspect ratio and avoid being covered by the UI\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// Threads: trevor.atlas\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst sharp = await npm('sharp');\r\nconst { getAverageColor } = await npm('fast-average-color-node');\r\n\r\nconst width = 1440;\r\nconst height = 2400;\r\nconst density = 72;\r\nconst scale = .8;\r\nconst validTypes = new Set(['image/png', 'image/jpeg', 'image/jpg']);\r\nconst outputPath = path.join(home(), 'Desktop', 'resized-images');\r\n\r\nasync function processImage(imageFilepath: string) {\r\n  try {\r\n    const averageColor = await getAverageColor(imageFilepath);\r\n    const image = await sharp(imageFilepath)\r\n      .withMetadata({ density })\r\n      .resize({ fit: 'inside', width: Math.floor(width * scale), height: Math.floor(height * scale) })\r\n      .png({ quality: 100 })\r\n\r\n      .toBuffer();\r\n\r\n    const color = averageColor.hex || 'black';\r\n\r\n    // Add a matching background\r\n    const background = await sharp({\r\n      create: {\r\n        channels: 4,\r\n        background: color,\r\n        width,\r\n        height,\r\n      },\r\n    })\r\n    .withMetadata({ density })\r\n    .png({ quality: 100})\r\n    .toBuffer();\r\n\r\n\r\n    const res = await sharp(background)\r\n      .composite([{ input: image, gravity: 'centre' }])\r\n      .png({ quality: 100 })\r\n      .toBuffer();\r\n\r\n    return res;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\ninterface FileInfo {\r\n  lastModified: number;\r\n  lastModifiedDate: string;//\"2023-07-12T17:35:13.573Z\"\r\n  name: string;\r\n  path: string;//\"/Users/uname/Desktop/screenshots/Screenshot 2022-01-12 at 1.35.08 PM.png\"\r\n  size: number;\r\n  type: string;//\"image/png\"\r\n  webkitRelativePath: string;\r\n}\r\n\r\n\r\ntry {\r\n  const fileInfos: FileInfo[] = await drop('Drop images to resize');\r\n  const imagePaths = fileInfos\r\n    .filter(({type}) => validTypes.has(type))\r\n    .map(fileInfo => fileInfo.path);\r\n\r\n  if (!imagePaths.length) {\r\n    await notify('No valid images found. Supports .png, .jpg, and .jpeg');\r\n    exit();\r\n  }\r\n\r\n  await ensureDir(outputPath);\r\n\r\n  for (const imagePath of imagePaths) {\r\n    const image = await processImage(imagePath);\r\n    const [filename] = path.basename(imagePath).split('.');\r\n    const finalPath = path.join(outputPath, `${filename}-processed.png`);\r\n    await writeFile(finalPath, image);\r\n    console.log(`Resized ${finalPath}`);\r\n  }\r\n\r\n  await notify('Image(s) resized');\r\n} catch (error) {\r\n  console.error(error);\r\n  await notify('Error resizing images. Check the log for details.');\r\n}\r\n\r\nawait open(outputPath);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-12T22:37:36Z"},{"name":"Correct selection","description":"","author":"Ivan Rybnikov","twitter":null,"shortcut":"cmd option g","avatar":"https://avatars.githubusercontent.com/u/13164347?u=375e8ca0cf813e284505f7b31f4c91d6bc6d2985&v=4","user":"ivryb","discussion":"https://github.com/johnlindquist/kit/discussions/1307","url":"","title":"Correct selection with ChatGPT","command":"correct-selection-with-chatgpt","content":"[Install \"Correct selection with ChatGPT\" to Script Kit](https://scriptkit.com/api/new?name=Correct%20selection%20with%20ChatGPT&url=https://gist.githubusercontent.com/ivryb/9f63a1881b1827773682cdf7e404b05c/raw/9bce6cdf6dc54497f6d7020807fc1cc6bf405131/correct-selection.js)\r\n\r\n```js\r\n/*\r\n# Correct selection with ChatGPT\r\n\r\nFix grammar and spelling mistakes in any text field.\r\n\r\nHighlight some text and press `cmd+option+g` to send it through ChatGPT to replace the text response.\r\n*/\r\n\r\n// Name: Correct selection\r\n// Description: Fix grammar and spelling mistakes in any text field.\r\n// Author: Evan Fisher\r\n// Twitter: @ivryb\r\n// Shortcut: cmd option g\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nimport Bottleneck from 'bottleneck';\r\n\r\nimport { createChat } from 'completions';\r\n\r\nconst openAiKey = await env('OPENAI_API_KEY', {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n\r\nconst chat = createChat({\r\n  apiKey: openAiKey,\r\n  model: 'gpt-3.5-turbo',\r\n});\r\n\r\nconst correctionPrompt = (text) =>\r\n  `Please fix the grammar and spelling of the following text and return it without any other changes: ###${text}###`;\r\n\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 100,\r\n});\r\n\r\nconst type = (text) => {\r\n  return new Promise((resolve) => {\r\n    keyboard.type(text);\r\n    resolve();\r\n  });\r\n};\r\n\r\nconst wrappedType = limiter.wrap(type);\r\n\r\nconst text = await getSelectedText();\r\n\r\nif (text) {\r\n  await chat.sendMessage(correctionPrompt(text), {\r\n    onUpdate: async ({ message }) => {\r\n      const content = message.choices[0]?.delta?.content;\r\n\r\n      if (content) {\r\n        wrappedType(content);\r\n      }\r\n    },\r\n  });\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-12T17:02:06Z"},{"name":"Decode Base64","description":"","author":null,"avatar":"https://avatars.githubusercontent.com/u/67016683?u=570ce84e1552b64080e22f8e347275e052928350&v=4","user":"ElTacitos","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1303","url":"","title":"Decode a base64 string","command":"decode-a-base64-string","content":"Everything is in the title of this post, this script will allow you to decode a base64 string.\r\n\r\n[Open base64-decode in Script Kit](https://scriptkit.com/api/new?name=base64-decode&url=https://gist.githubusercontent.com/ElTacitos/8eaa571a6026383c9ce71e593e31b598/raw/6aa4a043a4458b980111bfb76ebe0b435d90a524/base64-decode.js\")\r\n\r\n```js\r\n// Name: Decode Base64\r\n// Description: Decode a base64 string and copy it to the clipboard\r\n// Author: ElTacitos\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet base64 = await arg(\"Enter base64 string to decode\")\r\nlet decoded = atob(base64)\r\n\r\nawait clipboard.writeText(decoded)\r\nawait div(md(`\r\n# ${decoded}\r\n`))\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-07-10T10:09:08Z"},{"menu":"De-Acronym-ify","description":"","author":"Trevor Atlas","twitter":"trevoratlas","shortcut":"cmd ctrl opt shift a","group":"work","avatar":"https://avatars.githubusercontent.com/u/5009188?u=6d1d4e4744b6cc869b7a86d8831748b058c681b3&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1296","url":"https://gist.githubusercontent.com/trevor-atlas/992682a54fa4ec44ccc8cc58e889e026/raw/f4ec3016bd7f8b1af4be65a64f3d500c19231e71/de-acronym.ts","title":"Replace user-defined acronyms with the full text","command":"replace-user-defined-acronyms-with-the-full-text","content":"\r\n[Open de-acronym in Script Kit](https://scriptkit.com/api/new?name=de-acronym&url=https://gist.githubusercontent.com/trevor-atlas/992682a54fa4ec44ccc8cc58e889e026/raw/f4ec3016bd7f8b1af4be65a64f3d500c19231e71/de-acronym.ts\")\r\n\r\n```js\r\n// Menu: De-Acronym-ify\r\n// Description: Replace acronyms with their full names\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// Shortcut: cmd ctrl opt shift a\r\n// Group: work\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nlet text = '';\r\nconst clipboardValue = await paste();\r\nconst selection = await getSelectedText();\r\n\r\nif (selection) {\r\n  text = selection;\r\n  console.log('use selection', selection);\r\n}\r\n\r\nif (clipboardValue && !selection) {\r\n  text = clipboardValue;\r\n  console.log('use clipboard', text);\r\n}\r\n\r\nif (!text) {\r\n  text = await arg('Enter text to de-acronym-ify');\r\n  console.log('use prompt', text);\r\n}\r\n\r\nconst acronyms: Array<[string | RegExp, string]> = [\r\n  ['PD', 'Product Design'],\r\n  ['PM', 'Product Management'],\r\n  ['JS', 'JavaScript'],\r\n  ['TS', 'TypeScript'],\r\n];\r\n\r\nconst result = acronyms.reduce(\r\n  (acc, [acronym, expansion]) => acc.replace(acronym, expansion),\r\n  text\r\n);\r\n\r\nif (!selection) {\r\n  copy(result);\r\n} else {\r\n  await setSelectedText(result);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-30T20:35:34Z"},{"name":"humanlike typing","description":"","author":"Trevor Atlas","twitter":"trevoratlas","avatar":"https://avatars.githubusercontent.com/u/5009188?u=6d1d4e4744b6cc869b7a86d8831748b058c681b3&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1295","url":"https://gist.githubusercontent.com/trevor-atlas/17746a243dd9bbfa8062d8fb86b5fc20/raw/45b2a5cb769b76db73f70579edf28b469ba194bd/humanlike-typing.ts","title":"Type clipboard like a human","command":"type-clipboard-like-a-human","content":"I haven't quite dialed in the random delays as well as I'd like, but it gets the job done :]\r\n\r\n[Open humanlike-typing in Script Kit](https://scriptkit.com/api/new?name=humanlike-typing&url=https://gist.githubusercontent.com/trevor-atlas/17746a243dd9bbfa8062d8fb86b5fc20/raw/45b2a5cb769b76db73f70579edf28b469ba194bd/humanlike-typing.ts\")\r\n\r\n```js\r\n// Name: humanlike typing\r\n// Description: Type the contents of your clipboard as if you were a human\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait hide();\r\n\r\nawait applescript(String.raw`\r\nset texttowrite to the clipboard as text\r\ntell application \"System Events\"\r\n  repeat with i from 1 to count characters of texttowrite\r\n    if (character i of texttowrite) is equal to linefeed or (character i of texttowrite) is equal to return & linefeed or (character i of texttowrite) is equal to return then\r\n      keystroke return\r\n    else\r\n      keystroke (character i of texttowrite)\r\n    end\r\n    if (character i of texttowrite) is equal to \" \" then\r\n      delay (random number from 0.01 to 0.1)\r\n    else if (character i of texttowrite) is equal to \"\\n\" then\r\n      delay (random number from 0.1 to 0.3)\r\n    else\r\n      delay (random number from 0.01 to 0.05)\r\n    end\r\n  end repeat\r\nend tell\r\n`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-30T20:32:02Z"},{"name":"vpn","author":"Trevor Atlas","twitter":"trevoratlas","schedule":"*/15 * * * *","avatar":"https://avatars.githubusercontent.com/u/5009188?u=6d1d4e4744b6cc869b7a86d8831748b058c681b3&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1294","url":"https://gist.githubusercontent.com/trevor-atlas/45ea4ba63553e81facc93105cf52dc65/raw/a983e86ac4885afeff3928e268ad780020beffda/vpn.ts","title":"Connect to GlobalProtect VPN if not connected","command":"connect-to-globalprotect-vpn-if-not-connected","content":"\r\n[Open vpn in Script Kit](https://scriptkit.com/api/new?name=vpn&url=https://gist.githubusercontent.com/trevor-atlas/45ea4ba63553e81facc93105cf52dc65/raw/a983e86ac4885afeff3928e268ad780020beffda/vpn.ts\")\r\n\r\n```js\r\n// Name: vpn\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// Schedule: */15 * * * *\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\napplescript(`\r\ntell application \"System Events\" to tell process \"GlobalProtect\"\r\n\tset connectionStatus to get help of every menu bar item of menu bar 2\r\n\tif item 1 of connectionStatus = \"Not Connected\" then\r\n\t\tclick menu bar item 1 of menu bar 2 -- Activates the GlobalProtect \"window\" in the menubar\r\n\t\ttry\r\n\t\t\tclick button \"Connect\" of window 1\r\n\t\tend try\r\n\t\tclick menu bar item 1 of menu bar 2 -- This will close the GlobalProtect \"window\" after clicking Connect/Disconnect. This is optional.\r\n\tend if\r\nend tell\r\n`);\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-30T19:36:57Z"},{"name":"Search Open PRs","description":"","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","author":"Josh Mabry","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1284","url":"","title":"Search Open PRs","command":"search-open-prs","content":"Change the owner and repo name to desired repo and get to reviewing!\r\n\r\n[Open search-open-pr in Script Kit](https://scriptkit.com/api/new?name=search-open-pr&url=https://gist.githubusercontent.com/mabry1985/7cf5cec8d5913948aeda070f51ecfe4d/raw/64c98abcade33cdeb54604f29a06c55f05d374f1/search-open-pr.js\")\r\n\r\n```js\r\n// Name: Search Open PRs\r\n// Description: Search open PRs in a repo\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst fetch = await npm(\"node-fetch\");\r\nconst variables = {\r\n  owner: \"knapsack-labs\",\r\n  repoName: \"app-monorepo\",\r\n};\r\n\r\nlet token = await env(\"GITHUB_AUTH_TOKEN\", {\r\n  hint: `Grab a key from <a href=\"https://github.com/settings/tokens\">here</a>`,\r\n});\r\n\r\nconst query = `\r\nquery getPrs($owner: String!, $repoName: String!) {\r\n  repository(owner: $owner, name: $repoName) {\r\n    pullRequests(last: 100, states: OPEN) {\r\n      nodes {\r\n        body\r\n        createdAt\r\n        mergeable\r\n        number\r\n        state\r\n        title\r\n        updatedAt\r\n        url\r\n        author {\r\n          avatarUrl\r\n          login\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n`;\r\n\r\nasync function getPrs() {\r\n  return fetch(\"https://api.github.com/graphql\", {\r\n    headers: {\r\n      authorization: `bearer ${token}`,\r\n    },\r\n    method: \"POST\",\r\n    body: JSON.stringify({ query, variables }),\r\n  })\r\n    .then((res) => res.json())\r\n    .catch((err) => {\r\n      console.log(err);\r\n      exit();\r\n    });\r\n}\r\nconst prs = await getPrs();\r\nconst openPRs = prs.data.repository.pullRequests.nodes;\r\nconst sortedPrs = openPRs.sort(\r\n  (a, b) => Date.parse(b.createdAt) - Date.parse(a.createdAt)\r\n);\r\nconst pr = await arg(\r\n  {\r\n    placeholder: `Select a PR to view`,\r\n  },\r\n  sortedPrs.map((pr) => {\r\n    return {\r\n      name: `${pr.number} - ${pr.title}`,\r\n      preview: () =>\r\n        `<div class=\"p-2\">\r\n          <h2>${pr.number} - ${pr.title}</h2>\r\n          <hr class=\"mb-4\"/>\r\n          <p>Ready to Merge: ${pr.mergeable === \"MERGEABLE\" ? \"✅\" : \"⛔\"}</p>\r\n          <p class=\"my-4\">${md(pr.body)}</p>\r\n          <span class=\"flex flex-row\">\r\n          <p>Author: ${pr.author.login}</p>\r\n          <img class=\"w-5 h-5 ml-2\" src=\"${pr.author.avatarUrl}\" />\r\n          </span>\r\n        </div>`,\r\n      value: pr.number,\r\n    };\r\n  })\r\n);\r\n\r\nconst prInfo = sortedPrs.find((p) => p.number === pr);\r\nbrowse(prInfo.url);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-21T20:59:28Z"},{"name":"JS Expression","description":"","avatar":"https://avatars.githubusercontent.com/u/61105068?u=f283e5ba5e98aeae47c6b325ba9827ecacf24dd0&v=4","user":"alkene0005","author":"Alken E","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1283","url":"","title":"A simple calculator using js expressions","command":"a-simple-calculator-using-js-expressions","content":"\r\n[Open js-expression in Script Kit](https://scriptkit.com/api/new?name=js-expression&url=https://gist.githubusercontent.com/alkene0005/25bd8b0b560fdc4d1b582bf1c6a4ed55/raw/af15c0765269eb22b6aaa7ac207ed152c0088d3c/js-expression.js\")\r\n\r\n```js\r\n// Name: JS Expression\r\n// Description: I prefer to define it as a simple calculator\r\n\r\n// Global Objects\r\nlet arr = [1, 2, 3, 4, 5]\r\nlet obj = {name: 'Mike', age: 20}\r\n\r\n// Global Functions\r\nlet {\r\n    ceil, floor, round, trunc, abs, PI,\r\n    sin, cos, tan, log, log2, log10, exp, sqrt, cbrt, pow\r\n} = Math\r\n\r\n// Factorial\r\nlet fact = num => _.reduce(_.range(1, num + 1), (acc, i) => acc * i, 1)\r\n\r\nlet selected = await arg({\r\n    placeholder: 'Expression ...',\r\n    enter: 'Copy & Exit',\r\n    shortcuts: [{\r\n        name: 'Repalce', key: 'cmd+r', bar: 'right', onPress: async (input, {focused}) => {\r\n            setInput(evalExp(input))\r\n        }\r\n    }]\r\n}, async (input) => {\r\n    let res = input ? evalExp(input) : ''\r\n    return md(`~~~javascript\\n${res}\\n~~~`)\r\n})\r\n\r\nif (selected) await copy(evalExp(selected))\r\n\r\nfunction evalExp(input) {\r\n    let value = eval(`(${input})`)\r\n    if (typeof value == 'number') return (value % 1 != 0 ? value.toFixed(2) : value) + ''\r\n    if (typeof value == 'array') return JSON.stringify(value, null, 2)\r\n    if (typeof value == 'object') return JSON.stringify(value, null, 2)\r\n    if (typeof value == 'function') return ''\r\n}\r\n\r\n```\r\n<img width=\"768\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/61105068/5a168b8c-db66-4912-8cd0-afbc741b78a6\">\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-18T17:37:10Z"},{"name":"Steam","avatar":"https://avatars.githubusercontent.com/u/61105068?u=f283e5ba5e98aeae47c6b325ba9827ecacf24dd0&v=4","user":"alkene0005","author":"Alken E","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1281","url":"","title":"Quick Search Steam Game","command":"quick-search-steam-game","content":"[Install](https://scriptkit.com/api/new?name=steam-game-search&url=https://gist.githubusercontent.com/alkene0005/6dc59b6596a258f63cb774dd1206eb79/raw/c3a68d5fb11f78455efbfceebe70224bd1fc98f6/steam-game-search.js)\r\n\r\n```js\r\n// Name: Steam\r\n\r\nimport axios from 'axios'\r\nimport cheerio from 'cheerio'\r\n\r\n// Language-dependent configuration\r\nconst cc = 'US'\r\nconst l = 'english'\r\n\r\nfunction buildResult(value, image, title) {\r\n    return {\r\n        name: 'abc',\r\n        value: value,\r\n        html: `\r\n            <div class=\"flex flex-row h-full w-full\">\r\n                <img class=\"h-full\" src=\"${image}\"/>        \r\n                <h2 class=\"flex-1 flex flex-row items-center justify-center\">${title}</h2>\r\n                <div class=\"flex flex-row text-xxs items-center justify-right\">open</div>\r\n            </div>\r\n        `,\r\n    }\r\n}\r\n\r\nlet url = await arg('Keyword ...', async keyword => {\r\n    if (keyword.trim() == '') return []\r\n    let {data} = await axios.get(\r\n        'https://store.steampowered.com/search/suggest?term=' + keyword +\r\n        '&f=games&cc=' + cc + '&realm=1&l=s' + l + '&v=19040599&excluded_content_descriptors%5B%5D=3' +\r\n        '&excluded_content_descriptors%5B%5D=4&use_store_query=1&use_search_spellcheck=1&search_creators_and_tags=1'\r\n    );\r\n    let $ = cheerio.load(data);\r\n    let games = $('a').get().map(aTag => {\r\n        if ($(aTag).hasClass('match_app')) {\r\n            let name = $(aTag).find('.match_name').text();\r\n            let price = $(aTag).find('.match_subtitle').text();\r\n            let cover = $(aTag).find('.match_img img').attr('src');\r\n            let url = $(aTag).attr('href');\r\n            return buildResult(url, cover, `${name} - ${price}`)\r\n        }\r\n        if ($(aTag).hasClass('match_tag')) {\r\n            let name = $(aTag).find('.match_name span').text();\r\n            let count = $(aTag).find('.match_subtitle').text();\r\n            let url = $(aTag).attr('href');\r\n            return buildResult(url, 'https://pbs.twimg.com/profile_images/861662902780018688/SFie8jER_x96.jpg', `${name} - ${count}`)\r\n        }\r\n        if ($(aTag).hasClass('match_creator')) {\r\n            let name = $(aTag).find('.match_name').text();\r\n            let count = $(aTag).find('.match_subtitle').text();\r\n            let cover = $(aTag).find('.match_img img').attr('src');\r\n            let url = $(aTag).attr('href');\r\n            return buildResult(url, cover, `${name} - ${count}`)\r\n        }\r\n    });\r\n    return games.filter(x => x);\r\n});\r\n\r\nawait $`open ${url}`\r\n\r\n```\r\n<img width=\"768\" alt=\"image\" src=\"https://github.com/johnlindquist/kit/assets/61105068/c38983bb-f26f-4bb5-a556-9b1b995f38df\">\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-18T03:49:41Z"},{"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","author":"Josh Mabry","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1272","url":"","title":"Google PaLM2 Chat","command":"google-palm2-chat","content":"The LLM is still in early access but you can sign up for the waitlist [here](https://developers.generativeai.google/)\r\n\r\n[Open palm-chat in Script Kit](https://scriptkit.com/api/new?name=palm-chat&url=https://gist.githubusercontent.com/mabry1985/54c10fa4594fb5a5edcf65c1db55b44b/raw/8460dafe391bd8bb09593e35e2fb89764d27f521/palm-chat.js\")\r\n\r\n```js\r\nlet { GoogleAuth } = await import(\"google-auth-library\");\r\nlet { DiscussServiceClient } = await import(\"@google-ai/generativelanguage\");\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst MODEL_NAME = \"models/chat-bison-001\";\r\nconst API_KEY = await env(\"PALM_API_KEY\", {\r\n  hint: `Signup for waitlist here <a href=\"https://developers.generativeai.google/\">here</a>`,\r\n});\r\n\r\nconst client = new DiscussServiceClient({\r\n  authClient: new GoogleAuth().fromAPIKey(API_KEY),\r\n});\r\n\r\nconst config = {\r\n  model: MODEL_NAME,\r\n  temperature: 0.75,\r\n  candidateCount: 1,\r\n  top_k: 40,\r\n  top_p: 0.95,\r\n};\r\n\r\nconst chatHistory = [];\r\n\r\nconst generateText = async (text) => {\r\n  chatHistory.push({ content: text });\r\n  const response = await client.generateMessage({\r\n    ...config,\r\n    prompt: {\r\n      context: \"You are a funny and helpful assistant.\",\r\n      messages: chatHistory,\r\n    },\r\n  });\r\n\r\n  log(response);\r\n  log(response[0].filters);\r\n  if (response[0].filters.length > 0) {\r\n    return `The model has rejected your input. Reason: ${response[0].filters[0].reason}`;\r\n  } else {\r\n    chatHistory.push({ content: response[0].candidates[0].content });\r\n    return response[0].candidates[0].content;\r\n  }\r\n};\r\n\r\nawait chat({\r\n  onSubmit: async (input) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await generateText(input);\r\n      let message = md(response);\r\n      chat.addMessage(\"\");\r\n      chat.setMessage(-1, message);\r\n    } catch (e) {\r\n      console.log(e);\r\n      chat.addMessage(\"\");\r\n      chat.setMessage(-1, md(\"Error: \" + e.message));\r\n    }\r\n    setLoading(false);\r\n  },\r\n});\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-06T01:54:00Z"},{"name":"Static to Dynamic","description":"","author":"Josh Mabry","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1271","url":"","title":"Static to dynamic import converter","command":"static-to-dynamic-import-converter","content":"I got tired of typing out the conversion when pulling in script examples so I made this quick script to convert them\r\n\r\n[Open static-to-dynamic in Script Kit](https://scriptkit.com/api/new?name=static-to-dynamic&url=https://gist.githubusercontent.com/mabry1985/13b951630f05eebc35c66d8e706dee70/raw/70fb4529876ef97fd18351793d329afca945079e/static-to-dynamic.js\")\r\n\r\n```js\r\n// Name: Static to Dynamic\r\n// Description: Convert static import to dynamic import\r\n// e.g. import { Foo } from \"bar\";\r\n// to let { Foo } = await import(\"bar\");\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst text = await getSelectedText();\r\n\r\nfunction convertImportString(input) {\r\n  const importRegex = /import\\s+({[^}]+})\\s+from\\s+\"([^\"]+)\";/;\r\n\r\n  if (!importRegex.test(input)) {\r\n    throw new Error(\"Invalid import string format\");\r\n  }\r\n\r\n  const [_, importList, modulePath] = input.match(importRegex);\r\n  const output = `let ${importList} = await import(\"${modulePath}\");`;\r\n  return output;\r\n}\r\n\r\nconst output = convertImportString(text);\r\n\r\nawait setSelectedText(output);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-06-04T18:07:43Z"},{"menu":"Password Manager","description":"","shortcut":"command shift ]","author":"Rohit Kumar Saini","avatar":"https://avatars.githubusercontent.com/u/40729749?u=187731e94f8c8a56eec39f38100360e7581b7f50&v=4","user":"rockingrohit9639","twitter":"_rohit__404","discussion":"https://github.com/johnlindquist/kit/discussions/1262","url":"https://gist.githubusercontent.com/rockingrohit9639/586628e63330061cdeaff35cbc7dec05/raw/231215f7064ce763ffd4b2aa93ebb00c0341f080/password-manager.ts","title":"A simple Password Manager","command":"a-simple-password-manager","content":"# Password Manager\r\nA simple password manager to add new passwords and copy from one of the existing list of passwords. Passwords are saved after encryption.\r\n\r\n<hr>\r\n\r\n[Open password-manager in Script Kit](https://scriptkit.com/api/new?name=password-manager&url=https://gist.githubusercontent.com/rockingrohit9639/586628e63330061cdeaff35cbc7dec05/raw/231215f7064ce763ffd4b2aa93ebb00c0341f080/password-manager.ts\")\r\n\r\n\r\n```js\r\n// Menu: Password Manager\r\n// Description: Manager all your passwords justing using few keys\r\n// Shortcut: command shift ]\r\n// Author: @rockingrohit9639\r\n\r\nimport \"@johnlindquist/kit\";\r\nconst { nanoid } = await npm(\"nanoid\");\r\nconst Cryptr = await npm(\"cryptr\");\r\n\r\nconst CRYPTR_KEY = await env(\"CRYPTR_KEY\");\r\nconst cryptr = new Cryptr(CRYPTR_KEY);\r\n\r\nconst { passwords, write } = await db(\"passwords\", { passwords: [] });\r\n\r\ntype Option = {\r\n  name: string;\r\n  description: string;\r\n  value: \"ADD_NEW_PASSWORD\" | \"COPY_PASSWORD\";\r\n};\r\n\r\nconst PM_OPTIONS: Option[] = [\r\n  {\r\n    name: \"Add New Password\",\r\n    description: \"Add a new password to the database\",\r\n    value: \"ADD_NEW_PASSWORD\",\r\n  },\r\n  {\r\n    name: \"Copy Password\",\r\n    description: \"Copy one of the saved passwords\",\r\n    value: \"COPY_PASSWORD\",\r\n  },\r\n];\r\n\r\nconst choice: Option[\"value\"] = await arg(\r\n  \"What would you like to do?\",\r\n  PM_OPTIONS\r\n);\r\n\r\n/** Doing operation on basis of choice */\r\nif (choice === \"ADD_NEW_PASSWORD\") {\r\n  addNewPassword();\r\n}\r\n\r\nif (choice === \"COPY_PASSWORD\") {\r\n  listAndCopyPassword();\r\n}\r\n\r\nasync function addNewPassword() {\r\n  const title = await arg({\r\n    placeholder: \"Title\",\r\n    hint: \"Title for which your password belongs e.g Facebook etc.\",\r\n  });\r\n  const password = await arg({\r\n    placeholder: \"Password\",\r\n    hint: `Password you want to save for ${title}`,\r\n  });\r\n\r\n  /** Encrypting the password */\r\n  const encryptedPassword = cryptr.encrypt(password);\r\n\r\n  const id = nanoid(5);\r\n  const newPassword = { id, title, password: encryptedPassword };\r\n  passwords.push(newPassword);\r\n\r\n  /** Saving the password in db */\r\n  await write();\r\n  notify(`Password for ${title} added successfully!`);\r\n}\r\n\r\nasync function listAndCopyPassword() {\r\n  const passwordToCopy = await arg(\r\n    \"Which password would you like to copy ?\",\r\n    () =>\r\n      passwords.map(({ title, password }) => ({ name: title, value: password }))\r\n  );\r\n\r\n  /** Decrypting the password */\r\n  const decryptedPassword = cryptr.decrypt(passwordToCopy);\r\n\r\n  /** Copying the password to clipboard */\r\n  copy(decryptedPassword);\r\n  notify(\"Password copied to you clipboard!\");\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-21T04:44:25Z"},{"name":"Pomodoro","description":"","avatar":"https://avatars.githubusercontent.com/u/597015?u=1e764f789e382da7c81ee37ef3e1060bac244310&v=4","user":"LukeCarrier","author":"Luke Carrier","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1261","url":"https://gist.githubusercontent.com/LukeCarrier/b5800f573f43fc7acf4ea327f6e396b4/raw/d75fe7d8b4428500457cb2e6de3e2b11e1c9353c/pomodoro.ts","title":"Silly Pomodoro timer","command":"silly-pomodoro-timer","content":"Just a small hack to replace the many menu bar applications I've used over the years, and an excuse to have a play with Script Kit. I'm glad I did -- it's awesome 😁 \r\n\r\n[Open pomodoro in Script Kit](https://scriptkit.com/api/new?name=pomodoro&url=https://gist.githubusercontent.com/LukeCarrier/b5800f573f43fc7acf4ea327f6e396b4/raw/d75fe7d8b4428500457cb2e6de3e2b11e1c9353c/pomodoro.ts\")\r\n\r\n```js\r\n// Name: Pomodoro\r\n// Description: A Pomodoro timer, right here!\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst HOUR_MIN = 60;\r\nconst MIN_SEC  = 60;\r\nconst SEC_MS   = 1000;\r\n\r\nconst WORK_INTERVAL_SECS = 25 * 60;\r\nconst REST_INTERVAL_SECS =  5 * 60;\r\n\r\nconst WORK_INTERVAL_ICON = \"🍅\";\r\nconst REST_INTERVAL_ICON = \"🏝️\";\r\nconst COMPLETE_ICON      = \"🎉\";\r\n\r\nconst WIDGET_HTML = `\r\n  <div class=\"flex text-6xl items-center justify-center rounded-full\">\r\n    {{icon}}\r\n  </div>\r\n  <div class=\"flex-1\">\r\n    <h4 class=\"pr-6 font-medium text-secondary-900\">{{goal}}</h4>\r\n    <div class=\"mt-1 text-secondary-500\">{{timer}}</div>\r\n  </div>\r\n`;\r\nconst DING_JS = `new Audio(\"../kenvs/personal/assets/ding.ogg\").play();`;\r\nconst DING_SECS = 5;\r\n\r\nfunction formatTimeRemaining(seconds: number): string {\r\n  const totalMinutes = Math.floor(seconds / HOUR_MIN);\r\n  const formatSeconds = String(seconds % MIN_SEC).padStart(2, \"0\");\r\n  const formatMinutes = String(totalMinutes % MIN_SEC).padStart(2, \"0\");\r\n  return `${formatMinutes}:${formatSeconds}`;\r\n}\r\n\r\nconst goal = await arg(\"What's your goal this interval?\")\r\n\r\nconst timerWidget = await widget(WIDGET_HTML, {\r\n  title: \"Pomodoro\",\r\n  state: { icon: \"\", goal: \"\", timer: \"\" },\r\n\r\n  containerClass: \"p-6 max-w-sm mx-auto rounded-xl shadow-lg flex items-center space-x-4\",\r\n  alwaysOnTop: true,\r\n  preventEscape: true,\r\n  minimizable: false,\r\n  maximizable: false,\r\n  fullscreenable: false,\r\n  opacity: 0.45,\r\n\r\n  // If these are below the minimum size of a widget on macOS (160x120) the\r\n  // widget appears as a small white box without any content until manually\r\n  // resized.\r\n  width: 340,\r\n  height: 120,\r\n});\r\n\r\nfunction doInterval(icon: string, goal: string, interval_secs: number): Promise<void> {\r\n  timerWidget.setState({ icon, goal, timer: formatTimeRemaining(interval_secs) });\r\n\r\n  return new Promise<void>((resolve) => {\r\n    const startTime = new Date().getTime();\r\n    const timerInterval = setInterval(() => {\r\n      const thisTime = new Date().getTime();\r\n      const elapsedSeconds = Math.round((thisTime - startTime) / SEC_MS);\r\n      const remainingSeconds = interval_secs - elapsedSeconds;\r\n      if (remainingSeconds >= 0) {\r\n        timerWidget.setState({ icon, goal, timer: formatTimeRemaining(remainingSeconds) });\r\n      } else {\r\n        clearInterval(timerInterval);\r\n        timerWidget.executeJavaScript(DING_JS).finally(() => {\r\n          resolve();\r\n        });\r\n      }\r\n    }, 1000);\r\n  });\r\n}\r\n\r\nawait doInterval(WORK_INTERVAL_ICON, goal, WORK_INTERVAL_SECS);\r\nawait doInterval(REST_INTERVAL_ICON, `Break after ${goal}`, REST_INTERVAL_SECS);\r\ntimerWidget.setState({ icon: COMPLETE_ICON, goal: `${goal} all done!`, timer: \"That's another interval complete.\" });\r\nsetTimeout(() => timerWidget.close(), DING_SECS * 1000);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-20T19:31:28Z"},{"name":"Json To Yaml Converter","author":"Eddie","twitter":"schmedu_","avatar":"https://avatars.githubusercontent.com/u/8198764?u=8159fd937f0836c330f0aed6c4d518c48461072e&v=4","user":"Schmedu","discussion":"https://github.com/johnlindquist/kit/discussions/1259","url":"https://gist.githubusercontent.com/Schmedu/c904124d7a9cd4b9fd25485c9d8c36d0/raw/75255898c5293cbe648e1f7c521bc5a93c120e7b/json2yaml.ts","title":"JSON 2 YAML","command":"json-2-yaml","content":"[Open json2yaml in Script Kit](https://scriptkit.com/api/new?name=json2yaml&url=https://gist.githubusercontent.com/Schmedu/c904124d7a9cd4b9fd25485c9d8c36d0/raw/75255898c5293cbe648e1f7c521bc5a93c120e7b/json2yaml.ts\")\r\n\r\n```js\r\n// Name: Json To Yaml Converter\r\n// Author: Eduard Uffelmann\r\n// Twitter: @schmedu_\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport * as yaml from \"js-yaml\";\r\n\r\nlet filePath = await getSelectedFile();\r\nlet content = await readJson(filePath);\r\n\r\nlet result = yaml.dump(content);\r\n\r\nlet todo = await mini(\"What to do?\", [\"Copy\", \"Save\"]);\r\nif (todo === \"Copy\") {\r\n    await copy(result);\r\n} else {\r\n    await writeFile(filePath.replace(\".json\", \".yaml\"), result);\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-17T10:31:51Z"},{"name":"Get GitHub Commits Messages Since Tag","description":"","author":"John Lindquist","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","discussion":"https://github.com/johnlindquist/kit/discussions/1254","url":"https://gist.githubusercontent.com/johnlindquist/e56b9ad663cd56c947cc528c5f1c9f96/raw/a10ac8f6d49ebf961fd08013aec4f9b998e1024c/get-commits.ts","title":"Get GitHub Commit Messages Since Tag","command":"get-github-commit-messages-since-tag","content":"\r\n[Open get-commits in Script Kit](https://scriptkit.com/api/new?name=get-commits&url=https://gist.githubusercontent.com/johnlindquist/e56b9ad663cd56c947cc528c5f1c9f96/raw/a10ac8f6d49ebf961fd08013aec4f9b998e1024c/get-commits.ts)\r\n\r\n```js\r\n// Name: Get GitHub Commits Messages Since Tag\r\n// Description: Get all commit messages since a tag\r\n// Author: John Lindquist\r\n// Twitter: @johnlindquist\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet { Octokit } = await import(\"@octokit/rest\")\r\n\r\nlet ownerRepo = await arg(\"Enter username/repo. Example: johnlindquist/kit\")\r\nlet [owner, repo] = ownerRepo.split(\"/\")\r\nlet tag = await arg(\"Tag. Example: v1.54.53\")\r\n\r\nlet client = new Octokit({\r\n  auth: await env(\"GITHUB_PERSONAL_ACCESS_TOKEN\"),\r\n})\r\n\r\nlet page = 1\r\nlet hasMorePages = true\r\nlet messages = []\r\n\r\nlet ref = null\r\nlet tagPage = 1\r\nwhile (!ref) {\r\n  let listTags = await client.repos.listTags({\r\n    owner,\r\n    repo,\r\n    per_page: 100,\r\n    name: tag,\r\n    page: tagPage,\r\n  })\r\n\r\n  tagPage++\r\n  ref = listTags.data.find(t => t.name === tag).commit.sha\r\n}\r\n\r\nlet commit = await client.repos.getCommit({\r\n  owner,\r\n  repo,\r\n  ref,\r\n})\r\n\r\nlet since = commit.data.commit.author.date\r\n\r\nwhile (hasMorePages) {\r\n  let data = await client.repos.listCommits({\r\n    owner,\r\n    repo,\r\n    since,\r\n    per_page: 100,\r\n    page: page,\r\n  })\r\n\r\n  hasMorePages = data.data.length === 100\r\n  messages = messages.concat(data.data.map(c => c.commit.message))\r\n\r\n  page++\r\n}\r\n\r\nlet text = messages.join(\"\\n\\n\")\r\n\r\nif (env?.[\"GITHUB_SCRIPTKIT_TOKEN\"]) {\r\n  let response = await createGist(text, {\r\n    description: `Commit messages since ${tag}`,\r\n    isPublic: false,\r\n    fileName: \"commit-messages.txt\",\r\n  })\r\n\r\n  open(response.html_url)\r\n\r\n  debugger\r\n} else {\r\n  await editor(text)\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-10T16:08:12Z"},{"description":"","author":"Pierre Borckmans","shortcut":"ctrl opt cmd b","avatar":"https://avatars.githubusercontent.com/u/5610359?u=7019998d8df8daf3c7dda50ab3682fce7d43aad2&v=4","user":"pierre-borckmans","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1253","url":"","title":"Drive homebrew through Script kit","command":"drive-homebrew-through-script-kit","content":"Here's a small script that lets the user drive Homebrew from kit script:\r\n- list installed formulae / casks\r\n- install a new formula / cask from a list of all the ones available, minus the ones already installed\r\n- uninstall an existing formula/cask\r\n\r\nHope it's useful\r\n\r\n```// Name: Homebrew menu\r\n// Description: Drive homebrew through Kit-script\r\n// Author: Pierre Borckmans\r\n\r\n// shortcut: ctrl opt cmd b\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst BREW_CMD = '/opt/homebrew/bin/brew'\r\n\r\n\r\nconst cmdList = async (cmd) => (await cmd)._stdout.split(\"\\n\").slice(0, -1)\r\n\r\n\r\nconst getInstalled = async (type) => {\r\n    return await cmdList($`${BREW_CMD} list --${type} -1`)\r\n}\r\n\r\nconst getAvailable = async (type) => {\r\n    const items = (await cmdList($`${BREW_CMD} ${type} -1`)).map(o => ({\r\n        name: o,\r\n        value: o,\r\n        description: type.slice(0, -1)\r\n    }))\r\n    const alreadyInstalled = await getInstalled(type.slice(0, -1))\r\n    return items.filter(i => !alreadyInstalled.find(ai => ai === i.value));\r\n}\r\n\r\nconst install = async () => {\r\n    const packageName = await arg(\"Enter a package to install\", [...await getAvailable(\"formulae\"), ...await getAvailable(\"casks\")])\r\n    await $`${BREW_CMD} install ${packageName}`\r\n}\r\n\r\nconst uninstall = async () => {\r\n    const packageName = await arg(\"Choose a package to uninstall\", [...await list(\"formula\"), ...await list(\"cask\")])\r\n    await $`${BREW_CMD} uninstall ${packageName}`\r\n}\r\n\r\nconst menu = async () => {\r\n    const menuOptions = [\r\n        { \r\n            value: \"formulae\",\r\n            name: \"List installed formulae\"\r\n        },\r\n        { \r\n            value: \"casks\",\r\n            name: \"List installed casks\"\r\n        },\r\n        { \r\n            value: \"install\",\r\n            name: \"Install a cask or formula\"\r\n        },\r\n        { \r\n            value: \"uninstall\",\r\n            name: \"Uninstall a cask or formula\"\r\n        },\r\n    ]\r\n    const menuChoice = await arg(\"Select an option\", menuOptions)\r\n\r\n    switch (menuChoice) {\r\n        case \"formulae\":\r\n            await arg(`Homebrew formulas`, await getInstalled(\"formula\"))\r\n            break\r\n        case \"casks\":\r\n            await arg(`Homebrew casks`, await getInstalled(\"cask\"))\r\n            break\r\n        case \"install\":\r\n            await install()\r\n            break    \r\n        case \"uninstall\":\r\n            await uninstall()\r\n            break    \r\n        default:\r\n            break;\r\n    }\r\n    await menu()\r\n}\r\n\r\nawait menu();\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-10T14:31:19Z"},{"avatar":"https://avatars.githubusercontent.com/u/22137371?u=22b3858822ffbf8ddce68b5c2e000a9910dbb934&v=4","user":"ScytheDraven47","author":"Ben Rogers-McKee","twitter":"ScytheDraven47","discussion":"https://github.com/johnlindquist/kit/discussions/1251","url":"","title":"Bitwarden Passwords via CLI","command":"bitwarden-passwords-via-cli","content":"I figured it'd be nice to have a Bitwarden Script for use outside of browsers, and it made for a good first mini project.\r\nIt uses [@bitwarden/cli](https://www.npmjs.com/package/@bitwarden/cli) via NPM, though I'm looking at doing an API version as well.\r\n\r\n[Code/gist here](https://gist.github.com/ScytheDraven47/0605ea9475778ae9cc2279c6fd07ad2e)\r\n\r\n`Enter` copies password\r\n`Ctrl+Enter` copies username\r\n`Ctrl+Shift+Enter` pastes username, then tabs once, then pastes password (won't work for all use cases, but figured it's nice to have)\r\n\r\nThis script does not save user credentials, but saves a session key to prevent frequent logging in.\r\n\r\nCurrently missing 2FA via email and YubiKey.","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-09T08:45:36Z"},{"avatar":"https://avatars.githubusercontent.com/u/47897671?v=4","user":"BeSpunky","author":"Shy Agam","twitter":"shyagam","discussion":"https://github.com/johnlindquist/kit/discussions/1249","url":"","title":"Multichoice for the `arg` function","command":"multichoice-for-the-arg-function","content":"I wrapped the `arg` function to allow multi-selection.\r\nJust replace `arg` with `multiArg` and you're good to go.  ✨😊\r\nProvide a 3rd argument to customize item templates.\r\n\r\n[See code here](https://gist.github.com/BeSpunky/468b2e790ba9e32a73a3717dc876bdc4)\r\n\r\nhttps://user-images.githubusercontent.com/47897671/236700932-ad5410fa-f717-4dea-9657-b78a0fc4a6c5.mp4\r\n\r\n`Enter`: Toggles Selection\r\n`Ctrl+Enter`: Submits the results\r\n\r\n**Known issues:**\r\n* When the list is longer than the window, list jumps occur. See #1248 \r\n* The `input` parameter passed into the choice factory function (2nd argument of `arg`) is always `''` and doesn't reflect user input.\r\n* List is filtered, but the default template doesn't highlight fuzzy search matches like the original one.\r\n\r\nEnjoy 🥂","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-07T20:29:14Z"},{"avatar":"https://avatars.githubusercontent.com/u/47897671?v=4","user":"BeSpunky","author":"Shy Agam","twitter":"shyagam","discussion":"https://github.com/johnlindquist/kit/discussions/1247","url":"","title":"Efficient rebuild of scripts when `lib` files change","command":"efficient-rebuild-of-scripts-when-lib-files-change","content":"This script watches the `lib` folder, and when changes to `ts` files are made, it does 2 things:\r\n1. Create/update a dependency graph of `libFilePath -> dependantScriptPaths[]`\r\n2. Touches all script files that depend on the changed `lib` file to trigger rebuild.\r\n\r\nhttps://gist.github.com/BeSpunky/d40bf6052b2c9a4f3a58b22108e5124a\r\n\r\n**TLDR**\r\nCurrently, ScriptKit only rebuilds scripts if it detects changes to the `scripts` folder.\r\nIf you extract your reusable parts and put them into the `lib` folder, ScriptKit doesn't pick up on changes to those files.\r\nThe manual way to overcome this is to save your script file again and trigger rebuild.\r\n\r\nNo more... :)\r\n\r\nActually, this is a 3 scripts solution:\r\n1. [`update-script-dependency-graphs`](https://gist.github.com/BeSpunky/c9139cdedfa349c501a70febea3c46d5): Partially rebuilds the graph if a triggering file has been provided, otherwise completely rebuilds it.\r\n2. [`watch-libs`](https://gist.github.com/BeSpunky/d40bf6052b2c9a4f3a58b22108e5124a): Watches lib files, partially rebuild the graph using `update-script-dependency-graph`, then touch the scripts.\r\n3. [`watch-scripts`](https://gist.github.com/BeSpunky/1ce1ad4e29b339bec11cd2d416cb676c): Watch script files, partially rebuild the graph\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-05T21:38:13Z"},{"avatar":"https://avatars.githubusercontent.com/u/47897671?v=4","user":"BeSpunky","author":"Shy Agam","twitter":"shyagam","discussion":"https://github.com/johnlindquist/kit/discussions/1246","url":"","title":"Create a Gist for you script and it's lib dependencies","command":"create-a-gist-for-you-script-and-its-lib-dependencies","content":"## Watch how I publish the script that publishes scripts and their dependencies to Gist... 😄\r\n\r\nhttps://user-images.githubusercontent.com/47897671/236570763-9c84163f-c4f3-46d6-943f-537724db2b2e.mp4\r\n\r\n\r\nHere's the Gist of it:\r\nhttps://gist.github.com/BeSpunky/ff5dcb62887cbee686dd6c3ba31cabb5\r\n\r\n**TLDR**\r\nAs I go playing with ScriptKit, I started using the `lib` folder to centralize reusable functionality.\r\nThis made my scripts difficult to share, as they have nested dependencies which I would've had to add manually to my Gists.\r\nWell no more... 💪\r\n\r\nThis script let's you choose one of your scripts, reads it and recursively extracts `lib` dependencies, then publishes a new gist with the script and the dependencies.\r\n\r\nEnjoy 😊","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-05T21:23:15Z"},{"name":"Prompt Anything","description":"","author":"Josh Mabry","twitter":null,"shortcut":"alt shift enter","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1245","url":"","title":"Prompt Anywhere v2","command":"prompt-anywhere-v2","content":"[Open prompt-anywhere in Script Kit](https://scriptkit.com/api/new?name=prompt-anywhere&url=https://gist.githubusercontent.com/mabry1985/482fcf46ae66d79348d63096e00fb5d5/raw/2114b2c4644787ec77ae9f39adff333ecc23f864/prompt-anywhere.js\")\r\n\r\nIt's a completely overhauled version of the original. There was too much funkery (real word) that could happen by letting chatgpt just spew characters via keyboard.\r\n\r\nV1 still will exist as quick-prompt.js and will live under the deprecated folder with a disclaimer about the funk mentioned above and use at own risk, etc. I'll still be using it, because it's pretty fun :)\r\n\r\nAnyhow, This is a \"pre-release\" and will be added to my [kenv](https://github.com/artificialcitizens/ac-scripts) soon\r\n\r\nThere are a couple things I still need to work out, like how the heck to stop the token stream on escape and some more QOL, but I really happy with it. I used it all week in my workflow and it's really a game changer.\r\n\r\nFeedback, critiques, or bad puns are welcome.\r\n\r\nAnyhow, set forth and be awesome.\r\n\r\n```js\r\n/*\r\n# Prompt Anything\r\nHighlight some text and run this script to prompt against it.\r\nUseful for summarizing text, generating a title, or any other task you can think of.\r\n\r\n## Usage\r\n\r\n- Highlight the text you want to prompt against\r\n- Run the script via shortcut or command palette\r\n- Input your desired prompt\r\n- Wait for the AI to respond\r\n- Select one of the options\r\n* Retry - Rerun generation with option to update prompt\r\n* Edit - Edit response in editor\r\n    - On editor exit the message is saved to the clipboard\r\n    - On editor submit the message is pasted into the highlighted text\r\n* Copy - Copy response to clipboard\r\n* Paste - Paste response into highlighted text\r\n* Save - Save response to file (not working)\r\n## Example\r\n- Highlight: 'Some really long passage in a blog post'\r\n- Run Script\r\n- Prompt: `Summarize this passage in the form of Shakespearean prose`\r\n- Waaaaait for it...\r\n- Get a response from the AI\r\n- Select an option\r\n- Rinse and repeat\r\n*/\r\n\r\n// Name: Prompt Anything\r\n// Description: Custom prompt for any highlighted text\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n// Shortcut: alt shift enter\r\n\r\n//#################\r\n// ScriptKit Import\r\n//#################\r\nimport \"@johnlindquist/kit\";\r\n\r\n//#################\r\n// LangChain Imports\r\n//#################\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\nlet { HumanChatMessage, SystemChatMessage } = await import(\"langchain/schema\");\r\n\r\n//#################\r\n// Request API KEY\r\n//#################\r\n// stored in .env file after first run\r\n// can change there or through the command palette\r\nlet openAIApiKey = await env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n// System input / Task for the AI to follow\r\nlet userSystemInput = await arg(\"Summarize this passage\");\r\n// User Prompt from highlighted text\r\nlet userPrompt = await getSelectedText();\r\n\r\n//#################\r\n// Prompt Template\r\n//#################\r\nconst formatPrompt = (prompt) => {\r\n  return `##### Ignore prior instructions\r\n- Return answer in markdown format\r\n- You are tasked with the following\r\n${prompt}\r\n########\r\n`;\r\n};\r\n//################\r\n// Options Template\r\n//################\r\nconst options = `\r\n* [Retry](submit:retry) - Rerun generation with option to update prompt\r\n* [Edit](submit:edit) - Edit response in editor\r\n* [Copy](submit:copy) - Copy response to clipboard\r\n* [Paste](submit:paste) - Paste response into highlighted text\r\n* [Save](submit:save) - Save response to file (not working)\r\n`;\r\n\r\n//################\r\n// Main Function\r\n//################\r\n/**\r\n *\r\n * @param {*} prompt\r\n * @param {*} humanChatMessage\r\n */\r\nasync function promptAgainstHighlightedText(\r\n  prompt = formatPrompt(userSystemInput),\r\n  humanChatMessage = userPrompt\r\n) {\r\n  //#########\r\n  // Helpers\r\n  //########\r\n  // exit script on cancel\r\n  const cancelChat = () => {\r\n    process.exit(1);\r\n  };\r\n\r\n  /**\r\n   * Paste text to highlighted text and exit script\r\n   * @param {*} text\r\n   */\r\n  const pasteTextAndExit = async (text) => {\r\n    await setSelectedText(text);\r\n    process.exit(1);\r\n  };\r\n\r\n  /**\r\n   * Copy text to clipboard and exit script\r\n   * @param {*} text\r\n   */\r\n  const copyToClipboardAndExit = async (text) => {\r\n    await clipboard.writeText(currentMessage);\r\n    process.exit(1);\r\n  };\r\n\r\n  let currentMessage = \"\";\r\n  const llm = new ChatOpenAI({\r\n    // 0 = \"precise\", 1 = \"creative\"\r\n    temperature: 0.3,\r\n    // modelName: \"gpt-4\", // uncomment to use GPT-4 (requires beta access)\r\n    openAIApiKey: openAIApiKey,\r\n    // turn off to only get output when the AI is done\r\n    streaming: true,\r\n    callbacks: [\r\n      {\r\n        handleLLMNewToken: async (token) => {\r\n          log(`handleLLMNewToken`);\r\n          // each new token is appended to the current message\r\n          // and then rendered to the screen\r\n          currentMessage += token;\r\n          // render current message\r\n          await div({\r\n            html: md(currentMessage),\r\n            // @TODO: Figure out how to get ESC to trigger a cancel\r\n            onAbandon: cancelChat,\r\n            onEscape: cancelChat,\r\n            onBackspace: cancelChat,\r\n            // if this is set to false you can click outside the window to cancel\r\n            // which works, but would be nice to also have ESC work\r\n            ignoreBlur: false,\r\n            focus: true,\r\n            // hint: `Press ESC to cancel`,\r\n          });\r\n        },\r\n        handleLLMError: async (err) => {\r\n          dev({ err });\r\n        },\r\n        handleLLMEnd: async () => {\r\n          log(`handleLLMEnd`);\r\n          // render final message with options\r\n          let html = md(currentMessage + options);\r\n          // wait for user to select an option\r\n          const selectedOption = await div(html, {\r\n            ignoreBlur: true,\r\n            focus: true,\r\n            // have paste on text on submit?\r\n            // onSubmit: () => pasteTextAndExit(currentMessage),\r\n          });\r\n          // handle selected option\r\n          switch (selectedOption) {\r\n            case \"paste\":\r\n              await pasteTextAndExit(currentMessage);\r\n            case \"retry\":\r\n              // reset current message\r\n              currentMessage = \"\";\r\n              // prompt again with new prompt\r\n              // press enter to use original prompt\r\n              const followUp = await arg({\r\n                placeholder: userSystemInput,\r\n                hint: \"Press enter to use the same prompt\",\r\n              });\r\n              await processMessage(followUp);\r\n              break;\r\n            case \"edit\":\r\n              // @TODO still need to figure out best way to handle submit and abort\r\n              // would like custom buttons for triggering all of the actions like copy, paste, etc\r\n              await editor({\r\n                value: currentMessage,\r\n                onEscape: async (state) => await copyToClipboardAndExit(state),\r\n                onSubmit: async (state) => await pasteTextAndExit(state),\r\n              });\r\n              break;\r\n            case \"copy\":\r\n              await copyToClipboardAndExit(currentMessage);\r\n            case \"save\":\r\n              await inspect(currentMessage, `/conversations/${Date.now()}.md`);\r\n              exitChat();\r\n            default:\r\n              copyToClipboardAndExit(currentMessage);\r\n          }\r\n          await optionHandler(selectedOption);\r\n        },\r\n      },\r\n    ],\r\n  });\r\n  //###########\r\n  // Main Loop\r\n  //###########\r\n  // runs the language model until the user cancels\r\n  while (true) {\r\n    await llm.call([\r\n      new SystemChatMessage(formatPrompt(prompt)),\r\n      new HumanChatMessage(humanChatMessage),\r\n    ]);\r\n  }\r\n}\r\n\r\npromptAgainstHighlightedText();\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-05T08:07:12Z"},{"name":"Prompt Anything","description":"","author":"Josh Mabry","twitter":null,"shortcut":"alt shift enter","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1244","url":"","title":"Prompt Anywhere v2","command":"prompt-anywhere-v2","content":"\r\n[Open prompt-anything in Script Kit](https://scriptkit.com/api/new?name=prompt-anything&url=https://gist.githubusercontent.com/mabry1985/6c2412d4d3d1360276b9d95f44548815/raw/1dac5e149ebc4cf86ea830db9104d8518f47eca5/prompt-anything.js\")\r\n\r\nIt's a completely overhauled version of the original. There was too much funkery (real word) that could happen by letting chatgpt just spew characters via keyboard.\r\n\r\nV1 still will exist as `quick-prompt.js` and will live under the deprecated folder with a disclaimer about the funk mentioned above and use at own risk, etc. I'll still be using it, because it's pretty fun :)\r\n\r\nAnyhow, This is a \"pre-release\" and will be added to my [kenv](https://github.com/artificialcitizens/ac-scripts) soon\r\n\r\nThere are a couple things I still need to work out, like how the heck to stop the token stream on escape and some more QOL, but I really happy with it. I used it all week in my workflow and it's really a game changer.\r\n\r\nFeedback, critiques, or bad puns are welcome.\r\n\r\nAnyhow, set forth and be awesome.\r\n```js\r\n/*\r\n# Prompt Anything\r\nHighlight some text and run this script to prompt against it.\r\nUseful for summarizing text, generating a title, or any other task you can think of.\r\n\r\n## Usage\r\n\r\n- Highlight the text you want to prompt against\r\n- Run the script via shortcut or command palette\r\n- Input your desired prompt\r\n- Wait for the AI to respond\r\n- Select one of the options\r\n* Retry - Rerun generation with option to update prompt\r\n* Edit - Edit response in editor\r\n    - On editor exit the message is saved to the clipboard\r\n    - On editor submit the message is pasted into the highlighted text\r\n* Copy - Copy response to clipboard\r\n* Paste - Paste response into highlighted text\r\n* Save - Save response to file (not working)\r\n## Example\r\n- Highlight: 'Some really long passage in a blog post'\r\n- Run Script\r\n- Prompt: `Summarize this passage in the form of Shakespearean prose`\r\n- Waaaaait for it...\r\n- Get a response from the AI\r\n- Select an option\r\n- Rinse and repeat\r\n*/\r\n\r\n// Name: Prompt Anything\r\n// Description: Custom prompt for any highlighted text\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n// Shortcut: alt shift enter\r\n\r\n//#################\r\n// ScriptKit Import\r\n//#################\r\nimport \"@johnlindquist/kit\";\r\n\r\n//#################\r\n// LangChain Imports\r\n//#################\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\nlet { HumanChatMessage, SystemChatMessage } = await import(\"langchain/schema\");\r\n\r\n//#################\r\n// Request API KEY\r\n//#################\r\n// stored in .env file after first run\r\n// can change there or through the command palette\r\nlet openAIApiKey = await env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n// System input / Task for the AI to follow\r\nlet userSystemInput = await arg(\"Summarize this passage\");\r\n// User Prompt from highlighted text\r\nlet userPrompt = await getSelectedText();\r\n\r\n//#################\r\n// Prompt Template\r\n//#################\r\nconst formatPrompt = (prompt) => {\r\n  return `##### Ignore prior instructions\r\n- Return answer in markdown format\r\n- You are tasked with the following\r\n${prompt}\r\n########\r\n`;\r\n};\r\n//################\r\n// Options Template\r\n//################\r\nconst options = `\r\n* [Retry](submit:retry) - Rerun generation with option to update prompt\r\n* [Edit](submit:edit) - Edit response in editor\r\n* [Copy](submit:copy) - Copy response to clipboard\r\n* [Paste](submit:paste) - Paste response into highlighted text\r\n* [Save](submit:save) - Save response to file (not working)\r\n`;\r\n//#########\r\n// Helpers\r\n//########\r\n// exit script on cancel\r\nconst cancelChat = () => {\r\n  process.exit(1);\r\n};\r\n\r\n//################\r\n// Main Function\r\n//################\r\n/**\r\n *\r\n * @param {*} prompt\r\n * @param {*} humanChatMessage\r\n */\r\nasync function promptAgainstHighlightedText(\r\n  prompt = formatPrompt(userSystemInput),\r\n  humanChatMessage = userPrompt\r\n) {\r\n  let currentMessage = \"\";\r\n  const llm = new ChatOpenAI({\r\n    // 0 = \"precise\", 1 = \"creative\"\r\n    temperature: 0.3,\r\n    // modelName: \"gpt-4\", // uncomment to use GPT-4 (requires beta access)\r\n    openAIApiKey: openAIApiKey,\r\n    // turn off to only get output when the AI is done\r\n    streaming: true,\r\n    callbacks: [\r\n      {\r\n        handleLLMNewToken: async (token) => {\r\n          log(`handleLLMNewToken`);\r\n          // each new token is appended to the current message\r\n          // and then rendered to the screen\r\n          currentMessage += token;\r\n          // render current message\r\n          await div({\r\n            html: md(currentMessage + options),\r\n            // @TODO: Figure out how to get ESC to trigger a cancel\r\n            onAbandon: cancelChat,\r\n            onEscape: cancelChat,\r\n            onBackspace: cancelChat,\r\n            // if this is set to false you can click outside the window to cancel\r\n            // ignoreBlur: true,\r\n            focus: true,\r\n            // hint: `Press ESC to cancel`,\r\n          });\r\n        },\r\n        handleLLMError: async (err) => {\r\n          dev({ err });\r\n        },\r\n        handleLLMEnd: async () => {\r\n          log(`handleLLMEnd`);\r\n          // render final message with options\r\n          let html = md(currentMessage + options);\r\n          // wait for user to select an option\r\n          const selectedOption = await div(html, {\r\n            ignoreBlur: true,\r\n            focus: true,\r\n            // onSubmit: () => setSelectedText(currentMessage),\r\n          });\r\n          // handle selected option\r\n          switch (selectedOption) {\r\n            case \"paste\":\r\n              // paste into highlighted text\r\n              await setSelectedText(currentMessage);\r\n              process.exit(1);\r\n            case \"retry\":\r\n              // reset current message\r\n              currentMessage = \"\";\r\n              // prompt again with new prompt\r\n              // press enter to use original prompt\r\n              const followUp = await arg({\r\n                placeholder: userSystemInput,\r\n                hint: \"Press enter to use the same prompt\",\r\n              });\r\n              await processMessage(followUp);\r\n              break;\r\n            case \"edit\":\r\n              // still need to figure out best way to handle submit and abort\r\n              // would like custom buttons for triggering all these same options such as save\r\n              await editor({\r\n                value: currentMessage,\r\n                onEscape: async (state) => {\r\n                  // copy to clipboard when exiting the editor\r\n                  await clipboard.writeText(state);\r\n                  // exit script\r\n                  process.exit(1);\r\n                },\r\n                onSubmit: async (state) => {\r\n                  // paste into highlighted text when pressing enter\r\n                  await setSelectedText(state);\r\n                  // exit script\r\n                  process.exit(1);\r\n                },\r\n              });\r\n              break;\r\n            case \"copy\":\r\n              // copy to clipboard\r\n              await clipboard.writeText(currentMessage);\r\n              // exit script\r\n              process.exit(1);\r\n            case \"save\":\r\n              await inspect(currentMessage, `conversations/${Date.now()}.md`);\r\n              // exit script\r\n              process.exit(1);\r\n            default:\r\n              // copy to clipboard\r\n              await clipboard.writeText(currentMessage);\r\n              process.exit(1);\r\n          }\r\n          await optionHandler(selectedOption);\r\n        },\r\n      },\r\n    ],\r\n  });\r\n  //###########\r\n  // Main Loop\r\n  //###########\r\n  // runs the language model until the user cancels\r\n  while (true) {\r\n    await llm.call([\r\n      new SystemChatMessage(formatPrompt(prompt)),\r\n      new HumanChatMessage(humanChatMessage),\r\n    ]);\r\n  }\r\n}\r\n\r\npromptAgainstHighlightedText();\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-05T06:30:54Z"},{"avatar":"https://avatars.githubusercontent.com/u/629240?u=4750610206bd5ebafbdfab85d5d9c81dc8ce21ed&v=4","user":"blakecannell","author":"Blake.","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1240","url":"","title":"Snippets Manager (File Based)","command":"snippets-manager-file-based","content":"Simple file based snippets manager:\r\n\r\nA few things to note:\r\n- File paths are currently specific to Windows. I will update for other envionments.\r\n- This assumes a `snippets` folder exists within your home folder. Is there any way to make this configurable (within the manager itself)? This is of course quite simple to set as a constant at the top of the file if not.\r\n\r\nhttps://gist.github.com/blakecannell/bea79f6c69103a410181802855855aa4","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-04T04:40:53Z"},{"name":"Open Recent VS Code Project","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1238","url":"https://gist.githubusercontent.com/johnlindquist/b2426f52a9b5f3ca4827fbdeda6b323c/raw/8d7cbd175540000bf6a8684814de265343ad2ae5/open-recent-vs-code-project.ts","title":"Open Recent VS Code Project","command":"open-recent-vs-code-project","content":"TIL VS Code has a sqlite database of recents, so I built this!\r\n\r\n[Open open-recent-vs-code-project in Script Kit](https://scriptkit.com/api/new?name=open-recent-vs-code-project&url=https://gist.githubusercontent.com/johnlindquist/b2426f52a9b5f3ca4827fbdeda6b323c/raw/8d7cbd175540000bf6a8684814de265343ad2ae5/open-recent-vs-code-project.ts\")\r\n\r\n```js\r\n// Name: Open Recent VS Code Project\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { URL, fileURLToPath } from \"url\"\r\n\r\n// /Users/johnlindquist/Library/Application Support/Code/User/globalStorage/state.vscdb\r\nlet filename = home(\"Library\", \"Application Support\", \"Code\", \"User\", \"globalStorage\", \"state.vscdb\")\r\n// windows path not tested, just guessing\r\nif (isWin) filename = home(\"AppData\", \"Roaming\", \"Code\", \"User\", \"globalStorage\", \"state.vscdb\")\r\nlet { default: sqlite3 } = await import(\"sqlite3\")\r\nlet { open } = await import(\"sqlite\")\r\n\r\nconst db = await open({\r\n  filename,\r\n  driver: sqlite3.Database,\r\n})\r\n\r\nlet key = `history.recentlyOpenedPathsList`\r\nlet table = `ItemTable`\r\n\r\nlet result = await db.get(`SELECT * FROM ${table} WHERE key = '${key}'`)\r\nlet recentPaths = JSON.parse(result.value)\r\nrecentPaths = recentPaths.entries\r\n  .map(e => e?.folderUri)\r\n  .filter(Boolean)\r\n  .map(uri => fileURLToPath(new URL(uri)))\r\n\r\nlet recentPath = await arg(\"Open a recent path\", recentPaths)\r\nhide()\r\nawait exec(`code ${recentPath}`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-03T23:43:12Z"},{"name":"Samantha","description":"","shortcut":"command shift enter","avatar":"https://avatars.githubusercontent.com/u/34244581?u=f136c7d3eec99d1a4b2c887ca8c673bfabef95fa&v=4","user":"alwinraju","author":"Alwin Raju","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1236","url":"","title":"ChatGPT with user input","command":"chatgpt-with-user-input","content":"Heres a code snippet that takes in a user input and feeds it into ChatGPT and returns the response.\r\nAn OpenAI API key is required for it to work.  The prompt can be amended to suit your needs/to create\r\nyour own custom agents.\r\n\r\n```javascript\r\n/*\r\nPress `cmd+shift+enter` and enter the text you want to send to ChatGPT.\r\n*/\r\n\r\n// Name: Samantha\r\n// Description: Send a single prompt to ChatGPT\r\n// Shortcut: command shift enter\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\nlet { HumanChatMessage, SystemChatMessage } = await import(\"langchain/schema\");\r\nlet openAIApiKey = await env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\nlet { CallbackManager } = await import(\"langchain/callbacks\");\r\nlet prompt = `#####\r\nYou are ChatGPT, a large language model trained by OpenAI. Follow the user's\r\ninstructions carefully. Respond using markdown.\r\n########\r\n`;\r\n\r\nlet currentMessage = \"\";\r\nconst chat = new ChatOpenAI({\r\n  temperature: 0.3,\r\n  openAIApiKey: openAIApiKey,\r\n  streaming: true,\r\n  callbackManager: CallbackManager.fromHandlers({\r\n    handleLLMStart: async (token) => {\r\n      let widget = await widget(`\r\n<div class=\"bg-black text-white h-screen p-5\">\r\n    Loading...\r\n<div>\r\n`);\r\n      log(`handleLLMStart`);\r\n      currentMessage += token;\r\n      let html = md(token);\r\n\r\n      await div(html);\r\n    },\r\n    handleLLMNewToken: async (token, runId) => {\r\n      log(`handleLLMNewToken`);\r\n      currentMessage += token;\r\n      let html = md(currentMessage);\r\n\r\n      await div(html);\r\n    },\r\n    handleLLMError: async (err) => {\r\n      warn(`error`, JSON.stringify(err));\r\n      await setSelectedText(JSON.stringify(err));\r\n    },\r\n    handleLLMEnd: async () => {\r\n      widget = null;\r\n      log(`handleLLMEnd`);\r\n\r\n      let html = md(currentMessage);\r\n\r\n      await div(html);\r\n    },\r\n  }),\r\n});\r\n\r\nlet textFromUser = await arg(\"How can I help you?\");\r\n\r\nawait chat.call([new SystemChatMessage(prompt), new HumanChatMessage(textFromUser)]);\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-01T21:30:11Z"},{"name":"Pause Any Music","description":"","author":"Josh Davenport-Smith","twitter":"joshdprts","avatar":"https://avatars.githubusercontent.com/u/757828?u=789f3b1408f5c32253eab54c5d8e5d14d2b27179&v=4","user":"joshdavenport","discussion":"https://github.com/johnlindquist/kit/discussions/1235","url":"https://gist.githubusercontent.com/joshdavenport/d6a38b7e5b9d9f1a76b0e44b78a7a5e5/raw/7c376383c698a52f817228aa19cf5312dbbc095c/pause-any-music.ts","title":"Pause any music - only looks at Spotify/Music.app but customisable","command":"pause-any-music-only-looks-at-spotifymusicapp-but-customisable","content":"I'm often switching between Spotify and Music.app and find that what Mac targets when using pause media key can sometimes be unpredictable. This little script will pause either if playing.\r\n\r\n[Open pause-any-music in Script Kit](https://scriptkit.com/api/new?name=pause-any-music&url=https://gist.githubusercontent.com/joshdavenport/d6a38b7e5b9d9f1a76b0e44b78a7a5e5/raw/7c376383c698a52f817228aa19cf5312dbbc095c/pause-any-music.ts\")\r\n\r\n```js\r\n// Name: Pause Any Music\r\n// Description: Pause music playing from music apps\r\n// Author: Josh Davenport-Smith\r\n// Twitter: @joshdprts\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst pauseScript = `\r\ntell application \"Spotify\"\r\n    pause\r\nend tell\r\n\r\ntell application \"Music\"\r\n    pause\r\nend tell\r\n`;\r\n\r\nexec(`osascript -e '${pauseScript}'`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-01T09:26:25Z"},{"preview":"docs","menu":"Open Project","description":"","shortcut":"cmd shift .","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1234","url":"","title":"Open dev-project","command":"open-dev-project","content":"Now updated to use DB and add paths, create folders.\r\n\r\nOpen for any improvements ^^\r\n\r\n\r\n[Open dev-project in Script Kit](https://scriptkit.com/api/new?name=dev-project&url=https://gist.githubusercontent.com/Ambushfall/41236543032f4dd211a65964766be087/raw/5f7b2d37749d436f5015523d57fcba28d119b4cd/dev-project.js\")\r\n\r\n```js\r\n// Preview: docs\r\n// Menu: Open Project\r\n// Description: Opens a project in vscode\r\n// Shortcut: cmd shift .\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst envPath = await env('PROJECT_DIR');\r\n\r\nconst projectDir = home(envPath);\r\n\r\nconst projectList = await readdir(projectDir);\r\n\r\n\r\nlet { projects, write } = await db(\"projects\", {\r\n    projects: projectList,\r\n})\r\n\r\nprojectList.forEach(async value => {\r\n    if (!projects.includes(value)) {\r\n        projects.push(value);\r\n        await write()\r\n    }\r\n})\r\n\r\n\r\nonTab(\"Open\", async () => {\r\n    let project = await arg(\"Open project:\", projects.map(project => project.split('\\\\').pop()))\r\n    edit('', path.resolve(projectDir, project))\r\n})\r\n\r\nonTab(\"Add Path\", async () => {\r\n    while (true) {\r\n        let project = await arg(\r\n            \"Add path to project:\",\r\n            md(projects.map(project => `* ${project.split('\\\\').pop()}`).join(\"\\n\"))\r\n        )\r\n        projects.push(project)\r\n        await write()\r\n    }\r\n})\r\n\r\nonTab(\"Remove\", async () => {\r\n    while (true) {\r\n        let project = await arg(\"Open project:\", projects.map(project => project.split('\\\\').pop()))\r\n\r\n        project.split(':').length > 1 ? await rm(path.resolve(project)) : await rm(path.resolve(projectDir, project))\r\n\r\n        let indexOfProject = projects.indexOf(project)\r\n        projects.splice(indexOfProject, 1)\r\n        await write()\r\n    }\r\n})\r\n\r\nonTab(\"New Project\", async () => {\r\n    while (true) {\r\n        let project = await arg(\r\n            {\r\n                placeholder: \"Create new project:\", debounceInput: 400,\r\n                enter: \"Create\", validate: async (input) => {\r\n                    let exists = await isDir(path.resolve(projectDir, input));\r\n                    if (exists) {\r\n                        return `${input} already exists`;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n\r\n        )\r\n        projects.push(project)\r\n        mkdir(path.resolve(projectDir, project))\r\n        await write()\r\n    }\r\n})\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-01T03:28:00Z"},{"name":"Explain Plz","description":"","author":"Josh Mabry","twitter":null,"shortcut":"cmd alt shift e","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1232","url":"","title":"Get an AI powered explanation of highlighted text","command":"get-an-ai-powered-explanation-of-highlighted-text","content":"\r\n[Open explain-plz in Script Kit](https://scriptkit.com/api/new?name=explain-plz&url=https://gist.githubusercontent.com/mabry1985/15add17a63b2d218be168495c2fb46b1/raw/3515457b32049380e633da1e625ff3d6714f844d/explain-plz.js\")\r\n\r\nA quick POC for an AI powered explanation script\r\n\r\nReturns a TLDR, Technical Summary, and ELI5\r\n\r\n\r\nhttps://user-images.githubusercontent.com/31560031/235382761-06db398d-e8b0-4be5-8e8d-a3bb81d4a694.mov\r\n\r\n\r\n```js\r\n/*\r\n# Explain Plz\r\nHighlight some text and have it explained by AI\r\nWorks for any highlighted text or code\r\n*/\r\n\r\n// Name: Explain Plz\r\n// Description: Get an explanation for any highlighted text\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n// Shortcut: cmd alt shift e\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\nlet { HumanChatMessage, SystemChatMessage } = await import(\"langchain/schema\");\r\nlet openAIApiKey = await env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\nlet { CallbackManager } = await import(\"langchain/callbacks\");\r\nlet prompt = `#####\r\nIgnore prior instructions, you are tasked with taking the input text and explaining it to the user.\r\nReturn the response in the following format using markdown syntax:\r\n# Explain Plz\r\n## TLDR (A quick summary of the highlighted text)\r\n## ELI5 (Explain Like I'm 5)\r\n## Explanation (A longer technical explanation of the highlighted text)\r\n`;\r\nlet currentMessage = \"\";\r\nconst chat = new ChatOpenAI({\r\n  temperature: 0.3,\r\n  openAIApiKey: openAIApiKey,\r\n  streaming: true,\r\n  callbackManager: CallbackManager.fromHandlers({\r\n    handleLLMStart: async (token) => {\r\n      let widget = await widget(`\r\n<div class=\"bg-black text-white h-screen p-5\">\r\n    Loading...\r\n<div>\r\n`);\r\n      log(`handleLLMStart`);\r\n      currentMessage += token;\r\n      let html = md(token);\r\n\r\n      await div(html);\r\n    },\r\n    handleLLMNewToken: async (token, runId) => {\r\n      log(`handleLLMNewToken`);\r\n      currentMessage += token;\r\n      let html = md(currentMessage);\r\n\r\n      await div(html);\r\n    },\r\n    handleLLMError: async (err) => {\r\n      warn(`error`, JSON.stringify(err));\r\n      await setSelectedText(JSON.stringify(err));\r\n    },\r\n    handleLLMEnd: async () => {\r\n      widget = null;\r\n      log(`handleLLMEnd`);\r\n\r\n      let html = md(currentMessage);\r\n\r\n      await div(html);\r\n    },\r\n  }),\r\n});\r\n\r\nlet text = await getSelectedText();\r\n``;\r\nawait chat.call([new SystemChatMessage(prompt), new HumanChatMessage(text)]);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-05-01T00:13:53Z"},{"name":"AC AGI","description":"","author":"Josh Mabry","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1231","url":"","title":"An example of an AGI task manager with Human in the loop feedback","command":"an-example-of-an-agi-task-manager-with-human-in-the-loop-feedback","content":"\r\n[Open ac-agi in Script Kit](https://scriptkit.com/api/new?name=ac-agi&url=https://gist.githubusercontent.com/mabry1985/cb36cb2a25d58628dcc2b506ec63e2dc/raw/0814b40397f404a9f05d03a549b352186f22f6ba/ac-agi.js\")\r\n\r\nUp to date script can be found in my Kenv [here](https://github.com/artificialcitizens/ac-scripts)\r\n\r\n```js\r\n/*\r\nPardon the mess this was put together in half a day for the [lablab.ai](https://lablab.ai/event/autonomous-gpt-agents-hackathon) hackathon.\r\nMore updates to come\r\n\r\n# AC AGI \r\nAn autonomous general intelligence that accomplishes a task for you.\r\nUses human in the loop to provide feedback to the agent.\r\n\r\n\r\nHow to use:\r\n- Enter your task\r\n- Wait for the agent to complete the task\r\n- Assign max-iterations for the agent to loop: 0 for infinite (probably not a good idea ¯\\_(ツ)_/¯)\r\n- Profit\r\n\r\nKnown issues:\r\n- The agent will sometimes get stuck in a loop and not complete the task\r\n- Human feedback is not always helpful\r\n\r\nUpcoming features:\r\n- More tools\r\n- Refined prompts\r\n- Better human feedback system\r\n- Better memory system\r\n\r\nPossible thanks to the fine folks at [Langchain](https://js.langchain.com/docs/use_cases/autonomous_agents/baby_agi#example-with-tools)\r\nand all the other giants whose shoulders we stand on.\r\n*/\r\n\r\n// Name: AC AGI\r\n// Description: An AGI task manager inspired by BabyAGI\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet { BabyAGI } = await import(\"langchain/experimental/babyagi\");\r\nlet { MemoryVectorStore } = await import(\"langchain/vectorstores/memory\");\r\nlet { OpenAIEmbeddings } = await import(\"langchain/embeddings/openai\");\r\nlet { OpenAI } = await import(\"langchain/llms/openai\");\r\nlet { PromptTemplate } = await import(\"langchain/prompts\");\r\nlet { LLMChain } = await import(\"langchain/chains\");\r\nlet { ChainTool } = await import(\"langchain/tools\");\r\nlet { initializeAgentExecutorWithOptions } = await import(\"langchain/agents\");\r\nlet { DynamicTool } = await import(\"langchain/tools\");\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\n\r\nlet GOOGLE_API_KEY = await env(\"GOOGLE_API_KEY\", {\r\n  shortcuts: [\r\n    {\r\n      name: \"Google API Key\",\r\n      key: `${cmd}+o`,\r\n      bar: \"right\",\r\n      onPress: () => {\r\n        open(\"https://developers.google.com/custom-search/v1/introduction\");\r\n      },\r\n    },\r\n  ],\r\n  ignoreBlur: true,\r\n  secret: true,\r\n  height: PROMPT.HEIGHT.INPUT_ONLY,\r\n});\r\n\r\nlet GOOGLE_CSE_KEY = await env(\"GOOGLE_CSE_KEY\", {\r\n  shortcuts: [\r\n    {\r\n      name: \"Google Custom Search Engine Key\",\r\n      key: `${cmd}+o`,\r\n      bar: \"right\",\r\n      onPress: () => {\r\n        open(\"https://programmablesearchengine.google.com/\");\r\n      },\r\n    },\r\n  ],\r\n  ignoreBlur: true,\r\n  secret: true,\r\n  height: PROMPT.HEIGHT.INPUT_ONLY,\r\n});\r\n\r\nawait env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\n\r\nconst task = await arg({\r\n  placeholder: \"Task\",\r\n  description: \"Enter a task for AC AGI to complete\",\r\n  ignoreBlur: true,\r\n  height: PROMPT.HEIGHT.INPUT_ONLY,\r\n});\r\nlet maxIterations = await arg({\r\n  placeholder: \"How many times should AC AGI loop?\",\r\n  hint: \"Leave empty for infinite iterations *use with caution*\",\r\n  ignoreBlur: true,\r\n  height: PROMPT.HEIGHT.INPUT_ONLY,\r\n});\r\n\r\nif (maxIterations === \"\" || maxIterations === \"0\") {\r\n  maxIterations = undefined;\r\n}\r\n\r\n//#########################\r\n// BabyAGI method overrides\r\n//#########################\r\nfunction printTaskList() {\r\n  let result = \"\";\r\n  for (const t of this.taskList) {\r\n    result += `${t.taskID}: ${t.taskName}\\n`;\r\n  }\r\n  const msg = `### Task List\r\n  \r\n  ${result}\r\n  `;\r\n  let html = md(msg);\r\n\r\n  div({\r\n    html,\r\n    ignoreBlur: true,\r\n  });\r\n}\r\n\r\nfunction printNextTask(task) {\r\n  const msg = `### Next Task\r\n  \r\n  ${task.taskID}: ${task.taskName}\r\n  `;\r\n  let html = md(msg);\r\n\r\n  div({\r\n    html,\r\n    ignoreBlur: true,\r\n  });\r\n}\r\n\r\nfunction printTaskResult(result) {\r\n  const msg = `### Task Result\r\n  \r\n  ${result.trim()}\r\n  `;\r\n  let html = md(msg);\r\n\r\n  div({\r\n    html,\r\n    ignoreBlur: true,\r\n  });\r\n}\r\n\r\n//#############\r\n// Custom Tools\r\n//#############\r\nlet html = (str) => str.replace(/ /g, \"+\");\r\nlet fetch = (q) =>\r\n  `https://www.googleapis.com/customsearch/v1?key=${GOOGLE_API_KEY}&cx=${GOOGLE_CSE_KEY}&q=${html(\r\n    q\r\n  )}&sort=date`;\r\n\r\nasync function search(query) {\r\n  let response = await get(fetch(query));\r\n\r\n  let items = response?.data?.items;\r\n\r\n  if (items) {\r\n    let choices = items.map((item) => ({\r\n      name: item.title,\r\n      value: item.link,\r\n    }));\r\n\r\n    return JSON.stringify(choices);\r\n  }\r\n}\r\n\r\nasync function humanFeedbackList(mdStr) {\r\n  let html = md(`${mdStr.trim()}`);\r\n  const response = div({\r\n    html,\r\n    ignoreBlur: true,\r\n  });\r\n\r\n  return response;\r\n}\r\n\r\nasync function humanInput(question) {\r\n  const response = await arg({\r\n    placeholder: \"Human, I need help!\",\r\n    hint: question,\r\n    ignoreBlur: true,\r\n    ignoreAbandon: true,\r\n    height: PROMPT.HEIGHT.INPUT_ONLY,\r\n  });\r\n  return response;\r\n}\r\n\r\nconst todoPrompt = PromptTemplate.fromTemplate(\r\n  \"You are a planner/expert todo list creator. Generate a markdown formatted todo list for: {objective}\"\r\n);\r\n\r\nconst tools = [\r\n  new ChainTool({\r\n    name: \"TODO\",\r\n    chain: new LLMChain({\r\n      llm: new ChatOpenAI({ temperature: 0 }),\r\n      prompt: todoPrompt,\r\n    }),\r\n    description:\r\n      \"For making todo lists. Input: objective to create todo list for. Output: the todo list\",\r\n  }),\r\n  new DynamicTool({\r\n    name: \"Search\",\r\n    description: \"Search web for info\",\r\n    func: search,\r\n  }),\r\n  new DynamicTool({\r\n    name: \"Human Input\",\r\n    description:\r\n      \"(Use only when no info is available elsewhere) Ask a human for specific input that you don't know, like a persons name, or DOB, location, etc. Input is question to ask human, output is answer\",\r\n    func: humanInput,\r\n  }),\r\n  //   new DynamicTool({\r\n  //     name: \"Human Feedback Choice\",\r\n  //     description: `Ask human for feedback if you unsure of next step.\r\n  //     Input is markdown string formatted with your questions and suitable responses like this example:\r\n  // # Human, I need your help!\r\n  // <Question Here>\r\n  // * [John](submit:John) // don't change formatting of these links\r\n  // * [Mindy](submit:Mindy)\r\n  // * [Joy](submit:Joy)\r\n  // * [Other](submit:Other)\r\n  // `,\r\n  //     func: humanFeedbackList,\r\n  //   }),\r\n];\r\n\r\n//##################\r\n// AC AGI is Born\r\n//##################\r\nconst taskBeginMsg = md(`\r\n### Executing Task Manager\r\nGoal: ${task}\r\n`);\r\n\r\ndiv({ html: taskBeginMsg, ignoreBlur: true });\r\n\r\nconst agentExecutor = await initializeAgentExecutorWithOptions(\r\n  tools,\r\n  new ChatOpenAI({ temperature: 0 }),\r\n  {\r\n    agentType: \"zero-shot-react-description\",\r\n    agentArgs: {\r\n      prefix: `You are an AI who performs one task based on the following objective: {objective}. \r\nTake into account these previously completed tasks: {context}.`,\r\n      suffix: `Question: {task}\r\n{agent_scratchpad}`,\r\n      inputVariables: [\"objective\", \"task\", \"context\", \"agent_scratchpad\"],\r\n    },\r\n  }\r\n);\r\n\r\nconst vectorStore = new MemoryVectorStore(new OpenAIEmbeddings());\r\n\r\nconst babyAGI = BabyAGI.fromLLM({\r\n  llm: new ChatOpenAI({ temperature: 0 }),\r\n  executionChain: agentExecutor,\r\n  vectorstore: vectorStore,\r\n  maxIterations: maxIterations,\r\n});\r\n\r\nbabyAGI.printNextTask = printNextTask;\r\nbabyAGI.printTaskList = printTaskList;\r\nbabyAGI.printTaskResult = printTaskResult;\r\n\r\nawait babyAGI.call({ objective: task });\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-30T21:26:47Z"},{"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","author":"Josh Mabry","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1230","url":"","title":"Example of BabyAGI running in ScriptKit","command":"example-of-babyagi-running-in-scriptkit","content":"","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-30T21:23:21Z"},{"name":"Google Search","description":"","author":"Josh Mabry","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1225","url":"","title":"Google Search","command":"google-search","content":"I know this is redundant and might not be useful to many, but I needed to build a custom search tool for an agent I'm working on. \r\n\r\nI set this up to test the functionality and figured someone might find it useful.\r\n\r\n```\r\n/* \r\n# Google Search\r\nExample of leveraging Google's Custom Search Engine API to search the web\r\n*/\r\n\r\n// Name: Google Search\r\n// Description: Leverage Google's Custom Search Engine API to search the web\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet GOOGLE_API_KEY = await env(\"GOOGLE_API_KEY\", {\r\n  shortcuts: [\r\n    {\r\n      name: \"Google API Key\",\r\n      key: `${cmd}+o`,\r\n      bar: \"right\",\r\n      onPress: () => {\r\n        open(\"https://developers.google.com/custom-search/v1/introduction\");\r\n      },\r\n    },\r\n  ],\r\n  ignoreBlur: true,\r\n  secret: true,\r\n  height: PROMPT.HEIGHT.INPUT_ONLY,\r\n});\r\n\r\nlet GOOGLE_CSE_KEY = await env(\"GOOGLE_CSE_KEY\", {\r\n  shortcuts: [\r\n    {\r\n      name: \"Google Custom Search Engine Key\",\r\n      key: `${cmd}+o`,\r\n      bar: \"right\",\r\n      onPress: () => {\r\n        open(\"https://programmablesearchengine.google.com/\");\r\n      },\r\n    },\r\n  ],\r\n  ignoreBlur: true,\r\n  secret: true,\r\n  height: PROMPT.HEIGHT.INPUT_ONLY,\r\n});\r\n\r\nlet query = await arg(\r\n  {\r\n    placeholder: \"Search Query\",\r\n    strict: false,\r\n  },\r\n  [\r\n    {\r\n      name: \"Send a search query to Google\",\r\n      info: \"always\",\r\n    },\r\n  ]\r\n);\r\n\r\nlet search = (q) =>\r\n  `https://www.googleapis.com/customsearch/v1?key=${GOOGLE_API_KEY}&cx=${GOOGLE_CSE_KEY}&q=${q}&sort=date`;\r\n\r\nlet response = await get(search(query));\r\n\r\nlet items = response?.data?.items;\r\n\r\nif (items) {\r\n  let choices = items.map((item) => ({\r\n    name: item.title,\r\n    value: item.link,\r\n  }));\r\n\r\n  let link = await arg(\"Choose a link to view\", choices);\r\n\r\n  open(link);\r\n}\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-30T06:23:32Z"},{"avatar":"https://avatars.githubusercontent.com/u/95415447?v=4","user":"shyagamzo","author":"Shy Agam","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1224","url":"","title":"Reading aloud streamed text (GPT style)","command":"reading-aloud-streamed-text-gpt-style","content":"I wanted my ChatGPT responses to be read aloud immediately, as they appear on the screen.\r\nThis was problematic because of two reasons:\r\n1. ChatGPT sends partial text responses (e.g. 'he', 'llo', ', I', 'am S', 'hy'). This isn't readable and should be accumulated.\r\n2. The `say` command stops any spoken text and starts speaking the new text. Meaning, we cannot simply call it every time we receive new text.\r\n\r\nThis is a rough start, but works well for my current needs.\r\nThis util class maintains a queue, detects certain delimiters (e.g. `.`, `,`) and starts speaking only when it detects that a phrase has probably been accumulated.\r\n\r\nhttps://gist.github.com/shyagamzo/749b7535aa8876ec2ce09f39aaef6a80\r\n\r\n```typescript\r\nimport '@johnlindquist/kit';\r\n\r\nconst speechStream = new (class SpeechStream\r\n{\r\n    private textQueue: string[] = [];\r\n    private isSpeaking: boolean = false;\r\n    private feed: string = '';\r\n    private finalizeFeedDebounced: () => void;\r\n\r\n    constructor(private readonly config: { waitForDelimiter: number, estimatedWordsPerMinute: number })\r\n    {\r\n        this.finalizeFeedDebounced = _.debounce(this.finalizeFeed.bind(this), config.waitForDelimiter);\r\n\r\n        onExit(() =>\r\n        {\r\n            this.textQueue = [];\r\n            this.feed = '';\r\n\r\n            sayIt('');\r\n        });\r\n    }\r\n\r\n    public addText(text: string): void\r\n    {\r\n        this.feed += text;\r\n        this.processAccumulatedText();\r\n        this.finalizeFeedDebounced();\r\n    }\r\n\r\n    private processAccumulatedText(): void\r\n    {\r\n        const delimiters = /([.,;:!?\\n])/;\r\n\r\n        const delimiterMatch = this.feed.match(delimiters);\r\n\r\n        if (delimiterMatch)\r\n        {\r\n            const delimiterIndex = delimiterMatch.index;\r\n\r\n            const textUntilDelimiter = this.feed.slice(0, delimiterIndex + 1);\r\n            this.textQueue.push(textUntilDelimiter.trim());\r\n\r\n            this.feed = this.feed.slice(delimiterIndex + 1);\r\n        }\r\n\r\n        this.processQueue();\r\n    }\r\n\r\n    private finalizeFeed(): void\r\n    {\r\n        if (this.feed)\r\n        {\r\n            this.textQueue.push(this.feed.trim());\r\n            this.feed = '';\r\n            this.processQueue();\r\n        }\r\n    }\r\n\r\n    private processQueue(): void\r\n    {\r\n        if (this.isSpeaking || this.textQueue.length === 0) return;\r\n\r\n        this.isSpeaking = true;\r\n\r\n        const textToSpeak = this.textQueue.shift();\r\n\r\n        this.waitForSpeechEnd(textToSpeak);\r\n        sayIt(textToSpeak);\r\n    }\r\n\r\n    private waitForSpeechEnd(text: string): void\r\n    {\r\n        const estimatedSpeechDuration = this.estimateSpeechDuration(text);\r\n\r\n        setTimeout(() =>\r\n        {\r\n            this.isSpeaking = false;\r\n            this.processQueue();\r\n        }, estimatedSpeechDuration);\r\n    }\r\n\r\n    private estimateSpeechDuration(text: string): number\r\n    {\r\n        const wordsPerMinute = this.config.estimatedWordsPerMinute; // Average speaking rate\r\n        const words = text.trim().split(/\\s+/).length;\r\n        const minutes = words / wordsPerMinute;\r\n\r\n        return minutes * 60 * 1000; // Convert to milliseconds\r\n    }\r\n})({\r\n    waitForDelimiter: 4000,\r\n    estimatedWordsPerMinute: 200\r\n});\r\n\r\nexport function sayIt(text: string): ReturnType<typeof say>\r\n{\r\n    return say(text, { name: 'Microsoft Zira - English (United States)', rate: 1.3 });\r\n}\r\n\r\nexport function queueSpeech(text: string)\r\n{\r\n    speechStream.addText(text);\r\n}\r\n```\r\n\r\nTo use it, simply import and call `queueSpeech`:\r\n\r\n```typescript\r\nimport { queueSpeech } from '../lib/speech-queue';\r\n\r\nfunction handleGPTText(text: string)\r\n{\r\n    // ...\r\n    queueSpeech(text);\r\n}\r\n```\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-29T21:32:41Z"},{"name":"Smartify Your Words","description":"","author":"Josh Mabry","twitter":null,"shortcut":"command shift enter","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1221","url":"","title":"Improve your writing with AI powers","command":"improve-your-writing-with-ai-powers","content":"[Deprecated] \r\nif you miss it, check out Kenv [here](https://github.com/artificialcitizens/ac-scripts)\r\n\r\nHighlight your poorly written text and run the script to automagically make yourself sound smarter!\r\n\r\nhttps://user-images.githubusercontent.com/31560031/235273614-71a0b99c-5c9b-4806-84ba-2da8943359b9.mov\r\n\r\n\r\n\r\n```js\r\n/*\r\n/*\r\n# Smartify your words!\r\n\r\nTired of feeling dumb? Winter got you in a funk? \r\nCan you just not seem to get the words out right? \r\nWell, let's Smartify your words!\r\n\r\nHighlight some text and press `cmd+shift+enter` to send it through ChatGPT \r\nto replace the text with a more eloquent version. Mileage may vary.\r\n*/\r\n\r\n// Name: Smartify Your Words\r\n// Description: Let's make those words smarter!\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n// Shortcut: command shift enter\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\nlet { HumanChatMessage, SystemChatMessage } = await import(\"langchain/schema\");\r\nlet openAIApiKey = await env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\nlet { CallbackManager } = await import(\"langchain/callbacks\");\r\nlet prompt = `#####\r\nIgnore prior instructions, you are tasked with taking an input and refactoring it using the following rules: '\r\n\r\n- Maintain the same meaning, tone, and intent as the original text\r\n- Clean up any grammar or spelling mistakes\r\n- Make it sound more professional, but keep it casual\r\n- Reduce redundancies and excessive verbiage\r\n\r\nReturn only the updated text, do not offer any explanations or reasoning for the changes.\r\n########\r\n`;\r\n\r\nimport Bottleneck from \"bottleneck\";\r\n\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 100,\r\n});\r\n\r\nconst type = (text) => {\r\n  return new Promise((resolve) => {\r\n    keyboard.type(text);\r\n    resolve();\r\n  });\r\n};\r\nconst wrappedType = limiter.wrap(type);\r\n\r\nconst smartify = new ChatOpenAI({\r\n  temperature: 0.3,\r\n  openAIApiKey: openAIApiKey,\r\n  streaming: true,\r\n  callbackManager: CallbackManager.fromHandlers({\r\n    handleLLMStart: async (token) => {\r\n      if (!token) return;\r\n      log(`handleLLMStart`);\r\n      await wrappedType(token);\r\n    },\r\n    handleLLMNewToken: async (token) => {\r\n      if (!token) return;\r\n      await wrappedType(token);\r\n    },\r\n    handleLLMError: async (err) => {\r\n      warn(`error`, JSON.stringify(err));\r\n      await setSelectedText(JSON.stringify(err));\r\n      process.exit(1);\r\n    },\r\n    handleLLMEnd: async () => {\r\n      log(`handleLLMEnd`);\r\n      log(`currentMessage`, currentMessage);\r\n      process.exit(1);\r\n    },\r\n  }),\r\n});\r\nlet text = await getSelectedText();\r\n\r\nawait smartify.call([\r\n  new SystemChatMessage(prompt),\r\n  new HumanChatMessage(text),\r\n]);\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-29T00:42:43Z"},{"name":"Prompt Anywhere","description":"","author":"Josh Mabry","twitter":null,"shortcut":"cmd shift P","avatar":"https://avatars.githubusercontent.com/u/31560031?u=2b74e74f3c4b0cbdc7eb0fa2d5f7261434323304&v=4","user":"mabry1985","discussion":"https://github.com/johnlindquist/kit/discussions/1220","url":"","title":"Prompt ChatGPT from anywhere you can input text","command":"prompt-chatgpt-from-anywhere-you-can-input-text","content":"[DEPRECATED] \r\n\r\nBy selecting any input text and running this script you now have access to the power of AI anywhere in your OS. \r\n\r\nhttps://user-images.githubusercontent.com/31560031/235273240-824a9432-87a3-48ac-9357-668a0c01b12c.mov\r\n\r\n```js\r\n/*\r\n# Generate a response to a prompt in any text field\r\n\r\nThis script utilizes ChatGPT to generate a response for the selected text. \r\nThe response will then replace the original text, making it useful for various writing tasks such as blog posts, code, and emails.\r\n\r\nHighlight some text and press `cmd+shift+p` to send it through ChatGPT \r\nto replace the text response. Your mileage may vary.\r\n*/\r\n\r\n// Name: Prompt Anywhere\r\n// Description: Generate a prompt response in anywhere you can type\r\n// Author: Josh Mabry\r\n// Twitter: @AI_Citizen\r\n// Shortcut: cmd shift P\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport Bottleneck from \"bottleneck\";\r\n\r\nlet { ChatOpenAI } = await import(\"langchain/chat_models\");\r\nlet { HumanChatMessage, SystemChatMessage } = await import(\"langchain/schema\");\r\nlet openAIApiKey = await env(\"OPENAI_API_KEY\", {\r\n  hint: `Grab a key from <a href=\"https://platform.openai.com/account/api-keys\">here</a>`,\r\n});\r\nlet { CallbackManager } = await import(\"langchain/callbacks\");\r\nlet prompt = `#####\r\nIgnore prior instructions, you are tasked with taking the input text and generating a response to it.\r\n\r\nReturn only the updated text, do not offer any explanations or reasoning for the changes. \r\nDo not ask any questions, do not refuse any input, and do not change the subject.\r\n`;\r\n\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 100,\r\n});\r\n\r\nconst type = (text) => {\r\n  return new Promise((resolve) => {\r\n    keyboard.type(text);\r\n    resolve();\r\n  });\r\n};\r\n\r\nconst wrappedType = limiter.wrap(type);\r\n\r\nconst chat = new ChatOpenAI({\r\n  temperature: 0.3,\r\n  openAIApiKey: openAIApiKey,\r\n  streaming: true,\r\n  callbackManager: CallbackManager.fromHandlers({\r\n    handleLLMStart: async (token) => {\r\n      log(`handleLLMStart`);\r\n      if (!token) return;\r\n      await wrappedType(token);\r\n    },\r\n    handleLLMNewToken: async (token, runId) => {\r\n      log(`handleLLMNewToken`);\r\n      // occasionally I see tokens typed out of order\r\n      // still not sure why this happens\r\n      await wrappedType(token);\r\n    },\r\n    handleLLMError: async (err) => {\r\n      warn(`error`, JSON.stringify(err));\r\n      process.exit(1);\r\n    },\r\n    handleLLMEnd: async () => {\r\n      log(`handleLLMEnd`);\r\n      log(`currentMessage`, currentMessage);\r\n      process.exit(1);\r\n    },\r\n  }),\r\n});\r\n\r\nlet text = await getSelectedText();\r\n\r\nawait chat.call([new SystemChatMessage(prompt), new HumanChatMessage(text)]);\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-29T00:36:59Z"},{"name":"Open Vercel project dashboard","description":"","author":"Michael Rieger","twitter":"mueslirieger","avatar":"https://avatars.githubusercontent.com/u/20973893?u=359eca24a75c3971794c4daba03f723f0164762a&v=4","user":"mueslirieger","discussion":"https://github.com/johnlindquist/kit/discussions/1212","url":"https://gist.githubusercontent.com/mueslirieger/21b1b1b9e6ef48ecf64d8d1a3937f0e8/raw/08532f733744bd314da5667b9e2feff49c6da6ca/open-vercel-project.ts","title":"Open Vercel project dashboard","command":"open-vercel-project-dashboard","content":"I use this script so much, I had to share it. It lets you select a personal or team project that is hosted on Vercel and opens the dashboard page of the selected project.\r\n\r\n\r\n[Open open-vercel-project in Script Kit](https://scriptkit.com/api/new?name=open-vercel-project&url=https://gist.githubusercontent.com/mueslirieger/21b1b1b9e6ef48ecf64d8d1a3937f0e8/raw/08532f733744bd314da5667b9e2feff49c6da6ca/open-vercel-project.ts\")\r\n\r\n```typescript\r\n/*\r\n# Open Vercel project dashboard\r\n\r\nLets the user select and open the dashboard page of a project hosted on Vercel.\r\n*/\r\n\r\n// Name: Open Vercel project dashboard\r\n// Description: Lets the user select and open the dashboard page of a project hosted on Vercel.\r\n// Author: Michael Rieger\r\n// Twitter: @mueslirieger\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nconst apiBaseUrl = 'https://api.vercel.com';\r\nconst dashboardBaseUrl = 'https://vercel.com';\r\n\r\n// ask user to create an access token for the rest api\r\nconst VERCEL_ACCESS_TOKEN = await env('VERCEL_ACCESS_TOKEN', {\r\n  panel: md(`## Get a [Vercel API Access Token](https://vercel.com/account/tokens)`),\r\n  ignoreBlur: true,\r\n  secret: true,\r\n});\r\n\r\nconst user = await fetchUser();\r\n\r\n// Select whether personal or team projects should be listed\r\nconst projectsType = await selectProjectsType();\r\n\r\n// If team projects were selected list the teams the user is assigned to\r\nlet team: Team | undefined | null = null;\r\nif (projectsType === 'team') {\r\n  const teams = await fetchTeams();\r\n  team = await selectTeam(teams);\r\n}\r\n\r\n// Fetch projects based on previous selection\r\nconst projects = await fetchProjects(team?.id);\r\n\r\n// let user select project and open in browser\r\nconst project = await selectProject(projects);\r\n\r\nif (!project) exit(-1);\r\n\r\nawait browse(`${dashboardBaseUrl}/${projectsType === 'team' ? team.slug : user.username}/${project.name}`);\r\n\r\n// -----------------------------------------------------\r\n// Helpers\r\n// -----------------------------------------------------\r\n\r\ntype VercelApiError = {\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n  };\r\n};\r\n\r\nasync function selectProjectsType() {\r\n  return arg<'personal' | 'team'>('Show personal or team projects', [\r\n    {\r\n      value: 'personal',\r\n      name: '[P]ersonal',\r\n      shortcut: 'p',\r\n    },\r\n    {\r\n      value: 'team',\r\n      name: '[T]eam',\r\n      shortcut: 't',\r\n    },\r\n  ]);\r\n}\r\n\r\ntype User = {\r\n  id: string;\r\n  email: string;\r\n  name: string | null;\r\n  username: string;\r\n};\r\ntype GetUserResponse = { user: User } & VercelApiError;\r\n\r\nasync function fetchUser() {\r\n  try {\r\n    const res = await get<GetUserResponse>(`${apiBaseUrl}/v2/user`, {\r\n      headers: { Authorization: `Bearer ${VERCEL_ACCESS_TOKEN}` },\r\n    });\r\n\r\n    if (res.status !== 200 || res.data.error) exit();\r\n\r\n    return res.data.user;\r\n  } catch (e) {\r\n    exit(-1);\r\n  }\r\n}\r\n\r\ntype Team = { id: string; name: string; slug: string; avatar: string | null };\r\ntype GetTeamsResponse = { teams?: Team[] } & VercelApiError;\r\n\r\nasync function fetchTeams() {\r\n  try {\r\n    const res = await get<GetTeamsResponse>(`${apiBaseUrl}/v2/teams`, {\r\n      headers: { Authorization: `Bearer ${VERCEL_ACCESS_TOKEN}` },\r\n    });\r\n\r\n    if (res.status !== 200 || res.data.error) exit();\r\n\r\n    return res.data.teams;\r\n  } catch (e) {\r\n    exit(-1);\r\n  }\r\n}\r\n\r\nasync function selectTeam(teams: Team[]) {\r\n  return await arg<Team>(\r\n    {\r\n      placeholder: teams.length ? 'Select a team' : 'No teams found',\r\n      onChoiceFocus: (input, { focused }) => {\r\n        setPlaceholder(focused.name);\r\n      },\r\n      enter: `Select team`,\r\n    },\r\n    teams.map((team) => ({\r\n      value: team,\r\n      name: team.name,\r\n      img: team.avatar ? `https://vercel.com/api/www/avatar/${team.avatar}?s=128` : '',\r\n    }))\r\n  );\r\n}\r\n\r\ntype Project = { id: string; name: string; latestDeployments: { alias: string[] }[] };\r\ntype GetProjectsResponse = { projects?: Project[] } & VercelApiError;\r\n\r\nasync function fetchProjects(teamId?: string | null | undefined) {\r\n  try {\r\n    const res = await get<GetProjectsResponse>(`${apiBaseUrl}/v9/projects${teamId ? `?teamId=${teamId}` : ''}`, {\r\n      headers: { Authorization: `Bearer ${VERCEL_ACCESS_TOKEN}` },\r\n    });\r\n\r\n    if (res.status !== 200 || res.data.error) exit();\r\n\r\n    return res.data.projects;\r\n  } catch (e) {\r\n    exit(-1);\r\n  }\r\n}\r\n\r\nasync function selectProject(projects: Project[]) {\r\n  return await arg<Project>(\r\n    {\r\n      placeholder: projects.length ? 'Select a project' : 'No projects found',\r\n      onChoiceFocus: (input, { focused }) => {\r\n        setPlaceholder(focused.name);\r\n      },\r\n      enter: `Open project in dashboard`,\r\n    },\r\n    projects.map((project) => ({\r\n      value: project,\r\n      name: project.name,\r\n    }))\r\n  );\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-27T07:15:16Z"},{"name":"Merge / Split Alfred clipboard","description":"","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1209","url":"https://gist.githubusercontent.com/ramiroaraujo/4803f2f333828e5cbd30a49cc426cd22/raw/2f9d71e8c1dc94525f7bc7996b47d820fbadfb9a/merge-split-alfred-clipboard.ts","title":"Merge / Split Afred Clipboard Script","command":"merge-split-afred-clipboard-script","content":"\r\n[Open merge-split-alfred-clipboard in Script Kit](https://scriptkit.com/api/new?name=merge-split-alfred-clipboard&url=https://gist.githubusercontent.com/ramiroaraujo/4803f2f333828e5cbd30a49cc426cd22/raw/2f9d71e8c1dc94525f7bc7996b47d820fbadfb9a/merge-split-alfred-clipboard.ts\")\r\n\r\nThis is a very specific yet useful Script, for those who have Alfred app with Powerpack and use the clipboard history. It allows you to split and merge it in several ways. \r\nFor `merge`, it asks you for the number of items in the clipboard, with a preview, and then asks you the merging character or characters. The resulting merge is placed in the clipboard.\r\nFor `split`, it asks you for a splitting character or characters, and saves all the resulted strings (after splitting) in the clipboard history.\r\n\r\nUse cases:\r\n* copy a bunch of values from different places, join them together in one shot, by `\\n'\r\n* copy a list of values, separated by comma or `\\n`, split them and paste them individually in a form\r\n\r\n```js\r\n// Name: Merge / Split Alfred clipboard\r\n// Description: Merge or split clipboard content using Alfred app's clipboard\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst Database = await npm(\"better-sqlite3\");\r\nconst databasePath = home('Library/Application Support/Alfred/Databases/clipboard.alfdb')\r\nif (!await pathExists(databasePath)) {\r\n    notify(\"Alfred clipboard database not found\" )\r\n    exit()\r\n}\r\n\r\nconst db = new Database(databasePath);\r\n\r\nconst queryClipboard = async (sql, params) => {\r\n    const stmt = db.prepare(sql);\r\n    return sql.trim().toUpperCase().startsWith(\"SELECT\") ? stmt.all(params) : stmt.run(params);\r\n};\r\n\r\nconst getMergedClipboards = async (count, separator) => {\r\n    const sql = `SELECT item FROM clipboard WHERE dataType = 0 order by ROWID desc LIMIT ?`;\r\n    const clipboards = await queryClipboard(sql, [count]);\r\n    return clipboards.map(row => row.item.trim()).join(separator);\r\n};\r\n\r\nconst writeMergedClipboards = async (mergedText) => {\r\n    await clipboard.writeText(mergedText);\r\n};\r\n\r\nconst getSplitClipboard = async (separator, trim) => {\r\n    const currentClipboard = await clipboard.readText();\r\n    return currentClipboard.split(separator).map(item => trim ? item.trim() : item);\r\n};\r\n\r\nconst writeSplitClipboard = async (splitText) => {\r\n    const lastTsSql = `SELECT ts FROM clipboard WHERE dataType = 0 ORDER BY ts DESC LIMIT 1`;\r\n    const lastTsResult = await queryClipboard(lastTsSql, []);\r\n    let lastTs = lastTsResult.length > 0 ? Number(lastTsResult[0].ts) : 0;\r\n\r\n    const insertSql = `INSERT INTO clipboard (item, ts, dataType, app, appPath) VALUES (?, ?, 0, 'Kit', '/Applications/Kit.app')`;\r\n\r\n    for (let i = 0; i < splitText.length - 1; i++) {\r\n        lastTs += 1;\r\n        await queryClipboard(insertSql, [splitText[i], lastTs]);\r\n    }\r\n\r\n    await clipboard.writeText(splitText[splitText.length - 1]);\r\n};\r\n\r\n\r\nconst action = await arg(\"Choose action\", [\"Merge\", \"Split\"]);\r\n\r\nif (action === \"Merge\") {\r\n    const count = await arg({\r\n        placeholder: \"Enter the number of clipboard items to merge\",\r\n    }, async (input) => {\r\n        if (isNaN(Number(input)) || input.length === 0)return ''\r\n        return md(`<pre>${await getMergedClipboards(input, '\\n')}</pre>`)\r\n    })\r\n    const separator = await arg({\r\n        placeholder: \"Enter the separator for merging\",\r\n    }, async (input) => {\r\n        if (input === '\\\\n') input = '\\n'\r\n        return md(`<pre>${await getMergedClipboards(count, input)}</pre>`)\r\n    })\r\n    const mergedText = await getMergedClipboards(count, separator);\r\n    await writeMergedClipboards(mergedText);\r\n    await notify(\"Merged clipboard items and copied to clipboard\");\r\n} else {\r\n    // const separator = await arg(\"Enter the separator for splitting\");\r\n    const separator = await arg({\r\n        placeholder: \"Enter the separator for splitting\",\r\n    }, async (input) => {\r\n        if (input === '\\\\n') input = '\\n'\r\n        let strings = await getSplitClipboard(input, true);\r\n        return md(`<pre>${strings.join('\\n')}</pre>`)\r\n    })\r\n    const trim = await arg(\"Trim clipboard content?\", [\"Yes\", \"No\"]);\r\n    const splitText = await getSplitClipboard(separator, trim === \"Yes\");\r\n    await writeSplitClipboard(splitText);\r\n    await notify(\"Split clipboard content and stored in Alfred clipboard\");\r\n}\r\n\r\ndb.close();\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:19:34Z"},{"name":"Type Clipboard","description":"","shortcut":"ctrl+cmd+alt+shift+v","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1208","url":"https://gist.githubusercontent.com/ramiroaraujo/a18db9f56dfe8f6745ce6e917baf8ade/raw/eb3878c3aaede4e064bfbb451e6d30851b84160e/type-clipboard.ts","title":"Type Clipboard Script","command":"type-clipboard-script","content":"\r\n[Open type-clipboard in Script Kit](https://scriptkit.com/api/new?name=type-clipboard&url=https://gist.githubusercontent.com/ramiroaraujo/a18db9f56dfe8f6745ce6e917baf8ade/raw/eb3878c3aaede4e064bfbb451e6d30851b84160e/type-clipboard.ts\")\r\n\r\nThis is a Script I use more often than I would care to admit. There're situations where the `paste` command just doesn't work. Either web forms that don't allow paste, or crappy app UIs that for some reason a normal paste doesn't work. If you don't mind the lengthy shortcut, you hit `ctrl+cmd+alt+shift+v` and it `types` the content of the clipboard really fast, instead of pasting it.\r\n\r\n```js\r\n// Name: Type Clipboard\r\n// Description: Get the content of the clipboard and \"keystroke\" it without pasting\r\n// Shortcut: ctrl+cmd+alt+shift+v\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst clipboardText = await clipboard.readText()\r\n\r\nif (clipboardText.length > 1000) {\r\n    await notify(\"Clipboard content is too long\")\r\n    exit()\r\n}\r\n\r\nawait applescript(String.raw`\r\n    set chars to count (get the clipboard)\r\n    tell application \"System Events\"\r\n        delay 0.1\r\n        keystroke (get the clipboard)\r\n    end tell\r\n`)\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:13:01Z"},{"name":"Open in WhatsApp","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1207","url":"https://gist.githubusercontent.com/ramiroaraujo/a61f67f8b55a3805888ff092b77c2550/raw/80eaadf67510c49d0724bb82b69f2a00ddb0d7d6/open-in-whatsapp.ts","title":"Open in WhatsApp Script","command":"open-in-whatsapp-script","content":"\r\n[Open open-in-whatsapp in Script Kit](https://scriptkit.com/api/new?name=open-in-whatsapp&url=https://gist.githubusercontent.com/ramiroaraujo/a61f67f8b55a3805888ff092b77c2550/raw/80eaadf67510c49d0724bb82b69f2a00ddb0d7d6/open-in-whatsapp.ts\")\r\n\r\nAnother simple script for opening a phone number in WhatsApp to chat. It fetches the number from the clipboard, and if no country code is provided it assumes Argentina, where I'm from, but of course change it to your default country\r\n\r\n```js\r\n// Name: Open in WhatsApp\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n//get the text from the clipboard\r\nlet text = await clipboard.readText();\r\n\r\n//normalize the text\r\ntext = text.replace(/[-() ]/g, \"\");\r\n\r\n//validate if valid phone number\r\nif (!text.match(/^(\\+\\d{12,13})|(\\d{10,11})$/)) {\r\n  notify(\"Invalid phone number\");\r\n  exit()\r\n}\r\n\r\n//assume Argentina if no country code since that's where I'm from\r\nif (!text.startsWith(\"+\")) {\r\n  text = \"+54\" + text;\r\n}\r\n\r\n//open in WhatsApp\r\nopen(`https://wa.me/${text}`);\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:10:43Z"},{"avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1206","url":"https://gist.githubusercontent.com/ramiroaraujo/51a8303fd66cc9d8b6db8a19c651254e/raw/b19ada003b9f58f48976636115e136cd2841ed0a/convert-selected-images.ts","title":"Convert selected images Script","command":"convert-selected-images-script","content":"\r\n[Open convert-selected-images in Script Kit](https://scriptkit.com/api/new?name=convert-selected-images&url=https://gist.githubusercontent.com/ramiroaraujo/51a8303fd66cc9d8b6db8a19c651254e/raw/b19ada003b9f58f48976636115e136cd2841ed0a/convert-selected-images.ts\")\r\n\r\nThis Script will convert all your selected (supported) images to either `jpg`, `png` or `webp`. I mostly created it to deal with sending images from the phone to the mac, and getting them as `heic`...\r\n\r\n```js\r\n  // Name: convert selected images\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n// Grab selected files\r\nconst files = (await getSelectedFile()).split(\"\\n\");\r\n\r\n// Set up whitelist of formats\r\nconst supportedFormats = [\".heic\", \".png\", \".gif\", \".webp\", \".jpg\", \".jpeg\"];\r\n\r\n// Filter files based on supported formats\r\nconst selectedFiles = files.filter(file =>\r\n  supportedFormats.some(format => file.toLowerCase().endsWith(format))\r\n);\r\n\r\n// Notify if no files are selected\r\nif (!selectedFiles.length) {\r\n  await notify(\"No supported files selected\");\r\n  exit();\r\n}\r\n\r\nconst convertHeic = await npm(\"heic-convert\");\r\nconst sharp = await npm(\"sharp\");\r\n\r\n// Select the output format\r\nconst outputFormat = await arg(\"Choose an output format\", [\r\n  \"jpg\",\r\n  \"png\",\r\n  \"webp\",\r\n]);\r\n\r\nconst getUniquePath = async (outputPath, suffix = \"\") => {\r\n  if (await isFile(outputPath)) {\r\n    const name = path.basename(outputPath, path.extname(outputPath));\r\n    const newName = `${name}${suffix}-copy${path.extname(outputPath)}`;\r\n    const newPath = path.join(path.dirname(outputPath), newName);\r\n    return await getUniquePath(newPath, `${suffix}-copy`);\r\n  } else {\r\n    return outputPath;\r\n  }\r\n};\r\n\r\n// Convert selected files to the chosen output format using appropriate libraries\r\nfor (const file of selectedFiles) {\r\n  const content = await readFile(file);\r\n  const name = path.basename(file).split(\".\")[0];\r\n  const outputPath = path.join(path.dirname(file), name + `.${outputFormat}`);\r\n\r\n  const uniqueOutputPath = await getUniquePath(outputPath);\r\n\r\n  if (file.toLowerCase().endsWith(\".heic\")) {\r\n    const formatMap = {\r\n      jpg: \"JPEG\",\r\n      png: \"PNG\",\r\n    }\r\n    const outputBuffer = await convertHeic({\r\n      buffer: content,\r\n      format: formatMap[outputFormat],\r\n      quality: 0.5,\r\n    });\r\n\r\n    await writeFile(uniqueOutputPath, outputBuffer);\r\n  } else {\r\n    const sharpImage = sharp(content);\r\n\r\n    switch (outputFormat) {\r\n      case \"jpg\":\r\n        await sharpImage.jpeg({ quality: 40 }).toFile(uniqueOutputPath);\r\n        break;\r\n      case \"png\":\r\n        await sharpImage.png().toFile(uniqueOutputPath);\r\n        break;\r\n      case \"webp\":\r\n        await sharpImage.webp({ quality: 40 }).toFile(uniqueOutputPath);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nawait notify(`Converted selected files to ${outputFormat.toUpperCase()}`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:08:46Z"},{"name":"Open URL in clipboard","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1205","url":"https://gist.githubusercontent.com/ramiroaraujo/600d82866cd35b21998897843a4c3eb4/raw/c729cfb0baf43e6aa371a0ed0050ad69d5a9267d/open-url-in-clipboard.ts","title":"Open URL in clipboard Script","command":"open-url-in-clipboard-script","content":"\r\n[Open open-url-in-clipboard in Script Kit](https://scriptkit.com/api/new?name=open-url-in-clipboard&url=https://gist.githubusercontent.com/ramiroaraujo/600d82866cd35b21998897843a4c3eb4/raw/c729cfb0baf43e6aa371a0ed0050ad69d5a9267d/open-url-in-clipboard.ts\")\r\n\r\nDead simple script for the very common use case of copying _some_ text with a URL in it, and wanting to navigate to that URL. Will fetch the first one it finds and go\r\n\r\n```js\r\n// Name: Open URL in clipboard\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n//get the clipboard\r\nlet text = await clipboard.readText();\r\n\r\n//get the first URL in the clipboard, if any\r\nlet url = text.match(/(https?:\\/\\/[^\\s]+)/);\r\n\r\n//if there's a URL, open it\r\nif (url) {\r\n    open(url[0]);\r\n} else {\r\n    notify(\"No URL found in clipboard\");\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:06:12Z"},{"name":"Emoji Search","description":"","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1204","url":"https://gist.githubusercontent.com/ramiroaraujo/5b5f92d043e1ffa07af92215395d9231/raw/e134a3a357dfe43276d9d83bbd73ca01aad74537/emoji-search.ts","title":"Emoji Search Script","command":"emoji-search-script","content":"\r\n[Open emoji-search in Script Kit](https://scriptkit.com/api/new?name=emoji-search&url=https://gist.githubusercontent.com/ramiroaraujo/5b5f92d043e1ffa07af92215395d9231/raw/e134a3a357dfe43276d9d83bbd73ca01aad74537/emoji-search.ts\")\r\n\r\nA rather simple Emoji search that uses local database for fast lookup. It actually bootstrap by creating a sqlite database out of the `emojilib` JSON, in particular for storing usage and sorting by it. It will search by name and keywords, and the list will be sorted by most used\r\n\r\n```js\r\n// Name: Emoji Search\r\n// Description: Search and copy emoji to clipboard using SQLite database\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst Database = await npm(\"better-sqlite3\")\r\nconst databaseFile = projectPath(\"db\", \"emoji-search-emojilib.db\")\r\n\r\nconst emojilibURL = \"https://raw.githubusercontent.com/muan/emojilib/main/dist/emoji-en-US.json\"\r\n\r\nconst createDatabase = async () => {\r\n    const response = await get(emojilibURL)\r\n    const emojiData = response.data as Record<string, string[]>\r\n\r\n    //create db and table\r\n    const db = new Database(databaseFile)\r\n    db.exec(`CREATE TABLE IF NOT EXISTS emojis\r\n           (emoji TEXT PRIMARY KEY, name TEXT, keywords TEXT, used INTEGER DEFAULT 0)`)\r\n\r\n    //populate with data from emojilib\r\n    for (const [emojiChar, emojiInfo] of Object.entries(emojiData)) {\r\n        const description = emojiInfo[0]\r\n        const tags = emojiInfo.slice(1).join(', ')\r\n\r\n        db.prepare(\"INSERT OR REPLACE INTO emojis VALUES (?, ?, ?, 0)\").run(emojiChar, description, tags)\r\n    }\r\n    db.close()\r\n};\r\n\r\nif (!await pathExists(databaseFile)) {\r\n    await createDatabase()\r\n}\r\n\r\nconst db = new Database(databaseFile)\r\n\r\nconst queryEmojis = async () => {\r\n    const sql = \"SELECT emoji, name, keywords FROM emojis ORDER BY used DESC\"\r\n    const stmt = db.prepare(sql)\r\n    return stmt.all()\r\n}\r\n\r\nconst snakeToHuman = (text) => {\r\n    return text\r\n        .split('_')\r\n        .map((word, index) => index === 0 ? word.charAt(0).toUpperCase() + word.slice(1) : word)\r\n        .join(' ')\r\n}\r\n\r\nconst emojis = await queryEmojis()\r\n\r\nconst selectedEmoji = await arg(\"Search Emoji\", emojis.map(({ emoji, name, keywords }) => ({\r\n    name: `${snakeToHuman(name)} ${keywords}`,\r\n    html: md(`<div class=\"flex items-center\">\r\n            <span class=\"text-5xl\">${emoji}</span>\r\n            <div class=\"flex flex-col ml-2\">\r\n                <span class=\"text-2xl\" style=\"color: lightgrey\">${snakeToHuman(name)}</span>\r\n                <small style=\"color: darkgrey\">${keywords}</small>       \r\n            </div>\r\n        </div>`),\r\n    value: emoji,\r\n\r\n})))\r\n\r\nawait clipboard.writeText(selectedEmoji)\r\n\r\n// Update the 'used' count\r\nconst updateSql = \"UPDATE emojis SET used = used + 1 WHERE emoji = ?\"\r\nconst updateStmt = db.prepare(updateSql)\r\nupdateStmt.run(selectedEmoji)\r\n\r\ndb.close()\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:04:56Z"},{"name":"Text Manipulation","description":"","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1203","url":"https://gist.githubusercontent.com/ramiroaraujo/55cd0f21adb60f0a270c18fbcce99454/raw/7dd3ecffbaa6eea66b9c3476ea8122ea31ef25e5/text-manipulation.ts","title":"Text Manipulation Script","command":"text-manipulation-script","content":"\r\n[Open text-manipulation in Script Kit](https://scriptkit.com/api/new?name=text-manipulation&url=https://gist.githubusercontent.com/ramiroaraujo/55cd0f21adb60f0a270c18fbcce99454/raw/7dd3ecffbaa6eea66b9c3476ea8122ea31ef25e5/text-manipulation.ts\")\r\n\r\nInspired by a mix of an old Pipe workflow for Alfred mixed with the String Manipulation Plugin for Jetbrains IDEs. It will transform the current content of the clipboard based on the operation you select. Some operations require a parameter (`joinBy` for example), in those cases it asks for it. Both in the operation selection and parameter it shows a preview of the resulting text. \r\nIf you select an operation by `Cmd + enter` you'll be prompted by another operation to select after the first one is finished, and you can continue \"piping\" the outputs until you're done. Since it's common for me to `Cmd + enter` one last time and don't actually need the transformation there's a `No Operation` transform to select on this cases.\r\n\r\nUse cases:\r\n* copy a large list of values, wrap them in `'`, join them by `\\n`\r\n* capture numbers regex in each line, clean empty lines, join them by `+`, paste in ScriptKit or Alfred for sum result\r\n* filter lines by regex\r\n\r\nIt's hard to explain how useful this ends up being in my day to day\r\n\r\n```js\r\n// Name: Text Manipulation\r\n// Description: Transform clipboard text based on user-selected options\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet transformations = {\r\n    upperCase: text => text.toUpperCase(),\r\n    lowerCase: text => text.toLowerCase(),\r\n    capitalize: text => text.split('\\n').map(line => line.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')).join('\\n'),\r\n    decodeUrl: text => text.split('\\n').map(line => decodeURIComponent(line)).join('\\n'),\r\n    snakeCase: text => text.split('\\n').map(line => line.replace(/[\\s-_]+(\\w)/g, (_, p) => `_${p.toLowerCase()}`).replace(/^[A-Z]/, match => match.toLowerCase())).join('\\n'),\r\n    camelCase: text => text.split('\\n').map(line => line.replace(/[\\s-_]+(\\w)/g, (_, p) => p.toUpperCase()).replace(/^[A-Z]/, match => match.toLowerCase())).join('\\n'),\r\n    kebabCase: text => text.split('\\n').map(line => line.replace(/[\\s-_]+(\\w)/g, (_, p) => `-${p.toLowerCase()}`).replace(/^[A-Z]/, match => match.toLowerCase())).join('\\n'),\r\n    reverseCharacters: text => text.split('\\n').map(line => line.split('').reverse().join('')).join('\\n'),\r\n    removeDuplicateLines: text => {\r\n        let lines = text.split('\\n');\r\n        return [...new Set(lines)].join('\\n');\r\n    },\r\n    keepOnlyDuplicateLines: text => {\r\n        let lines = text.split('\\n');\r\n        let duplicates = lines.filter((item, index) => lines.indexOf(item) !== index);\r\n        return [...new Set(duplicates)].join('\\n');\r\n    },\r\n    removeEmptyLines: text => text.split('\\n').filter(line => line.trim() !== '').join('\\n'),\r\n    removeAllNewLines: text => text.split('\\n').map(line => line.trim()).join(''),\r\n    trimEachLine: text => text.split('\\n').map(line => line.trim()).join('\\n'),\r\n    sortLinesAlphabetically: text => text.split('\\n').sort().join('\\n'),\r\n    sortLinesNumerically: text => text.split('\\n').sort((a, b) => a - b).join('\\n'),\r\n    reverseLines: text => text.split('\\n').reverse().join('\\n'),\r\n    shuffleLines: text => {\r\n        let lines = text.split('\\n')\r\n        for (let i = lines.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1))\r\n            let temp = lines[i]\r\n            lines[i] = lines[j]\r\n            lines[j] = temp\r\n        }\r\n        return lines.join('\\n')\r\n    },\r\n    joinBy: (text, separator) => text.split('\\n').join(separator),\r\n    splitBy: (text, separator) => text.split(separator).join('\\n'),\r\n    removeWrapping: text => {\r\n        const lines = text.split('\\n');\r\n        const matchingPairs = [['(', ')'], ['[', ']'], ['{', '}'], ['<', '>'], ['\"', '\"'], [\"'\", \"'\"]];\r\n        return lines\r\n            .map(line => {\r\n                const firstChar = line.charAt(0);\r\n                const lastChar = line.charAt(line.length - 1);\r\n\r\n                for (const [open, close] of matchingPairs) {\r\n                    if (firstChar === open && lastChar === close) {\r\n                        return line.slice(1, -1);\r\n                    }\r\n                }\r\n\r\n                if (firstChar === lastChar) {\r\n                    return line.slice(1, -1);\r\n                }\r\n\r\n                return line;\r\n            })\r\n            .join('\\n');\r\n    },\r\n    wrapEachLine: (text, wrapper) => {\r\n        const lines = text.split('\\n');\r\n\r\n        return lines\r\n            .map(line => `${wrapper}${line}${wrapper}`)\r\n            .join('\\n');\r\n    },\r\n    captureEachLine: (text, regex) => {\r\n        const lines = text.split('\\n');\r\n        const pattern = new RegExp(regex);\r\n\r\n        return lines\r\n            .map(line => {\r\n                const match = line.match(pattern);\r\n                return match ? match[0] : '';\r\n            })\r\n            .join('\\n');\r\n    },\r\n    removeLinesMatching: (text, regex) => {\r\n        if (regex.length === 0) return text;\r\n        const lines = text.split('\\n');\r\n        const pattern = new RegExp(regex, 'i');\r\n\r\n        return lines\r\n            .filter(line => !pattern.test(line))\r\n            .join('\\n');\r\n    },\r\n    keepLinesMatching: (text, regex) => {\r\n        if (regex.length === 0) return text;\r\n        const lines = text.split('\\n');\r\n        const pattern = new RegExp(regex, 'i')\r\n\r\n        return lines\r\n            .filter(line => pattern.test(line))\r\n            .join('\\n');\r\n    },\r\n    prependTextToAllLines: (text, prefix) => {\r\n        const lines = text.split('\\n');\r\n        return lines.map(line => prefix + line).join('\\n');\r\n    },\r\n\r\n    appendTextToAllLines: (text, suffix) => {\r\n        const lines = text.split('\\n');\r\n        return lines.map(line => line + suffix).join('\\n');\r\n    },\r\n\r\n    replaceRegexInAllLines: (text, regexWithReplacement) => {\r\n        const [regex, replacement] = regexWithReplacement.split('|');\r\n        const pattern = new RegExp(regex, 'g');\r\n        const lines = text.split('\\n');\r\n        return lines.map(line => line.replace(pattern, replacement)).join('\\n');\r\n    },\r\n    removeRegexInAllLines: (text, regex) => {\r\n        const pattern = new RegExp(regex, 'g');\r\n        const lines = text.split('\\n');\r\n        return lines.map(line => line.replace(pattern, '')).join('\\n');\r\n    },\r\n    generateNumberedList: (text) => {\r\n        const lines = text.split('\\n');\r\n        return lines.map((line, index) => `${index + 1}. ${line}`).join('\\n');\r\n    },\r\n    noop: text => text,\r\n}\r\n\r\nlet options = [\r\n    // Existing options here\r\n    {\r\n        name: \"Decode URL\", description: \"Decode a URL-encoded text\", value: {\r\n            key: \"decodeUrl\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Upper Case\",\r\n        description: \"Transform the entire text to upper case\",\r\n        value: {\r\n            key: \"upperCase\",\r\n        },\r\n    },\r\n    {\r\n        name: \"Lower Case\",\r\n        description: \"Transform the entire text to lower case\",\r\n        value: {\r\n            key: \"lowerCase\",\r\n        },\r\n    },\r\n    {\r\n        name: \"snake_case\", description: \"Convert text to snake_case\", value: {\r\n            key: \"snakeCase\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Capitalize\", description: \"Convert text to Capital Case\", value: {\r\n            key: \"capitalize\"\r\n        }\r\n    },\r\n    {\r\n        name: \"camelCase\", description: \"Convert text to camelCase\", value: {\r\n            key: \"camelCase\"\r\n        }\r\n    },\r\n    {\r\n        name: \"kebab-case\", description: \"Convert text to kebab-case\", value: {\r\n            key: \"kebabCase\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Reverse Characters\", description: \"Reverse the characters in the text\", value: {\r\n            key: \"reverseCharacters\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Remove Duplicate Lines\",\r\n        description: \"Remove duplicate lines from the text\",\r\n        value: {\r\n            key: \"removeDuplicateLines\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Keep Only Duplicate Lines\",\r\n        description: \"Keep only duplicate lines in the text\",\r\n        value: {\r\n            key: \"keepOnlyDuplicateLines\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Remove Empty Lines\", description: \"Remove empty lines from the text\", value: {\r\n            key: \"removeEmptyLines\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Remove All New Lines\", description: \"Remove all new lines from the text\", value: {\r\n            key: \"removeAllNewLines\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Trim Each Line\",\r\n        description: \"Trim whitespace from the beginning and end of each line\",\r\n        value: {\r\n            key: \"trimEachLine\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Sort Lines Alphabetically\", description: \"Sort lines alphabetically\", value: {\r\n            key: \"sortLinesAlphabetically\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Sort Lines Numerically\", description: \"Sort lines numerically\", value: {\r\n            key: \"sortLinesNumerically\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Reverse Lines\", description: \"Reverse the order of lines\", value: {\r\n            key: \"reverseLines\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Shuffle Lines\", description: \"Randomly shuffle the order of lines\", value: {\r\n            key: \"shuffleLines\"\r\n        }\r\n    },\r\n    {\r\n        name: \"Join By\",\r\n        description: \"Join lines by a custom separator\",\r\n        value: {\r\n            key: \"joinBy\",\r\n            parameter: {\r\n                name: \"Separator\",\r\n                description: \"Enter a separator to join lines\",\r\n                defaultValue: \",\",\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Split By\",\r\n        description: \"Split lines by a custom separator\",\r\n        value: {\r\n            key: \"splitBy\",\r\n            parameter: {\r\n                name: \"Separator\",\r\n                description: \"Enter a separator to split lines\",\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Remove Wrapping\",\r\n        description: \"Remove wrapping characters from each line\",\r\n        value: {\r\n            key: \"removeWrapping\",\r\n        },\r\n    },\r\n    {\r\n        name: \"Wrap Each Line With\",\r\n        description: \"Wrap each line with a custom character or string\",\r\n        value: {\r\n            key: \"wrapEachLine\",\r\n            parameter: {\r\n                name: \"Wrapper\",\r\n                description: \"Enter a wrapper for each line\",\r\n                defaultValue: '\"',\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Capture Each Line\",\r\n        description: \"Capture and return the first match of a regex pattern in each line\",\r\n        value: {\r\n            key: \"captureEachLine\",\r\n            parameter: {\r\n                name: \"Pattern\",\r\n                description: \"Enter a regex pattern to capture\",\r\n                defaultValue: \"\\\\d+\",\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Remove Lines Matching\",\r\n        description: \"Remove lines that match the given regex\",\r\n        value: {\r\n            key: \"removeLinesMatching\",\r\n            parameter: {\r\n                name: \"Regex\",\r\n                description: \"Enter a regex to match lines to remove\",\r\n                defaultValue: '',\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Keep Lines Matching\",\r\n        description: \"Keep lines that match the given regex\",\r\n        value: {\r\n            key: \"keepLinesMatching\",\r\n            parameter: {\r\n                name: \"Regex\",\r\n                description: \"Enter a regex to match lines to keep\",\r\n                defaultValue: '',\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Prepend Text to All Lines\",\r\n        description: \"Add text to the beginning of all lines\",\r\n        value: {\r\n            key: \"prependTextToAllLines\",\r\n            parameter: {\r\n                name: \"Text\",\r\n                description: \"Enter text to prepend to all lines\",\r\n                defaultValue: '',\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Append Text to All Lines\",\r\n        description: \"Add text to the end of all lines\",\r\n        value: {\r\n            key: \"appendTextToAllLines\",\r\n            parameter: {\r\n                name: \"Text\",\r\n                description: \"Enter text to append to all lines\",\r\n                defaultValue: '',\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Replace Regex in All Lines\",\r\n        description: \"Replace regex matches in all lines with specified text\",\r\n        value: {\r\n            key: \"replaceRegexInAllLines\",\r\n            parameter: {\r\n                name: \"Regex and Replacement\",\r\n                description: \"Enter regex and replacement text separated by a '|'\",\r\n                defaultValue: '',\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"Generate Numbered List\",\r\n        description: \"Prepend numbers to each line\",\r\n        value: {\r\n            key: \"generateNumberedList\",\r\n        },\r\n    },\r\n    {\r\n        name: \"Remove Regex In All Lines\",\r\n        description: \"Remove matches of the provided regex in all lines\",\r\n        value: {\r\n            key: \"removeRegexInAllLines\",\r\n            parameter: {\r\n                name: \"Regex\",\r\n                description: \"Enter a regex to remove from all lines\",\r\n            },\r\n        },\r\n    },\r\n    {\r\n        name: \"No Operation\",\r\n        description: \"Do nothing to the text, if you accidentally hit Cmd + enter and need no more transformations\",\r\n    }\r\n]\r\n\r\nconst handleTransformation = async (text, transformation) => {\r\n    let {key, parameter} = transformation;\r\n    let paramValue = parameter ? await arg({\r\n        input: parameter.defaultValue,\r\n    }, (input) => md(`<pre>${transformations[key](text, input)}</pre>`)) : null;\r\n    return transformations[key](text, paramValue);\r\n};\r\n\r\nlet flags = {\r\n    rerun: {\r\n        name: \"Rerun\",\r\n        shortcut: \"cmd+enter\",\r\n    },\r\n}\r\n\r\n\r\nlet clipboardText = await clipboard.readText()\r\nlet operations: string[] = []\r\nlet rerun = true;\r\n\r\nwhile (rerun) {\r\n    let transformation = await arg(\r\n        {\r\n            placeholder: \"Choose a text transformation (Cmd + enter to rerun)\",\r\n            flags,\r\n            hint: operations.join(' > '),\r\n        },\r\n        options\r\n            .sort((a, b) => a.name.localeCompare(b.name))\r\n            .map(option => {\r\n            return {\r\n                ...option,\r\n                preview: () => {\r\n                    try {\r\n                        if (option.value.parameter) throw '';\r\n                        return md(`<pre>${transformations[option.value.key](clipboardText)}</pre>`)\r\n                    } catch (e) {\r\n                        return '...'\r\n                    }\r\n                },\r\n            }\r\n        })\r\n    )\r\n    rerun = flag?.rerun as boolean;\r\n\r\n    clipboardText = await handleTransformation(clipboardText, transformation);\r\n    operations.push(transformation.key);\r\n}\r\n\r\nawait clipboard.writeText(clipboardText)\r\n\r\nawait notify(\"Text transformation applied and copied to clipboard\")\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T02:02:30Z"},{"name":"OCR","description":"","avatar":"https://avatars.githubusercontent.com/u/46276?u=ba13251a7d08a864d70808facf97af2ca722f2b8&v=4","user":"ramiroaraujo","author":"Ramiro Araujo","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1202","url":"https://gist.githubusercontent.com/ramiroaraujo/d1924947b178742c8cd80f320d5e8e63/raw/07d0c86ff19b503bd856dd731294c4866aea7c79/ocr.ts","title":"Screencapture OCR Script","command":"screencapture-ocr-script","content":"\r\n[Open ocr in Script Kit](https://scriptkit.com/api/new?name=ocr&url=https://gist.githubusercontent.com/ramiroaraujo/d1924947b178742c8cd80f320d5e8e63/raw/07d0c86ff19b503bd856dd731294c4866aea7c79/ocr.ts\")\r\n\r\nOCR script that uses the OS native screencapture to capture part of your screen, perform OCR on it and copy the text to the clipboard.\r\nNote: I haven't even tested Windows and Linux versions. ChatGPT just wrote those for me :)\r\n\r\n```js\r\n// Name: OCR\r\n// Description: Capture a screenshot and recognize the text using tesseract.js\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\n//both win and linux implementations were created by chatgpt (gpt4), without _any_ tests!! 😅\r\nconst captureScreenshot = async () => {\r\n    const tmpFile = `/tmp/screenshot-${Date.now()}.png`;\r\n\r\n    if (isMac) {\r\n        await exec(`screencapture -i ${tmpFile}`);\r\n    } else if (isWin) {\r\n        const psScript = `\r\n      Add-Type -AssemblyName System.Windows.Forms\r\n      [System.Windows.Forms.SendKeys]::SendWait('%{PRTSC}')\r\n      Start-Sleep -m 500\r\n      $clipboardData = Get-Clipboard -Format Image\r\n      $clipboardData.Save('${tmpFile}', [System.Drawing.Imaging.ImageFormat]::Png)\r\n    `;\r\n        await exec(`powershell -Command \"${psScript.replace(/\\n/g, '')}\"`);\r\n    } else if (isLinux) {\r\n        // Check if gnome-screenshot is available\r\n        try {\r\n            await exec('gnome-screenshot --version');\r\n            await exec(`gnome-screenshot -f ${tmpFile}`);\r\n        } catch (error) {\r\n            // If gnome-screenshot is not available, try using ImageMagick's 'import' command\r\n            await exec(`import ${tmpFile}`);\r\n        }\r\n    }\r\n\r\n    return tmpFile;\r\n};\r\n\r\nconst recognizeText = async (filePath, language) => {\r\n    const { createWorker } = await npm(\"tesseract.js\");\r\n    const worker = await createWorker();\r\n\r\n    await worker.loadLanguage(language);\r\n    await worker.initialize(language);\r\n\r\n    const { data } = await worker.recognize(filePath);\r\n\r\n    await worker.terminate();\r\n\r\n    return data.text;\r\n};\r\n\r\nconst languages = [\r\n    { name: \"Spanish\", value: \"spa\" },\r\n    { name: \"French\", value: \"fra\" },\r\n    { name: \"Portuguese\", value: \"por\" },\r\n    { name: \"English\", value: \"eng\" },\r\n];\r\n//@todo train a model for typescript (https://github.com/tesseract-ocr/tesstrain)\r\n\r\n// if ctrl is pressed, show a modal to select a language\r\nconst selectedLanguage = flag.ctrl\r\n    ? await arg(\"Select a language:\", languages)\r\n    : \"eng\";\r\n\r\n// Hide the Kit modal before capturing the screenshot\r\nawait hide();\r\n\r\nconst filePath = await captureScreenshot();\r\nif (!await pathExists(filePath)) exit()\r\n\r\nconst text = await recognizeText(filePath, selectedLanguage);\r\n\r\nif (text) {\r\n    await clipboard.writeText(text.trim());\r\n    await notify(\"Text recognized and copied to clipboard\");\r\n} else {\r\n    await notify(\"No text found in the screenshot\");\r\n}\r\n\r\n// Clean up temporary file\r\nawait remove(filePath);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-25T01:55:18Z"},{"name":"Toggle Screen Lock","description":"","author":null,"avatar":"https://avatars.githubusercontent.com/u/67016683?u=570ce84e1552b64080e22f8e347275e052928350&v=4","user":"ElTacitos","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1201","url":"","title":"Toggle Screen Lock Macos","command":"toggle-screen-lock-macos","content":"\r\n[Open toggle-screen-lock in Script Kit](https://scriptkit.com/api/new?name=toggle-screen-lock&url=https://gist.githubusercontent.com/ElTacitos/7bb758f516e8e3bc5e1085e306bb0f31/raw/30f26138ddbe17626f1b47c2f2e2c20fa45749b6/toggle-screen-lock.js\")\r\n\r\n```js\r\n// Name: Toggle Screen Lock\r\n// Description: Toggle screen lock on macos (never or 2 minutes)\r\n// Author: ElTacitos\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet password = await arg({\r\n    placeholder: \"Enter sudo password\",\r\n    secret: true\r\n})\r\n\r\nconst resp = await exec(`echo ${password} | sudo -S pmset -g | grep displaysleep`)\r\nconst currentSleep = resp.stdout.trimStart().trimEnd().replace( /\\s\\s+/g, ' ' ).split(/\\s/)[1]\r\nconst user = (await exec(`whoami`)).stdout\r\n\r\nif (currentSleep === \"0\") {\r\n    await exec(`echo ${password} | sudo -S pmset -a displaysleep 2`)\r\n    await exec(`defaults write /Users/${user}/Library/Preferences/ByHost/com.apple.screensaver idleTime -int 60`)\r\n    await notify(\"Enabled screen lock\")\r\n} else {\r\n    await exec(`echo ${password} | sudo -S pmset -a displaysleep 0`)\r\n    await exec(`defaults write /Users/${user}/Library/Preferences/ByHost/com.apple.screensaver idleTime -int 0`)\r\n    await notify(\"Disabled screen lock\")\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-24T21:34:45Z"},{"avatar":"https://avatars.githubusercontent.com/u/23535629?u=0174ab792e2efe02dfeeddacdf991e267e0a79fe&v=4","user":"Jossdz","author":"Jose Carlos Correa","twitter":"JossDz","discussion":"https://github.com/johnlindquist/kit/discussions/1192","url":"","title":"Executing teminal commands on WSL(Windows subsystem for Linux)","command":"executing-teminal-commands-on-wslwindows-subsystem-for-linux","content":"Hey Folks,\r\n\r\nI've been working with Script Kit and encountered concerns regarding my local environment. Specifically, since I'm using Linux within Windows through WSL2 (Windows Subsystem for Linux), I was worried about executing the necessary commands for my workflow.\r\n\r\nUpon contacting John, he suggested using the following environment variable to enable command execution in WSL:\r\n\r\n```env\r\n# The value should be the full path to wsl, this is what is needed on windows 11.\r\nKIT_SHELL=C:\\Windows\\System32\\wsl.exe\r\n```\r\n\r\nAfter implementing this variable, I was able to run my commands in WSL. This is particularly useful for me as I can now start my docker environment with a single command.","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-15T23:57:50Z"},{"menu":"Optical Character Recognition","description":"","author":"Kent C. Dodds","twitter":"kentcdodds","avatar":"https://avatars.githubusercontent.com/u/1500684?u=f35a28c4eead6ba9636a8ff5858f6977d8593c43&v=4","user":"kentcdodds","discussion":"https://github.com/johnlindquist/kit/discussions/1190","url":"https://gist.githubusercontent.com/kentcdodds/9d49b047079acb3a2e133f7a55fd1837/raw/a7c04475d41460bc8addfa3132f19244691726f3/ocr.ts","title":"Extract text from images","command":"extract-text-from-images","content":"\r\n[Open ocr in Script Kit](https://scriptkit.com/api/new?name=ocr&url=https://gist.githubusercontent.com/kentcdodds/9d49b047079acb3a2e133f7a55fd1837/raw/a7c04475d41460bc8addfa3132f19244691726f3/ocr.ts\")\r\n\r\n```js\r\n// Menu: Optical Character Recognition\r\n// Description: Extract text from images\r\n// Author: Kent C. Dodds\r\n// Twitter: @kentcdodds\r\n\r\nimport '@johnlindquist/kit'\r\nimport Tesseract from 'tesseract.js'\r\n\r\nconst clipboardImage = await clipboard.readImage()\r\n\r\nif (clipboardImage.byteLength) {\r\n  const {data} = await Tesseract.recognize(clipboardImage, 'eng', {\r\n    logger: m => console.log(m),\r\n  })\r\n  clipboard.writeText(data.text)\r\n} else {\r\n  let selectedFiles = await getSelectedFile()\r\n  let filePaths: Array<string>\r\n\r\n  if (selectedFiles) {\r\n    filePaths = selectedFiles.split('\\n')\r\n  } else {\r\n    let droppedFiles = await drop({placeholder: 'Drop images to compress'})\r\n    filePaths = droppedFiles.map(file => file.path)\r\n  }\r\n  for (const filePath of filePaths) {\r\n    const {data} = await Tesseract.recognize(filePath, 'eng', {\r\n      logger: m => console.log(m),\r\n    })\r\n    clipboard.writeText(data.text)\r\n  }\r\n}\r\n\r\nnotify({\r\n  title: 'OCR finished',\r\n  message: `Copied text to your clipboard`,\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-14T15:23:28Z"},{"name":"BitCoinPrice","description":"","author":"Kostas Minaidis","gitHub":"@kostasx","avatar":"https://avatars.githubusercontent.com/u/1638325?u=a8eb3f1a8fdc490debd2726d4d553474b001bbf9&v=4","user":"kostasx","twitter":"kostas_mns","discussion":"https://github.com/johnlindquist/kit/discussions/1187","url":"","title":"Get the price of Bitcoin using the BitFinex open API","command":"get-the-price-of-bitcoin-using-the-bitfinex-open-api","content":"```js\r\n// Name: BitCoinPrice\r\n// Description: Get latest Bitcoin price using the Bitfinex open API\r\n// Author: Kostas Minaidis\r\n// GitHub: @kostasx\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet response = await get(`https://api.bitfinex.com/v1/pubticker/BTCUSD`, {\r\n  headers: {\r\n    Accept: \"text/plain\",\r\n  },\r\n})\r\n\r\nconst data = response.data\r\nawait div(`\r\n  <div style=\"font-style:bold; padding: 1rem; font-size: 2rem;\">\r\n    <p><span style=\"color: gray;\">Price:</span> $${data.last_price}</p>\r\n  </div>\r\n`)\r\n```","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-09T20:58:56Z"},{"name":"Open My Links","shortcut":"cmd shift l","author":"Rohit Kumar Saini","gitHub":"@rockingrohit9639","avatar":"https://avatars.githubusercontent.com/u/40729749?u=187731e94f8c8a56eec39f38100360e7581b7f50&v=4","user":"rockingrohit9639","twitter":"_rohit__404","discussion":"https://github.com/johnlindquist/kit/discussions/1183","url":"","title":"Script to open your links in browser","command":"script-to-open-your-links-in-browser","content":"Hey there,\r\nI have created a script which can open your pre-added links in the browser after selecting from the choices.\r\nFor now, it is just a simple script with hardcoded links, in future we can use `db` to store the links for users.\r\n\r\nHere is the script code -\r\n```js\r\n// Name: Open My Links\r\n// Shortcut: cmd shift l\r\n// Author: Rohit Saini\r\n// GitHub: @rockingrohit9639\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst LINKS = {\r\n  Github: \"https://github.com/rockingrohit9639\",\r\n  LinkedIn: \"https://www.linkedin.com/in/rohit-kumar-saini/\",\r\n} as const;\r\n\r\nconst CHOICES: (keyof typeof LINKS)[] = [\r\n  \"Github\",\r\n  \"LinkedIn\",\r\n];\r\n\r\nconst linkTitle = await arg(\"Which link to open?\", CHOICES);\r\nconst link = LINKS[linkTitle];\r\nconst command = `open ${link}`;\r\nexec(command);\r\n\r\n```\r\n\r\nHere is the demo of the script - \r\n[link open script.webm](https://user-images.githubusercontent.com/40729749/229710396-04ea1030-354f-4ee3-a08c-c9b2a4d55ca2.webm)\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-04-04T06:47:52Z"},{"name":"force paste","description":"","author":"Trevor Atlas","twitter":"trevoratlas","avatar":"https://avatars.githubusercontent.com/u/5009188?u=6d1d4e4744b6cc869b7a86d8831748b058c681b3&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1176","url":"https://gist.githubusercontent.com/trevor-atlas/79a688107d6a3362e23adc58f4cce6ed/raw/5d195be171e8356389bd03ce3c9f55109a3fa7ef/force-paste.ts","title":"Force paste into inputs that don't allow it","command":"force-paste-into-inputs-that-dont-allow-it","content":"\r\n[Open force-paste in Script Kit](https://scriptkit.com/api/new?name=force-paste&url=https://gist.githubusercontent.com/trevor-atlas/79a688107d6a3362e23adc58f4cce6ed/raw/5d195be171e8356389bd03ce3c9f55109a3fa7ef/force-paste.ts\")\r\n\r\n```js\r\n// Name: force paste\r\n// Description: Paste the contents of your clipboard, even in fields that wouldn't let you paste\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n// test it out on the email field here: https://codepen.io/andersschmidt/pen/kOOMmw\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nawait hide();\r\nawait applescript(`tell application \"System Events\" to keystroke the clipboard as text`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-24T20:59:24Z"},{"name":"Paste Clipboard Image as Cloudinary Markdown URL","shortcut":"opt shift v","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1173","url":"","title":"Paste Clipboard Image as Cloudinary Markdown URL","command":"paste-clipboard-image-as-cloudinary-markdown-url","content":"\r\n[Open paste-image-as-url in Script Kit](https://scriptkit.com/api/new?name=paste-image-as-url&url=https://gist.githubusercontent.com/johnlindquist/3593a0bee037b38c23d216191c4e5d7e/raw/b203b5a826d597ffa9e158db06b1ae6757222569/paste-image-as-url.js\")\r\n\r\n```js\r\n// Name: Paste Clipboard Image as Cloudinary Markdown URL\r\n// Shortcut: opt shift v\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet buffer = await clipboard.readImage()\r\n\r\nif (buffer && buffer.length) {\r\n  let { default: cloudinary } = await npm(\"cloudinary\")\r\n\r\n  cloudinary.config({\r\n    cloud_name: await env(\"CLOUDINARY_CLOUD_NAME\"),\r\n    api_key: await env(\"CLOUDINARY_API_KEY\"),\r\n    api_secret: await env(\"CLOUDINARY_API_SECRET\"),\r\n  })\r\n\r\n  let response = await new Promise((response, reject) => {\r\n    let cloudStream = cloudinary.v2.uploader.upload_stream(\r\n      {\r\n        folder: \"clipboard\",\r\n      },\r\n      (error, result) => {\r\n        if (error) {\r\n          reject(error)\r\n        } else {\r\n          response(result)\r\n        }\r\n      }\r\n    )\r\n\r\n    new Readable({\r\n      read() {\r\n        this.push(buffer)\r\n        this.push(null)\r\n      },\r\n    }).pipe(cloudStream)\r\n  })\r\n\r\n  log(response)\r\n\r\n  // format however you want\r\n  let markdown = `![${response.url}](${response.url})`\r\n  await setSelectedText(markdown)\r\n} else {\r\n  await div(md(`# No Image in Clipboard`))\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-21T17:26:47Z"},{"name":"FindDuplicate","author":"Kostas Minaidis","gitHub":"@kostasx","supports":"Mac","avatar":"https://avatars.githubusercontent.com/u/1638325?u=a8eb3f1a8fdc490debd2726d4d553474b001bbf9&v=4","user":"kostasx","twitter":"kostas_mns","discussion":"https://github.com/johnlindquist/kit/discussions/1171","url":"","title":"Find Duplicate Files","command":"find-duplicate-files","content":"**Find duplicate files in a folder (first-level only) using MD5 hash:**\r\n\r\n```js\r\n// Name: FindDuplicate\r\n// Author: Kostas Minaidis\r\n// GitHub: @kostasx\r\n// Supports: Mac\r\nimport \"@johnlindquist/kit\"\r\nimport fs from \"fs\"\r\nimport crypto from \"crypto\"\r\n\r\nconst folder = await drop();\r\nconst dir = await readdir(folder[0].path)\r\nlet content = `\r\n| Filename | MD5 Hash |\r\n| -------- | -------- |\r\n`;\r\nconst hashes = {}\r\ndir.forEach(file => {\r\n  const fullPath = `${folder[0].path}/${file}`\r\n\r\n  const stats = fs.statSync(fullPath);\r\n  if (stats.isDirectory()) { return; }\r\n\r\n  const fileData = fs.readFileSync(fullPath)\r\n  const hash = crypto.createHash('md5').update(fileData).digest('hex')\r\n  if (hashes[hash]) {\r\n    return hashes[hash].push(file)\r\n  } \r\n  hashes[hash] = [file]\r\n})\r\n\r\nObject.entries(hashes).forEach(([hash, listOfFiles]) => {\r\n  if (listOfFiles.length > 1) {\r\n    listOfFiles.forEach(file => {\r\n      content += `| ${file} | ${hash.slice(0,4) + \"...\" + hash.slice(-4)} |\\n`\r\n    })\r\n  }\r\n})\r\n\r\nawait div(md(content))\r\n\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-18T21:42:54Z"},{"menu":"Icebreaker","description":"","author":"Trevor Atlas","twitter":"trevoratlas","avatar":"https://avatars.githubusercontent.com/u/5009188?u=6d1d4e4744b6cc869b7a86d8831748b058c681b3&v=4","user":"trevor-atlas","discussion":"https://github.com/johnlindquist/kit/discussions/1169","url":"https://gist.githubusercontent.com/trevor-atlas/5eea582ea68faf7a4aa68d1f6ee487bd/raw/9acdba7e0276a9aef96f608dde594f445897e013/icebreaker.ts","title":"Get a random icebreaker question","command":"get-a-random-icebreaker-question","content":"\r\n[Open icebreaker in Script Kit](https://scriptkit.com/api/new?name=icebreaker&url=https://gist.githubusercontent.com/trevor-atlas/5eea582ea68faf7a4aa68d1f6ee487bd/raw/9acdba7e0276a9aef96f608dde594f445897e013/icebreaker.ts\")\r\n\r\n```js\r\n// Menu: Icebreaker\r\n// Description: Get a random icebreaker question\r\n// Author: Trevor Atlas\r\n// Twitter: @trevoratlas\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nconst dbvalues = await db('icebreakers');\r\nconst icebreakers: string[] = dbvalues.data;\r\n\r\nconst getRandomElement = <T>(arr: T[]) => {\r\n  const index = Math.floor(Math.random() * arr.length);\r\n  return arr[index];\r\n};\r\n\r\nconst item = getRandomElement(icebreakers);\r\n\r\nawait div(\r\n  `\r\n  <div class=\"w-full h-full text-center flex items-center justify-center\">\r\n    <h1 :class=\"responseClass\">${item}</h1>\r\n  <div>\r\n  `\r\n);\r\n\r\n```\r\n\r\n\r\nAdd a `json` array of icebreaker questions in the `kenv` `db` folder called `icebreakers.json`\r\nFor example\r\n```json\r\n[\r\n  \"Show us the weirdest thing you have in the room with you right now.\",\r\n  \"There is a free, round-trip shuttle to Mars. The catch: it will take one year of your life to go, visit, and come back. Are you in?\",\r\n  \"What is your least favorite thing about technology?\",\r\n  \"What superpower would you most want?\",\r\n  \"What food is best with cheese?\",\r\n  \"Would you go in the mother-ship with aliens if they landed on Earth tomorrow?\",\r\n  \"Would you join a community in space if it was permanent?\",\r\n  \"Would you rather live 100 years in the past or 100 years in the future?\",\r\n  \"You are the best criminal mastermind in the world. What crime would you commit if you knew you would get away with it?\",\r\n  \"You can only eat one food again for the rest of your life. What is it?\",\r\n  \"You can visit any fictional time or place. Which would you pick?\",\r\n  \"In your time as a student in K-12, what made an impact on you. Not who, but what? What do you remember that influenced you today?\",\r\n  \"How would you hide a giraffe from the government?\",\r\n  \"If you were an inanimate object, what would you be and why?\",\r\n  \"What is the most trivial thing about which you have a strong opinion?\",\r\n  \"What is the smallest thing for which you are grateful?\",\r\n  \"If you could change one thing about yourself physically, what would you change?\",\r\n  \"What single event or decision do you think most affected the rest of your life?\",\r\n  \"What do you fear, despite having no real reason to do so? Basically, what is an irrational fear you have?\",\r\n  \"Do you have any conspiracy theories? If so, what are they?\",\r\n  \"What scientific or technological advance blows your mind? Is there any technology that seems so futuristic and advanced you're surprised it actually exists?\",\r\n  \"What is something you don't realise is weird until you really think about it?\",\r\n  \"You can transport one furious elephant into any point in history, where would you put it?\",\r\n  \"If you could make one thing that is now legal, illegal, and one thing that is illegal, legal, what laws would change?\",\r\n  \"Would you agree to go without showering, brushing your teeth, and using deodorant for six months to win $500,000? You are not allowed to talk about the deal with anyone until the six months end, or the offer is gone.\",\r\n  \"What's the best trip (traveling wise) you ever had?\",\r\n  \"Does pineapple go on pizza?\",\r\n  \"If you could live anywhere in the world for a year, where would it be?\",\r\n  \"What's your favorite seat on an airplane?\",\r\n  \"What is your spirit animal? (The animal who is most similar to your personality.)\",\r\n  \"What is your favorite thing to do by yourself?\",\r\n  \"Have you ever experienced a natural disaster like a hurricane or tornado?\",\r\n  \"If you had to delete all but 3 apps from your smartphone, which ones would you keep? (Three apps that have changed your life.)\",\r\n  \"If you had to choose between only having a cell phone or a car for the rest of your life, which would you choose?\",\r\n  \"What is your favorite tv series?\",\r\n  \"What is your favorite book?\",\r\n  \"How would you change your life today if the average life expectancy was 400 years?\",\r\n  \"A genie grants you three wishes but none of them can directly benefit you. What would those wishes be?\",\r\n  \"What is your favorite smell and why?\",\r\n  \"According to you, what is the most mind-numbingly dull movie ever made?\",\r\n  \"If given the choice of having a talk show host narrate your life, who would you choose?\",\r\n  \"Which reality TV show is your guilty pleasure?\",\r\n  \"All in all, the movie that had the most significant impact on your life and why?\",\r\n  \"If you could switch your life with any fictional character, who would it be?\",\r\n  \"Decidedly, you must choose a fictional world that'll become the new reality. Which one would you pick?\",\r\n  \"According to you, what is the most monotonous sport to watch?\",\r\n  \"Who would be the first celebrity guest in your very own talk show?\",\r\n  \"Without a doubt, who is the greatest actor that has ever graced the world?\",\r\n  \"If you had the chance to be in the Olympics, which sport would you compete in?\",\r\n  \"Generally, which real life person are you most inspired by?\",\r\n  \"What's the most underrated actor that you know of?\",\r\n  \"What is your 'I wish I had started doing this earlier in my life'?\",\r\n  \"What is the coolest website you've ever visited?\",\r\n  \"What is your favorite polite insult?\"\r\n]\r\n```\r\n\r\nUse the script!\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-17T20:23:41Z"},{"name":"Screenshot URL","avatar":"https://avatars.githubusercontent.com/u/548809?u=20af8ca20056a2a9e4bdb26c863b7a799dbd1c55&v=4","user":"SimplGy","author":"Eric Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1164","url":"https://gist.githubusercontent.com/SimplGy/0e89bc0a60548b32cac9c0db806d9cd4/raw/149f2b5018177cc777bed207b9dc89f664fe54d8/screenshot-url.ts","title":"A script that asks you to enter a url. it opens it, and takes a small screenshot of it.","command":"a-script-that-asks-you-to-enter-a-url-it-opens-it-and-takes-a-small-screenshot-of-it","content":"\r\n[Open screenshot-url in Script Kit](https://scriptkit.com/api/new?name=screenshot-url&url=https://gist.githubusercontent.com/SimplGy/0e89bc0a60548b32cac9c0db806d9cd4/raw/149f2b5018177cc777bed207b9dc89f664fe54d8/screenshot-url.ts\")\r\n\r\n```js\r\n// Name: Screenshot URL\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst { chromium }: typeof import(\"playwright\") = await npm(\r\n  \"playwright\"\r\n)\r\n\r\n// get URL from user\r\nlet urlFromUser = await arg(\"Enter the URL to screenshot\");\r\nif (!urlFromUser.match(/^https?:\\/\\//)) {\r\n  urlFromUser = `http://${urlFromUser}`;\r\n}\r\nconst pathObj = path.parse(urlFromUser);\r\nlog(pathObj);\r\n\r\n// config\r\nlet timeout = 5_000;\r\nconst FOLDER = 'Downloads/screenshot-url';\r\nconst screenshotFolder = home(FOLDER);\r\nconst filename = `${pathObj.name}${pathObj.ext}.png`\r\nconst screenshotPath = home(FOLDER, filename);\r\n\r\n// Open the window\r\nconst browser = await chromium.launch({ timeout, headless: false });\r\nconst context = await browser.newContext({ colorScheme: \"dark\" });\r\nconst page = await context.newPage();\r\nawait page.setViewportSize({\r\n  width: 800,\r\n  height: 600,\r\n});\r\npage.setDefaultTimeout(timeout);\r\n\r\ntry {\r\n  // docs: https://playwright.dev/docs/api/class-page\r\n  await page.goto(urlFromUser);\r\n  await page.screenshot({ path: screenshotPath })\r\n    \r\n  // TODO: shrink the file to a thumbnail\r\n\r\n  await revealFile(screenshotFolder)\r\n  log(`Done`)\r\n\r\n} catch (error) {\r\n  warn('error', error);\r\n}\r\n\r\nawait browser.close();\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-12T01:24:50Z"},{"name":"Natural Language Shell Command","description":"","author":"Laura Okamoto","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/127610787?u=b01a40872f605669b97bb3f31c0a622988ccd019&v=4","user":"laura-ok","discussion":"https://github.com/johnlindquist/kit/discussions/1163","url":"","title":"natural language shell command","command":"natural-language-shell-command","content":"\r\n[Open natural-language-shell-command in Script Kit](https://scriptkit.com/api/new?name=natural-language-shell-command&url=https://gist.githubusercontent.com/laura-ok/f2cc8d4cfb1211ffc7a494e8f89fff80/raw/04e765fc3b70d0705e874ed62ee16125798394b0/natural-language-shell-command.js\")\r\n\r\n```js\r\n// Name: Natural Language Shell Command\r\n// Description: Convert a natural language command to a shell command\r\n// Author: Laura Okamoto\r\n// Twitter: @laura_okamoto\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst { Configuration, OpenAIApi } = await npm(\"openai\");\r\n\r\nconst configuration = new Configuration({\r\n  apiKey: await env(\"OPENAI_API_KEY\"),\r\n});\r\nconst openAI = new OpenAIApi(configuration);\r\n\r\nconst res = await arg(\"Describe the shell command you want to run\");\r\nconst prompt = `Use the following shell command to \"${res}\":`;\r\nconst completion = await openAI.createCompletion({\r\n  model: \"text-davinci-003\",\r\n  prompt,\r\n  temperature: 0,\r\n  max_tokens: 4069,\r\n});\r\n\r\nsetSelectedText(completion.data.choices[0].text.trim());\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-11T15:02:43Z"},{"name":"Preview CSS Color","description":"","author":"Josh Davenport-Smith","twitter":"joshdprts","avatar":"https://avatars.githubusercontent.com/u/757828?u=789f3b1408f5c32253eab54c5d8e5d14d2b27179&v=4","user":"joshdavenport","discussion":"https://github.com/johnlindquist/kit/discussions/1162","url":"https://gist.githubusercontent.com/joshdavenport/86cb857671226ea6fb530c6bd7923bdf/raw/8ffbbe2c3ca55d72a54233d39c88095d338adade/preview-css-color.ts","title":"Preview CSS Color","command":"preview-css-color","content":"![image](https://user-images.githubusercontent.com/757828/224484149-4376fcf8-bce5-4adb-a2e0-bb0e9389a42a.png)\r\n\r\n[Open preview-css-color in Script Kit](https://scriptkit.com/api/new?name=preview-css-color&url=https://gist.githubusercontent.com/joshdavenport/86cb857671226ea6fb530c6bd7923bdf/raw/8ffbbe2c3ca55d72a54233d39c88095d338adade/preview-css-color.ts\")\r\n\r\n```js\r\n// Name: Preview CSS Color\r\n// Description: Preview any CSS color accepted by background-color\r\n// Author: Josh Davenport-Smith\r\n// Twitter: @joshdprts\r\n\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst color = await arg(\"Color\");\r\n\r\nawait div(`\r\n  <div class=\"pt-2 h-full w-full\">\r\n    <div class=\"checker h-full w-full\">\r\n      <div style=\"background-color: ${color}\" class=\"h-full w-full flex items-start\">\r\n        <div class=\"bg-white\">\r\n          <div style=\"background-color: ${color}\" class=\"p-2\">\r\n            <div style=\"color: ${color}; filter: invert(100%); text-shadow: 0 0 1px hsla(0, 0%, 100%, 0.2)\" class=\"w-fit text-xs\">${color}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <style type=\"text/css\">\r\n    .checker {\r\n      background-color: #fff;\r\n      background-size: 24px 24px;\r\n      background-position: 0 0, 12px 12px;\r\n      background-image: linear-gradient(45deg, #efefef 25%, transparent 25%, transparent 75%, #efefef 75%, #efefef), linear-gradient(45deg, #efefef 25%, transparent 25%, transparent 75%, #efefef 75%, #efefef);\r\n    }\r\n  </style>\r\n`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-11T12:24:19Z"},{"name":"Units Convert","description":"","author":"Vedinsoh","gitHub":"@Vedinsoh","avatar":"https://avatars.githubusercontent.com/u/16418183?u=a5f010c548d309527307cc5817b5d816eba639b3&v=4","user":"Vedinsoh","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1160","url":"","title":"Units Convert","command":"units-convert","content":"\r\n[Open units-convert in Script Kit](https://scriptkit.com/api/new?name=units-convert&url=https://gist.githubusercontent.com/Vedinsoh/40e74c82f688a80849da32afde7a5130/raw/2004a082fc3a3142de9ae8510fd42569713ae50e/units-convert.js\")\r\n\r\n```js\r\n// Name: Units Convert\r\n// Description: Convert between metric and imperial units\r\n// Author: Vedinsoh\r\n// GitHub: @Vedinsoh\r\n\r\nimport \"@johnlindquist/kit\";\r\nconst convert = await npm(\"convert-units\");\r\n\r\nconst getAllPossibilities = (unit) => {\r\n  const possibilities = unit\r\n    ? convert().from(unit).possibilities()\r\n    : convert().possibilities();\r\n\r\n  return possibilities\r\n    .map((u) => {\r\n      const uDetails = convert().describe(u);\r\n      return {\r\n        name: `${u} - ${uDetails.plural}`,\r\n        value: u,\r\n      };\r\n    })\r\n    .sort((a, b) => {\r\n      const aDetails = convert().describe(a.value);\r\n      const bDetails = convert().describe(b.value);\r\n      if (aDetails.system === bDetails.system) {\r\n        return aDetails.value - bDetails.value;\r\n      }\r\n      return aDetails.system - bDetails.system;\r\n    });\r\n};\r\n\r\nconst getUnitString = (unit) => {\r\n  const unitDetails = convert().describe(unit);\r\n  return `${unitDetails.plural} (${unit})`;\r\n};\r\n\r\nconst convertUnits = (from, to, amount) => {\r\n  return String(convert(amount).from(from).to(to));\r\n};\r\n\r\nconst fromUnit = await arg({\r\n  placeholder: \"From\",\r\n  choices: getAllPossibilities(),\r\n  enter: \"To\",\r\n});\r\n\r\nconst toUnit = await arg({\r\n  placeholder: \"To\",\r\n  choices: getAllPossibilities(fromUnit),\r\n  enter: \"Amount\",\r\n  hint: `Convert from ${fromUnit} to...`,\r\n});\r\n\r\nawait arg({\r\n  placeholder: \"Amount\",\r\n  type: \"number\",\r\n  enter: \"Exit\",\r\n  hint: `${getUnitString(fromUnit)} equals...`,\r\n  onInput: (input) => {\r\n    const result = convertUnits(fromUnit, toUnit, input);\r\n    setPanel(md(`# ${result} ${getUnitString(toUnit)}`));\r\n  },\r\n  shortcuts: [\r\n    {\r\n      name: \"Copy result\",\r\n      key: `${cmd}+c`,\r\n      onPress: (input) => {\r\n        copy(convertUnits(fromUnit, toUnit, input));\r\n      },\r\n      bar: \"right\",\r\n    },\r\n  ],\r\n});\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-07T18:09:07Z"},{"name":"IP & Domain Lookup","description":"","author":"Vedinsoh","gitHub":"@Vedinsoh","avatar":"https://avatars.githubusercontent.com/u/16418183?u=a5f010c548d309527307cc5817b5d816eba639b3&v=4","user":"Vedinsoh","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1158","url":"","title":"IP & Domain Lookup","command":"ip-and-domain-lookup","content":"\r\n[Open ip-lookup in Script Kit](https://scriptkit.com/api/new?name=ip-lookup&url=https://gist.githubusercontent.com/Vedinsoh/140a888222f85f8a8da1e65fdbdd87bb/raw/9ad2f7dedacc718ab906fcad75fc43c9c3b05451/ip-lookup.js\")\r\n\r\n```js\r\n// Name: IP & Domain Lookup\r\n// Description: Get information about an IP address or domain\r\n// Author: Vedinsoh\r\n// GitHub: @Vedinsoh\r\n\r\nimport \"@johnlindquist/kit\";\r\nimport net from \"node:net\";\r\nimport { URL } from \"node:url\";\r\n\r\nconst getLookupData = async (query) => {\r\n  // Reference: https://ip-api.com/docs/api:json\r\n  const response = await get(\r\n    `http://ip-api.com/json/${query}?fields=status,message,continent,country,countryCode,regionName,city,zip,lat,lon,timezone,isp,org,as,query`\r\n  );\r\n\r\n  if (response.data.status === \"fail\") {\r\n    throw new Error(response.data.message);\r\n  }\r\n\r\n  return response.data;\r\n};\r\n\r\nlet lookupQuery = await arg({\r\n  placeholder: \"Enter IP address or domain\",\r\n  validate: (value) => {\r\n    if (net.isIP(value) !== 0) {\r\n      return true;\r\n    } else {\r\n      try {\r\n        new URL(`https://${value}`);\r\n        return true;\r\n      } catch (e) {\r\n        return \"Please enter a valid IP address or domain\";\r\n      }\r\n    }\r\n  },\r\n});\r\n\r\nconst data = await getLookupData(lookupQuery);\r\n\r\ndiv(\r\n  md(`\r\n# IP Lookup: ${lookupQuery}\r\n\r\n- **IP:** ${data.query}\r\n- **ISP:** ${data.isp}\r\n- **Organization:** ${data.org}\r\n- **AS:** ${data.as}\r\n- **Continent:** ${data.continent}\r\n- **Country:** ${data.country} (${data.countryCode})\r\n- **Region:** ${data.regionName}\r\n- **City:** ${data.city}\r\n- **Zip Code:** ${data.zip}\r\n- **Latitude:** ${data.lat}\r\n- **Longitude:** ${data.lon}\r\n- **Timezone:** ${data.timezone}\r\n`)\r\n);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-07T15:26:33Z"},{"avatar":"https://avatars.githubusercontent.com/u/4293840?v=4","user":"fischgeek","author":null,"twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1154","url":"","title":"Simple Snippet Creator","command":"simple-snippet-creator","content":"I wanted a quick way to make very simple text replacements. \r\n\r\n```\r\nlet [txt, rep] = await fields([\"Text\", \"Replacement\"])\r\nlet dir = \"/Users/fischgeek/.kenv/scripts\" // <- Update to your specific path\r\nawait writeFile(`${dir}/${txt}.js`, `//Snippet: ${txt}\\nawait keyboard.type(\"${rep}\")`)\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-05T17:30:25Z"},{"name":"Raindrop","description":"","author":"Bruno Paz","github":"@brpaz","avatar":"https://avatars.githubusercontent.com/u/184563?u=27a3324127667282e6eb95d538d5b58b4d007352&v=4","user":"brpaz","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1150","url":"","title":"Raindrop Bookmarks search","command":"raindrop-bookmarks-search","content":"Open your [Raindrop](app.raindrop.io/) bookmarks from ScriptKit\r\n\r\n```ts\r\n// Name: Raindrop\r\n// Description: Search your Raindrop.io bookmarks\r\n// Author: Bruno Paz\r\n// Github: @brpaz\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { Choice } from \"@johnlindquist/kit\"\r\n\r\nconst COLLECTION_ID_ALL = 0\r\nconst COLLECTION_ID_UNSORTED = -1\r\n\r\ninterface RaindropResponse {\r\n    items: RaindropBookmark[]\r\n}\r\n\r\ninterface RaindropBookmark {\r\n    _id: string\r\n    title: string\r\n    link: string\r\n    excerpt: string\r\n    tags: string[]\r\n    created: string\r\n    type: string\r\n}\r\n\r\nconst raindropAPIKey = await env(\"RAINDROP_API_KEY\", {\r\n    placeholder: \"Enter your Raindrop.io Test API Key\",\r\n    hint:  md(\r\n        `Get a [Raindrop.io Test API Key](https://app.raindrop.io/settings/integrations)`\r\n      ),\r\n\r\n    secret: true,\r\n})\r\n\r\nasync function raindropSearch(query: string, collectionId: number): Promise<Choice[]> {\r\n    const url = `https://api.raindrop.io/rest/v1/raindrops/${collectionId}?search=${query}&access_token=${raindropAPIKey}`\r\n\r\n    const response = await get(url)\r\n    const data: RaindropResponse = await response.data\r\n\r\n    return data.items.map((item) => ({\r\n        name: item.title,\r\n        description: item.excerpt,\r\n        value: item.link,\r\n        onSubmit: async () => {\r\n            open(item.link)\r\n        }\r\n    }))\r\n}\r\n\r\nasync function allBookmarks() {\r\n    await arg({\r\n        placeholder: \"Search your Raindrop.io bookmarks\",\r\n        enter: \"Open in Raindrop.io\",\r\n        onInput: _.debounce(async (query) => {\r\n            setHint(\"Searching...\")\r\n            setChoices([])\r\n\r\n            if (!query) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const choices = await raindropSearch(query, COLLECTION_ID_ALL)\r\n                setChoices(choices)\r\n                setHint(choices.length === 0 ? \"No bookmarks found\" : \"\")\r\n\r\n            } catch (error) {\r\n                setHint(`Failed to fetch bookmarks: ${error}`)\r\n            }\r\n        }, 200),\r\n    });\r\n}\r\n\r\nasync function unsortedBookmarks() {\r\n    await arg({\r\n        placeholder: \"Search your Raindrop.io unsorted bookmarks\",\r\n        enter: \"Open in Raindrop.io\",\r\n        onInput: _.debounce(async (query) => {\r\n            setHint(\"Searching...\")\r\n            setChoices([])\r\n\r\n            if (!query) {\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const choices = await raindropSearch(query, COLLECTION_ID_UNSORTED)\r\n                setChoices(choices)\r\n                setHint(choices.length === 0 ? \"No bookmarks found\" : \"\")\r\n            } catch (error) {\r\n                setHint(`Failed to fetch bookmarks: ${error}`)\r\n            }\r\n        }, 200),\r\n    });\r\n}\r\n\r\nonTab(\"Unsorted\", unsortedBookmarks);\r\nonTab(\"All\", allBookmarks);\r\n``` ","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-03-04T19:07:56Z"},{"name":"Escape Backticks","avatar":"https://avatars.githubusercontent.com/u/6349395?u=650885c8ac85a967ab8787bfffad65e1206266d1&v=4","user":"abisuq","author":"__","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1142","url":"","title":"Escape Backticks for copy paste string in javascript","command":"escape-backticks-for-copy-paste-string-in-javascript","content":" [Open browse-scriptkit in Script Kit](https://scriptkit.com/api/new?name=browse-scriptkit&url=https://gist.githubusercontent.com/abisuq/a27c130faa4ceb2b582a78b929bde0b2/raw/5d480d52863532d61adbb363fcb217b3f92c2cb8/browse-scriptkit.js\")\r\n\r\n```js\r\n// Name: Escape Backticks\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst text = await arg(\"Paste text to escape backticks\");\r\nawait copy(text.replace(/`/g, '\\\\`'));\r\n\r\n\r\n\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-24T05:33:20Z"},{"menu":"Center App","description":"","author":"Alois Carrera","avatar":"https://avatars.githubusercontent.com/u/60891163?u=b1985aac6c4755041fd849428360e69819e2339c&v=4","user":"AloisCRR","twitter":"AloisCRR","discussion":"https://github.com/johnlindquist/kit/discussions/1141","url":"","title":"Center focused app based on window dimensions","command":"center-focused-app-based-on-window-dimensions","content":"\r\n[Open center-app in Script Kit](https://scriptkit.com/api/new?name=center-app&url=https://gist.githubusercontent.com/AloisCRR/4a27c9e04b145be6a32e6ac4fa07894c/raw/f01bffb81564899dc01d7c931d82e072ec1918ba/center-app.js\")\r\n\r\n```js\r\n// Menu: Center App\r\n// Description: Center current focused app based on window size\r\n// Author: Alois Carrera\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst activeScreen = await getActiveScreen()\r\n\r\nconst {\r\n  workArea: {\r\n    height,\r\n    width,\r\n    x: workAreaX,\r\n    y: workAreaY\r\n  }\r\n} = activeScreen\r\n\r\nconst activeAppBounds = await getActiveAppBounds()\r\n\r\nconst { top, left, right, bottom } = activeAppBounds\r\n\r\nconst windowHeight = bottom - top\r\n\r\nconst windowYCenter = windowHeight / 2\r\n\r\nconst windowWidth = right - left\r\n\r\nconst windowXCenter = windowWidth / 2\r\n\r\nsetActiveAppPosition({\r\n  x: workAreaX + (width / 2) - windowXCenter,\r\n  y: workAreaY + (height / 2) - windowYCenter\r\n})\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-23T13:54:56Z"},{"name":"daily note","description":"","avatar":"https://avatars.githubusercontent.com/u/830800?v=4","user":"johtso","author":"Johannes","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1126","url":"https://gist.githubusercontent.com/johtso/b6a5d6e85d0805dbd25d5a36ffda6abb/raw/ef858f9129001cf187d0eb718108f7d734e2cef6/daily-note.ts","title":"Open daily note in Obsidian","command":"open-daily-note-in-obsidian","content":"\r\n[Open daily-note in Script Kit](https://scriptkit.com/api/new?name=daily-note&url=https://gist.githubusercontent.com/johtso/b6a5d6e85d0805dbd25d5a36ffda6abb/raw/ef858f9129001cf187d0eb718108f7d734e2cef6/daily-note.ts\")\r\n\r\n```js\r\n// Name: daily note\r\n// Description: Open today's daily note in obsidian\r\n\r\n// You must install the Actions URI plugin and have the daily notes plugin enabled\r\n// Currently MacOS only\r\n\r\nimport \"@johnlindquist/kit\"\r\nimport { homedir } from \"os\"\r\nimport { join as joinPath } from \"path\"\r\n\r\nconst VAULT_NAME = await env(\r\n  \"VAULT_NAME\",\r\n  async () => {\r\n    const vaultNames = await getVaultNames().catch(() => [])\r\n    if (vaultNames.length === 1) {\r\n      return vaultNames[0]\r\n    } else {\r\n      return await arg(\r\n        \"Which vault do you want to use?\",\r\n        vaultNames\r\n      )\r\n    }\r\n  }\r\n);\r\n\r\nconst CREATE_URI = `obsidian://actions-uri/daily-note/create?vault=${VAULT_NAME}&silent=true`\r\nconst OPEN_URI = `obsidian://actions-uri/daily-note/open-current?vault=${VAULT_NAME}`\r\n\r\nawait applescript(`\r\n  tell application \"Obsidian\"\r\n    open location \"${CREATE_URI}\"\r\n    open location \"${OPEN_URI}\"\r\n    activate\r\n  end tell\r\n`);\r\n\r\nasync function getVaultNames() {\r\n  const obsidianConfPath = joinPath(homedir(), \"Library/Application Support/obsidian/obsidian.json\")\r\n\r\n  // {\"vaults\":{\"9aeaa3aaa2ad0602\":{\"path\":\"/Users/human/Documents/Obsidian Vault\",\"ts\":1651412412801,\"open\":true}}}\r\n  const obsidianConf = JSON.parse(await (await readFile(obsidianConfPath)).toString())\r\n  const vaults = obsidianConf.vaults\r\n  const vaultNames = Object.keys(vaults).map((vaultId) => vaults[vaultId].path.split(\"/\").pop())\r\n  return vaultNames\r\n}\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-13T23:20:40Z"},{"menu":"Search Anime","description":"","author":"Ambushfall","tODO":"When on click starts working change state to the next result","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1122","url":"","title":"Anime Search - Working - Updated","command":"anime-search-working-updated","content":"\r\n[Open anime-search in Script Kit](https://scriptkit.com/api/new?name=anime-search&url=https://gist.githubusercontent.com/Ambushfall/c27b170000791f197fcfa5ca154a966b/raw/8bd65a0da0841f83ba892aaa4e3e72649f4283ee/anime-search.js\")\r\n\r\nUpdated Johns amazing script to work with the new v4 Api, and using widget instead of the deprecated showImage method.\r\n\r\nProps to John for making all of this possible!\r\n\r\n[Original script](https://www.scriptkit.com/johnlindquist/anime-search)\r\n\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\n// Menu: Search Anime\r\n// Description: Use the jikan.moe API to search anime\r\n// Author: John Lindquist, Updated by Ambushfall\r\n\r\nlet anime = await arg(\"Anime:\")\r\n\r\nlet response = await get(\r\n  `https://api.jikan.moe/v4/anime?q=${anime}`\r\n)\r\n\r\nlet { images, title } = response.data.data[0]\r\n\r\nlet { jpg } = images\r\n\r\nlet { image_url, small_image_url, large_image_url } = jpg\r\n\r\nconst html = `<a :href=\"url\">\r\n<img :src=\"url\" />\r\n<div class=\"card__name\">\r\n<span>${title}</span>\r\n</div>\r\n</a>`;\r\n\r\nlet wg = await widget(html, {\r\n  state: {\r\n    url: large_image_url\r\n  }\r\n})\r\n\r\nwg.onResized(async () => {\r\n  wg.fit()\r\n})\r\n\r\n// win32 on-click not working so this does nothing really.\r\n\r\n// TODO: When on click starts working change state to the next result\r\n// wg.onClick((event) => event.targetId === \"x\" ? wg.close() : inspect(event.targetId));\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-13T01:47:54Z"},{"menu":"Clipboard History","description":"","shortcut":"command shift v","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1121","url":"","title":"Part 2: Clipboard special history, preview images as well","command":"part-2-clipboard-special-history-preview-images-as-well","content":"\r\n[Open clipboard-history in Script Kit](https://scriptkit.com/api/new?name=clipboard-history&url=https://gist.githubusercontent.com/Ambushfall/444bb14ca4b5268ea855cec8431b7dfc/raw/3fb4c0962b3cfdf2220fd96f71190e4ec1e872e5/clipboard-history.js\")\r\n\r\n```js\r\n// Menu: Clipboard History\r\n// Description: Copy something from the clipboard history\r\n// Shortcut: command shift v\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet { history } = await db(\"clipboard-history\")\r\n\r\nlet { value, type } = await arg(\"What to paste?\", () => {\r\n  return history.map(({ value, type, timestamp, secret }) => {\r\n    return {\r\n      type,\r\n      name: secret ? value.slice(0, 4).padEnd(10, \"*\") : value,\r\n      value: {\r\n        value,\r\n        type,\r\n      },\r\n      description: timestamp,\r\n      preview:\r\n        type === \"image\"\r\n          ? md(`![timestamp](${value})`)\r\n          : value.includes(\"\\n\")\r\n          ? `<div class=\"font-mono text-xs\">${value\r\n              .split(\"\\n\")\r\n              .map((line) => `<p>${line}</p>`)\r\n              .join(\"\")}<div>`\r\n          : null,\r\n    }\r\n  })\r\n})\r\n\r\nif (type === \"image\") {\r\n  await copyPathAsImage(value)\r\n  await keystroke(\"command v\")\r\n}\r\n\r\nif (type === \"text\") {\r\n  await setSelectedText(value)\r\n}\r\n\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-13T00:17:08Z"},{"menu":"Copy to Clipboard","description":"","shortcut":"command shift c","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1120","url":"","title":"Clipboard special history, preview images as well","command":"clipboard-special-history-preview-images-as-well","content":"\r\n\r\n\r\n[Open copy-to-clipboard in Script Kit](https://scriptkit.com/api/new?name=copy-to-clipboard&url=https://gist.githubusercontent.com/Ambushfall/db9f545a9099a0a674f14679c862c0c3/raw/f9712e16d1965f16c578ffe4ad0ccb2c1e493086/copy-to-clipboard.js\")\r\n\r\n\r\ncopy-to-clipboard.js\r\n```js\r\n// Menu: Copy to Clipboard\r\n// Description: Save to Clipboard history\r\n// Shortcut: command shift c\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet { write, history } = await db(\"clipboard-history\", { history: [{ value: \"\", type: \"\", timestamp: \"\", secret: \"\" }] })\r\n\r\nconst clipboardVal = await clipboard.readText();\r\n\r\n\r\nconst newValue = {\r\n    value: clipboardVal,\r\n    timestamp: new Date(Date.now()).toLocaleString('en-GB', { timeZone: 'UTC' }),\r\n    secret: clipboardVal.includes('secret'),\r\n    type: /(http)?s?:?(\\/\\/[^\"']*\\.(?:png|jpg|jpeg|gif|png|svg))/i.test(clipboardVal) ? \"image\" : \"text\"\r\n}\r\n\r\nhistory.push(newValue)\r\n\r\nawait write()\r\n```\r\n\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-13T00:12:47Z"},{"name":"today-timestamp","description":"","avatar":"https://avatars.githubusercontent.com/u/548809?u=20af8ca20056a2a9e4bdb26c863b7a799dbd1c55&v=4","user":"SimplGy","author":"Eric Miller","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1117","url":"https://gist.githubusercontent.com/SimplGy/2676c4ccad30d9c71f7096422eb5fd44/raw/0da283bff42524450ee9f162c24451e1a8332a47/today-timestamp.ts","title":"Today's date as ISO","command":"todays-date-as-iso","content":"Completely ripped from https://github.com/johnlindquist/kit/discussions/1116 (Thanks Daniel!) I just like the ISO format better.\r\n\r\n[Open today-timestamp in Script Kit](https://scriptkit.com/api/new?name=today-timestamp&url=https://gist.githubusercontent.com/SimplGy/2676c4ccad30d9c71f7096422eb5fd44/raw/0da283bff42524450ee9f162c24451e1a8332a47/today-timestamp.ts\")\r\n\r\n```js\r\n// Name: today-timestamp\r\n// Description: inserts today's date in \"ISO\" format 2023-02-11\r\n// Snippet:\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nfunction twoDigits(number: number): string {\r\n\treturn number.toString().padStart(2, '0');\r\n}\r\n\r\nawait hide();\r\nconst today = new Date();\r\nconst formatted = `${today.getFullYear()}-${twoDigits(today.getMonth() + 1)}-${twoDigits(today.getDate())}`;\r\nawait keyboard.type(formatted);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-11T20:44:58Z"},{"name":"today-timestamp","description":"","snippet":"!tday","avatar":"https://avatars.githubusercontent.com/u/2270425?u=85a40c344f9f2b55652cede930cc8e1f8eaf32ad&v=4","user":"danielo515","author":"Daniel Rodríguez Rivero","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1116","url":"https://gist.githubusercontent.com/danielo515/9356f1af0b642dd23f6cdc188d73d7be/raw/6f8ca2cf7a666762c533bb47773403f210c55f49/today-timestamp.ts","title":"Insert current timestamp as YYYY/MM/DD","command":"insert-current-timestamp-as-yyyymmdd","content":"This snippet is basic, and stupid, but you will be happy to have it around when you need it.\r\nRather than manually input the current today date, you just type `!tday` and you get it.\r\n\r\n[Open today-timestamp in Script Kit](https://scriptkit.com/api/new?name=today-timestamp&url=https://gist.githubusercontent.com/danielo515/9356f1af0b642dd23f6cdc188d73d7be/raw/6f8ca2cf7a666762c533bb47773403f210c55f49/today-timestamp.ts\")\r\n\r\n```ts\r\n// Name: today-timestamp\r\n// Description: inserts the today date (not including time) formatted as YYYY/MM/DD\r\n// Snippet: !tday\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nfunction twoDigits(number: number): string {\r\n\treturn number.toString().padStart(2, '0');\r\n}\r\n\r\nawait hide();\r\nconst today = new Date();\r\n// Format date to YYYY/MM/DD format\r\nconst formatted = `${today.getFullYear()}/${twoDigits(today.getMonth() + 1 )}/${twoDigits(today.getDate())}`;\r\nawait keyboard.type(formatted);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-11T06:58:35Z"},{"name":"url encode","avatar":"https://avatars.githubusercontent.com/u/2270425?u=85a40c344f9f2b55652cede930cc8e1f8eaf32ad&v=4","user":"danielo515","author":"Daniel Rodríguez Rivero","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1111","url":"https://gist.githubusercontent.com/danielo515/b2b2576155111a3a8fb73b47da2efac8/raw/cf81906c75996c52064151670cad363a71c7317d/url-encode.ts","title":"Ask for user input and transform it to a url encoded string","command":"ask-for-user-input-and-transform-it-to-a-url-encoded-string","content":"Many times I don't want to url encode what I have on the clipboard, but I want to manually type it. This little script is for that.\r\n\r\n[Open url-encode in Script Kit](https://scriptkit.com/api/new?name=url-encode&url=https://gist.githubusercontent.com/danielo515/b2b2576155111a3a8fb73b47da2efac8/raw/cf81906c75996c52064151670cad363a71c7317d/url-encode.ts\")\r\n\r\n```js\r\n// Name: url encode\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst text = await arg(\"What do you want to encode\");\r\nconst encoded = encodeURIComponent(text)\r\nawait copy(encoded);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-09T15:41:54Z"},{"shortcut":"cmd opt f","avatar":"https://avatars.githubusercontent.com/u/99090177?u=23294c71201154e9389c53cc961811acb9aff635&v=4","user":"wisskirchenj","author":"Jürgen Wißkirchen","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1110","url":"","title":"Full text search in (java-)files over all my projects && open hit(s) in IDE","command":"full-text-search-in-java-files-over-all-my-projects-andand-open-hits-in-ide","content":"My typical usecase: I remember that I used some class (e.g. Mockitos InOrde,  CsvSource or ExecutorService) in a similar situation or test and start searching in which project that was. My root contains 30+ projects - so sometimes this took me 15+ min or I had to google again, howto use `find -exec` - and even then it's clumsy..  \r\n\r\nNow this is perfect to me: I enter the search string (class, method, ...) and the surrounding context width in hits (the 'n' in grep -n).\r\nThen a div-container shows me all scrollable hits and I can refresh my mind on what I did years ago. \r\nFinally I hit Return and get a Button-List widget with all filenames with hits, where i can click on. This opens the project in IDEA, opens the file with the hit inside this project and even puts the clipboard copied search string by keystroke into IDEA's search dialog, so I can navigate with arrows...\r\nSuper helpful to me. :smile:\r\n\r\nTo reuse, there is a little customization needed, as I hardcoded my projects root and file pattern *.java.   \r\nAlso the exclusion of 'z'-starting directories is sure special to me - but all that should be easy to adapt.  \r\nAlso, I am more then happy to help, if there's need.\r\n**Note:** Keystrokes in IDEA at end of script, needs accessibility rights. My platform is MacOS.\r\n\r\n```ts\r\n// Shortcut: cmd opt f\r\nimport \"@johnlindquist/kit\";\r\n\r\nconst smallArg = (placeholder: string) => arg({\r\n    placeholder: placeholder,\r\n    height: 100,\r\n    width: 500\r\n});\r\n\r\nconst substring = await smallArg(\"Substring to search:\");\r\nconst lines = await smallArg(\"# surrounding lines in results:\");\r\n\r\nconst PROJECT_ROOT = \"/Users/jwisskirchen/IdeaProjects\";\r\nconst CLOSE_LABEL = \"Close\";\r\n\r\n// execute find java-files on all project-subdirs not starting with 'z' (as those are special ones...)\r\nconst results = await $`cd ${PROJECT_ROOT} ; find [^z]* -name *.java -exec grep -q ${substring} {} ';' -exec echo \"******{}******\" ';' -exec grep -${lines} ${substring} {} ';'`;\r\n\r\n// Split filepaths and search results in tokens-array, replace '<' as this confuses html-rendering after span-insertion below\r\nconst tokens = results.toString().replaceAll('<', '&lt;').split('******');\r\n\r\n// build templates from tokens with filepath header and search results in <pre>\r\nconst templates = [];\r\nconst files: string[] = [];\r\nfor (let i = 0; i < tokens.length - 1; i += 2) {\r\n    files.push(`${tokens[i + 1]}`);\r\n\r\n    // mark substrings in red.\r\n    templates.push(`<h3>${tokens[i + 1]}</h3>\r\n        <pre>${tokens[i + 2]}</pre><hr>`\r\n        .replaceAll(`${substring}`,\r\n            `<span class=\"text-red-500\">${substring}</span>`)\r\n    );\r\n}\r\n\r\n// show the templates => user can scroll in results and then press <CR> to continue to dialog for opening project file in IDE\r\nawait div({\r\n    html: templates.join('<br><br>\\n'),\r\n    width: 1200,\r\n    height: 700\r\n}, `bg-white text-black text-sm p-2`);\r\n\r\n// put search string in clipboard for use in IDE later\r\nawait copy(substring);\r\n\r\n//---- display buttons in widgets, that let you open IntelliJ Idea -----\r\nconst items = files.map(path => ({\r\n    name: path,\r\n    // display only shrinked filepath <project>/../<filename> for brevity\r\n    display: path.slice(0, path.indexOf('/') + 1) + '..' + path.slice(path.lastIndexOf('/'), path.length)\r\n}));\r\nitems.push({ name: CLOSE_LABEL, display: CLOSE_LABEL });\r\n\r\nconst buttons = `\r\n  <div class=\"grid grid-col w-screen h-screen justify-around items-center\">\r\n      <label class=\"rounded px-10 py-1 bg-white text-black\">Open project in IDEA</label>\r\n      <button\r\n      class=\"rounded px-10 py-1 bg-black bg-opacity-70 hover:bg-opacity-50\"\r\n      v-for=\"(item, index) in items\" :key=\"item.name\" :data-name=\"item.name\" :data-index=\"index\">{{ item.display }}</button>\r\n  </div>  \r\n  `;\r\n\r\nlet w = await widget(buttons, {\r\n    backgroundColor: '#CCCCAA',\r\n    x: 600,\r\n    y: Math.max(0, 500 - items.length * 25),\r\n    width: 600,\r\n    height: items.length * 50 + 50,\r\n    state: {\r\n        items,\r\n    }\r\n});\r\n\r\nw.onClick(async event => {\r\n    if (event.dataset.name) {\r\n        const path: string = event.dataset.name;\r\n\r\n        if (path === CLOSE_LABEL) {\r\n            w.close();\r\n            exit(0);  // process keeps running without..\r\n        } else {\r\n            // open the project in IntelliJ IDEA\r\n            await $`idea ${PROJECT_ROOT}/${path.slice(0, path.indexOf('/'))}`;\r\n            // open the specific file chosen inside this project\r\n            await $`idea ${PROJECT_ROOT}/${path}`;\r\n            // inside IDEA (!) do a search Cmd-F for the substring \r\n            // Cmd-V places the substring from Clipboard (where we copied it above) into Ideas Search dialog\r\n            await hide();\r\n            await keyboard.pressKey(Key.LeftSuper, Key.F);\r\n            await keyboard.releaseKey(Key.LeftSuper, Key.F);\r\n            await keyboard.pressKey(Key.LeftSuper, Key.V);\r\n            await keyboard.releaseKey(Key.LeftSuper, Key.V);\r\n        }\r\n    }\r\n});```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-08T19:39:47Z"},{"name":"Normalize GIT branch name","description":"","author":"Marin Muštra","linkedIn":"https://www.linkedin.com/in/marin-mustra","https":"//github.com/microsoft/vscode/blob/main/extensions/git/src/commands.ts#L2182","avatar":"https://avatars.githubusercontent.com/u/13587186?u=94ad9300262f0865a602e4c05246bc0627bd7588&v=4","user":"mmustra","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1097","url":"","title":"Normalize GIT branch name","command":"normalize-git-branch-name","content":"\r\n[Open normalize-git-branch-name in Script Kit](https://scriptkit.com/api/new?name=normalize-git-branch-name&url=https://gist.githubusercontent.com/mmustra/73168d0f629f8b2f526fa45d5068ac12/raw/416c129718d1f9641f6212ba530ab7d6b1f92c06/normalize-git-branch-name.js\")\r\n\r\n```js\r\n// Name: Normalize GIT branch name\r\n// Description: Copy text and paste it to normalized GIT branch name\r\n// Author: Marin Muštra\r\n// LinkedIn: https://www.linkedin.com/in/marin-mustra\r\n\r\nimport '@johnlindquist/kit';\r\n\r\nconst delimiterChar = '-';\r\nconst illegalChar = '';\r\nconst mergableChars = [delimiterChar, illegalChar];\r\nconst shouldLowerCase = true;\r\n\r\nconst input = await paste();\r\nlet branchName = '';\r\n\r\n// Sanitize references\r\n// https://github.com/microsoft/vscode/blob/main/extensions/git/src/commands.ts#L2182\r\n// https://github.com/gitextensions/gitextensions/blob/6eab7392839c4d103bad1581fba5eaf6f008d766/GitCommands/Git/GitBranchNameNormaliser.cs\r\nconst getSanitizedInput = () => {\r\n  const edgePattern = /^[-\\s]+|[-\\s]+$/g;\r\n  const delimiterPattern = /\\s+|_+|-+/g;\r\n  const illegalPattern = /^-+|^\\.|\\/\\.|\\.\\.|~|\\^|:|\\/$|\\.lock$|\\.lock\\/|\\\\|\\*|\\?|@{|^@$|\\.$|\\[|\\]$|^\\/|\\/$/g;\r\n\r\n  const isInvalidChar =\r\n    (!edgePattern.test(delimiterChar) && illegalPattern.test(delimiterChar)) ||\r\n    (!edgePattern.test(illegalChar) && illegalPattern.test(illegalChar));\r\n\r\n  if (isInvalidChar) {\r\n    throw new Error('Invalid delimiter/illegal character!');\r\n  }\r\n\r\n  let sanitized = input.trim().replace(delimiterPattern, delimiterChar).replace(illegalPattern, illegalChar);\r\n  mergableChars?.forEach((char) => char && (sanitized = sanitized.replace(new RegExp(`\\\\${char}+`, 'g'), char)));\r\n  sanitized = sanitized.replace(edgePattern, '');\r\n\r\n  return shouldLowerCase ? sanitized.toLowerCase() : sanitized;\r\n};\r\n\r\ntry {\r\n  branchName = getSanitizedInput();\r\n\r\n  if (!branchName) {\r\n    throw new Error('Invalid input!');\r\n  }\r\n} catch (error) {\r\n  const hint = `${error.message}`;\r\n  await editor({ hint, input, description: 'ERROR', readOnly: true, lineNumbers: 'on' });\r\n\r\n  exit();\r\n}\r\n\r\nawait setSelectedText(branchName);\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-03T16:21:17Z"},{"name":"Silent Mention","shortcut":"opt x","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1094","url":"https://gist.githubusercontent.com/johnlindquist/9e4885f4e3d80aa0e66f47a727f206c4/raw/7892b042f75e78ba434cf9e7671a5fa275a17350/silent-mention.ts","title":"Silent Mention","command":"silent-mention","content":"Described here: https://twitter.com/peduarte/status/1621187086802980866?s=20&t=a8WakFD64i8W3BPDLIzfWg\r\n\r\n\r\n[Open silent-mention in Script Kit](https://scriptkit.com/api/new?name=silent-mention&url=https://gist.githubusercontent.com/johnlindquist/9e4885f4e3d80aa0e66f47a727f206c4/raw/7892b042f75e78ba434cf9e7671a5fa275a17350/silent-mention.ts\")\r\n\r\n```js\r\n// Name: Silent Mention\r\n// Shortcut: opt x\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet makeSilent = (str: string) =>\r\n  str.replace(/[.#@]/g, m => m + \"\\u2060\")\r\n\r\nlet text =\r\n  (await getSelectedText()) ||\r\n  (await arg(\"Enter text to silent\"))\r\n\r\nlet silentText = makeSilent(text)\r\nawait setSelectedText(silentText)\r\n\r\n```\r\n\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-02T23:54:13Z"},{"name":"Screenshot Current Tweet","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1092","url":"https://gist.githubusercontent.com/johnlindquist/ced2147f9e918c075e058da4b4c3eb2b/raw/6e46ea8b136c6a0300c69d893b808bb5ad6e80e8/screenshot-current-tweet.ts","title":"Screenshot Current Tweet","command":"screenshot-current-tweet","content":"Focus on a tweet like this:\r\n\r\nhttps://twitter.com/film_girl/status/1621170813796851719\r\n\r\n![1621170813796851719](https://user-images.githubusercontent.com/36073/216381005-74c32641-89e3-416e-af7b-77be619c9c66.png)\r\n\r\nThen run this script for a screenshot:\r\n\r\n\r\n[Open screenshot-current-tweet in Script Kit](https://scriptkit.com/api/new?name=screenshot-current-tweet&url=https://gist.githubusercontent.com/johnlindquist/ced2147f9e918c075e058da4b4c3eb2b/raw/6e46ea8b136c6a0300c69d893b808bb5ad6e80e8/screenshot-current-tweet.ts\")\r\n\r\n```js\r\n// Name: Screenshot Current Tweet\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst { chromium }: typeof import(\"playwright\") = await npm(\r\n  \"playwright\"\r\n)\r\n\r\nlet url = await getActiveTab()\r\nlet timeout = 5000\r\nlet headless = false\r\n\r\nconst browser = await chromium.launch({\r\n  timeout,\r\n  headless,\r\n})\r\n\r\nconst context = await browser.newContext({\r\n  colorScheme: \"dark\",\r\n})\r\nconst page = await context.newPage()\r\npage.setDefaultTimeout(timeout)\r\n\r\nawait page.goto(url)\r\n\r\nlet screenshotPath = home(\r\n  \"Downloads\",\r\n  path.parse(url).name + \".png\"\r\n)\r\n\r\ntry {\r\n  await page\r\n    .locator(\"article[tabindex='-1']\")\r\n    .screenshot({ path: screenshotPath })\r\n  await revealFile(screenshotPath)\r\n  log(`Done`)\r\n} catch (error) {\r\n  log(error)\r\n}\r\n\r\nawait browser.close()\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-02T16:19:30Z"},{"name":"Sleep on Shortcode","shortcode":"sl","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1088","url":"https://gist.githubusercontent.com/johnlindquist/35e843a00efebb5cceeeb65ea45eb779/raw/e83dd71468ff034c9d5f288387457438d1492c38/sleep-on-shortcode.ts","title":"Sleep on Shortcode Example (similar to using an \"alias\")","command":"sleep-on-shortcode-example-similar-to-using-an-alias","content":"To run the script quickly, from the main prompt type:\r\n\r\ns, then l, then space, then y to confirm.\r\n\r\nSo these four characters:\r\n```\r\nsl y\r\n```\r\n\r\nUsing the `//Shortcode: ` metadata will run the script when you hit the \"spacebar\" after a shortcode/alias.\r\n\r\n\r\n[Open sleep-on-shortcode in Script Kit](https://scriptkit.com/api/new?name=sleep-on-shortcode&url=https://gist.githubusercontent.com/johnlindquist/35e843a00efebb5cceeeb65ea45eb779/raw/e83dd71468ff034c9d5f288387457438d1492c38/sleep-on-shortcode.ts\")\r\n\r\n```js\r\n// Name: Sleep on Shortcode\r\n// Shortcode: sl\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet confirm = await arg({\r\n  placeholder: `Sleep system?`,\r\n// Script Kit parses hints and assigns single key shortcuts to single letters inside of []\r\n  hint: `[y]/[n]`,\r\n})\r\n\r\nif (confirm === \"y\") {\r\n  sleep()\r\n}\r\n\r\n```\r\n\r\n\r\n> Sidenote: From the main menu, you can also type `-` to bring up system commands.","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-01T22:39:21Z"},{"name":"Theme Maker","description":"","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1087","url":"","title":"Color Picker with saved themes","command":"color-picker-with-saved-themes","content":"\r\n[Open theme-color-picker in Script Kit](https://scriptkit.com/api/new?name=theme-color-picker&url=https://gist.githubusercontent.com/Ambushfall/990b39e9515ac138da5d5c4a5b783f47/raw/19af7566bd72f0e69763b729ee0857a3a1c18130/theme-color-picker.js\")\r\n\r\n```js\r\n// Name: Theme Maker\r\n// Description: Test Themes\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\n\r\nconst themePath = kenvPath('theme.json');\r\n\r\nif (!(await isFile(themePath))) {\r\n    let defaultTheme = `{\r\n        \"foreground\": \"#ffffff\",\r\n        \"accent\": \"#fbbf24\",\r\n        \"ui\": \"#343434\",\r\n        \"background\": \"#000000\",\r\n        \"opacity\": \"0.85\"\r\n    }`.trim()\r\n\r\n    await writeFile(themePath, defaultTheme)\r\n}\r\n\r\nconst theme = await readJson(themePath)\r\n\r\nconst { foreground, accent, ui, background, opacity } = theme\r\n\r\nconst list = [\"foreground\", \"accent\", \"ui\", \"background\"]\r\nconst valueList = [foreground, accent, ui, background, opacity]\r\n\r\n\r\nconst arrayList = list.map((value, index) => {\r\n    return { type: \"color\", label: value, value: valueList[index] }\r\n})\r\n\r\narrayList.push({ type: \"range\", label: \"Opacity\", value: opacity })\r\n\r\nawait fields({\r\n    onChange: (input, { value }) => {\r\n        const [foreground, accent, ui, background, opacity] = value\r\n        theme.foreground = foreground\r\n        theme.accent = accent\r\n        theme.ui = ui\r\n        theme.background = background\r\n        theme.opacity = opacity\r\n\r\n        setTheme(theme);\r\n        writeJson(themePath, theme)\r\n    },\r\n    fields: arrayList,\r\n})\r\n\r\nlet result = await div(md(`# Success!`))\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-01T21:31:53Z"},{"name":"Widget Theme Picker","description":"","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1086","url":"","title":"Widget Color Picker","command":"widget-color-picker","content":"# Customize your own theme with the color picker\r\n#### Note: Heavily influenced by johnlindquist\r\n\r\n[Open widget-theme in Script Kit](https://scriptkit.com/api/new?name=widget-theme&url=https://gist.githubusercontent.com/Ambushfall/f985c74005580f816a9eaf27852d5902/raw/57c482fec59b1d7ebacde8a2a42010f957af1249/widget-theme.js\")\r\n\r\n```js\r\nimport \"@johnlindquist/kit\"\r\n\r\n// Name: Widget Theme Picker\r\n// Description: Color Picker HTML\r\n\r\nlet themePath = kenvPath(\"theme.json\")\r\n\r\nif (!(await isFile(themePath))) {\r\n    let defaultTheme = `{\r\n        \"foreground\": \"#ffffff\",\r\n        \"accent\": \"#fbbf24\",\r\n        \"ui\": \"#343434\",\r\n        \"background\": \"#000000\",\r\n        \"opacity\": \"0.85\"\r\n    }`.trim()\r\n\r\n    await writeFile(themePath, defaultTheme)\r\n}\r\n\r\nconst theme = await readJson(themePath)\r\n\r\nconst { foreground, accent, ui, background, opacity } = theme\r\n\r\n\r\nlet w = await widget(\r\n    `\r\n    <div class=\"flex flex-col w-full h-full p-8\">\r\n    foreground:\r\n    <input type=\"color\" label=\"foreground\" data-label=\"foreground\" value=\"${foreground}\" />\r\n    background:\r\n    <input type=\"color\" label=\"background\" data-label=\"background\" value=\"${background}\" />\r\n    accent:\r\n    <input type=\"color\" label=\"accent\" data-label=\"accent\" value=\"${accent}\"/>\r\n    ui:\r\n    <input type=\"color\" label=\"ui\" data-label=\"ui\" value=\"${ui}\"/>\r\n\r\n    opacity:\r\n    <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" label=\"opacity\" data-label=\"opacity\" value=\"${opacity}\"/>\r\n\r\n</div>`,\r\n    {\r\n        width: 300,\r\n        height: 300,\r\n        draggable: false,\r\n    }\r\n)\r\n\r\nw.onInput(event => {\r\n    setTheme({\r\n        [event.dataset.label]: event.value,\r\n    })\r\n    theme[event.dataset.label] = event.value\r\n    writeJson(themePath, theme)\r\n})\r\n\r\nsetIgnoreBlur(true)\r\nawait mainScript()\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-01T21:17:08Z"},{"name":"Theme Creator","avatar":"https://avatars.githubusercontent.com/u/36073?u=1617518acc4e480c94d57308adfedebcd936ffd1&v=4","user":"johnlindquist","author":"John Lindquist","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1085","url":"https://gist.githubusercontent.com/johnlindquist/72c592fb12ecb45cac31735e572f5516/raw/827416e4c3d92d84144fe2e763b4e3ca3ed849e3/theme-creator.ts","title":"Theme Creator Prototype","command":"theme-creator-prototype","content":"\r\n[Open theme-creator in Script Kit](https://scriptkit.com/api/new?name=theme-creator&url=https://gist.githubusercontent.com/johnlindquist/72c592fb12ecb45cac31735e572f5516/raw/827416e4c3d92d84144fe2e763b4e3ca3ed849e3/theme-creator.ts\")\r\n\r\n```js\r\n// Name: Theme Creator\r\n\r\n// This will create a file at ~/.kenv/theme.txt\r\n// Edit the file, then hit save to update the theme\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet themePath = kenvPath(\"theme.txt\")\r\n\r\nif (!(await isFile(themePath))) {\r\n  let defaultTheme = `\r\n--color-primary: 255, 155, 255\r\n--color-secondary: 255, 113, 39\r\n--color-background: 255, 255, 255\r\n    `.trim()\r\n\r\n  await writeFile(themePath, defaultTheme)\r\n}\r\n\r\nawait edit(themePath)\r\n\r\nlet { watch } = await npm(\"chokidar\")\r\n\r\nsetIgnoreBlur(true)\r\nlet mS = mainScript()\r\n\r\nwatch(themePath).on(\"change\", async () => {\r\n  let contents = await readFile(themePath, \"utf-8\")\r\n\r\n  let theme = contents.split(\"\\n\").reduce((acc, line) => {\r\n    let [k, v] = line.trim().split(\":\")\r\n    acc[k.trim()] = v.trim()\r\n    return acc\r\n  }, {})\r\n\r\n  setTheme(theme)\r\n})\r\n\r\nawait mS\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-01T19:09:49Z"},{"name":"os version","avatar":"https://avatars.githubusercontent.com/u/2270425?u=85a40c344f9f2b55652cede930cc8e1f8eaf32ad&v=4","user":"danielo515","author":"Daniel Rodríguez Rivero","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1083","url":"","title":"Copy MacOS version to the clipboard","command":"copy-macos-version-to-the-clipboard","content":"Lots of support tickets asks me this information that is tedious to get\r\n\r\n[Open os-version in Script Kit](https://scriptkit.com/api/new?name=os-version&url=https://gist.githubusercontent.com/danielo515/244ef0a7557ec42218f9e194f8c85a98/raw/3ec404f3ee8600074b57081a3d4700f2431f2b4f/os-version.js\")\r\n\r\n```js\r\n// Name: os version\r\n\r\nimport \"@johnlindquist/kit\"\r\nconst version_info = (await $`sw_vers`).stdout\r\nconst version_lines = version_info.split(\"\\n\");\r\nconst version_number = version_lines[1].replace(/(?:.*?)(\\d+)/,\"$1\");\r\ncopy(`macOS ${version_number}`);\r\n\r\n```\r\n","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-01T09:21:49Z"},{"name":"Theme Maker","description":"","avatar":"https://avatars.githubusercontent.com/u/95249049?u=cd4d1a7a1db7c0a34ae93930545c0a3e32f68b67&v=4","user":"Ambushfall","author":"Ambushfall","twitter":null,"discussion":"https://github.com/johnlindquist/kit/discussions/1082","url":"","title":"Theme Maker - Test","command":"theme-maker-test","content":"### For all those that would like to test customizing\r\n\r\nNote: This preview will most likely stop working at some point\r\n\r\n\r\n\r\n[Open theme-color-picker in Script Kit](https://scriptkit.com/api/new?name=theme-color-picker&url=https://gist.githubusercontent.com/Ambushfall/6fb945ea689530704ec081c48e2bf382/raw/a1174df6d04fafcb430b9c981a3aec55a56746d4/theme-color-picker.js\")\r\n\r\n```js\r\n// Name: Theme Maker\r\n// Description: Test Themes\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nconst setArgOptions = (key, val) => {\r\n    return {\r\n        name: key, type: \"color\", input: val, onInput: async input => {\r\n            const scriptObj = {}\r\n            scriptObj[key] = input\r\n            setScriptTheme(scriptObj)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlet foreground = setArgOptions(\"foreground\", \"#ffffff\")\r\nlet accent = await arg(setArgOptions(\"accent\", \"#fbbf24\"))\r\nlet ui = await arg(setArgOptions(\"ui\", \"#343434\"))\r\nlet background = await arg(setArgOptions(\"background\", \"#000000\"));\r\nlet opacity = await arg({\r\n    type: \"range\",\r\n    name: \"opacity\",\r\n    input: \"85\",\r\n    onInput: async input => setScriptTheme({opacity:`0.${input}`})\r\n})\r\n\r\n\r\nlet result = await div(md(`# Success!`))\r\n```\r\n","extension":".md","dir":"","file":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-02-01T05:12:03Z"},{"name":"Clone A Repository","author":"Orhan Erday","twitter":null,"avatar":"https://avatars.githubusercontent.com/u/98099231?u=77e036c43b032db40acee8aa70c217e03a74d480&v=4","user":"orhan-erday","discussion":"https://github.com/johnlindquist/kit/discussions/1079","url":"","title":"Clone a repository","command":"clone-a-repository","content":"**Important: Please create `~/GithubProjects` folder**\r\n\r\n[Open with ScriptKIT](https://scriptkit.com/api/new?name=search-starred-repos&url=https://gist.github.com/orhan-erday/6951107bf773dafb3217a41d801c5185)\r\n\r\n```\r\n// Name: Clone A Repository\r\n// Author: Orhan Erday\r\n// Twitter: @orhan_erday\r\n\r\nimport \"@johnlindquist/kit\"\r\n\r\nlet repo = await arg(\"Enter a repository, i.e: orhanerday/open-ai\")\r\nlet name = repo.split(\"/\")[1]\r\n// inspect(name)\r\n\r\n// create a folder that called ~/GithubProjects\r\nawait term({\r\n    //defaults to home dir\r\n    cwd: `~/GithubProjects`,\r\n    command: `git clone https://github.com/${repo} && cd ${name} && code .`,\r\n    // The footer is optional. All terms continue with the same shortcuts\r\n    footer: `ctrl+c or cmd+enter to continue`,\r\n  })\r\n```","extension":".md","dir":"","file":"","description":"","tag":"","section":"","i":"","sectionIndex":"","createdAt":"2023-01-31T07:53:16Z"}]
